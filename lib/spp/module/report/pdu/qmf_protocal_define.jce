module QMF_PROTOCAL
{

const int ENUM_TOKEN_TYPE_NULL 	= 0x00;
const int ENUM_TOKEN_TYPE_WEB  	= 0x01;		// 强登陆, skey
const int ENUM_TOKEN_TYPE_SVR  	= 0x02;		// svr访问, 暂时无需key校验
const int ENUM_TOKEN_TYPE_LSKEY 	= 0x04;		// 弱登陆态, lskey
const int ENUM_TOKEN_TYPE_A8		= 0x20;		// A8 key.
const int ENUM_TOKEN_TYPE_A2		= 0x40;  	// A2 key.
const int ENUM_TOKEN_TYPE_SID		= 0x80;  	// 3G SID.
const int ENUM_TOKEN_TYPE_REFRESHTOKEN_WEIXIN	= 0xc0;  	//  REFRESHTOKEN
const int ENUM_TOKEN_TYPE_REFRESHTOKEN_QQ		= 0xe0;  	//  REFRESHTOKEN




const string KEY_EXTRA_ACCINFO = "accinfo"; //acc信息
const string KEY_EXTRA_ACCWANIP = "acc_wanip"; // acc外网ip
const string KEY_EXTRA_ACCWANPORT = "acc_wanport"; // 用户该次连接的acc外网port
const string KEY_EXTRA_BUSICOMPCONTROL = "busiCompCtl"; //BusiBuff的加压控制，对应struct QmfBusiControl结构
const string KEY_EXTRA_CONF_REQ = "conf_info_req"; //心跳请求配置
const string KEY_EXTRA_CONF_RSP = "conf_info_rsp"; //随心跳下发的配置更新信息
const string KEY_EXTRA_BIN_A2_KEY = "bin_a2_key"; // 原始的a2key
const string KEY_EXTRA_BIGPIPLE = "bigpiple"; // 客户端是否支持分片协议标记
const string KEY_EXTRA_IPCRED_DOMAIN = "cmd_ipcred_domain"; // cmdsvr使用,重定向的域名
const string KEY_EXTRA_SDK_VERSION = "wns_sdk_version"; // cmdsvr使用,sdk版本号,标识客户端sdk能力
const string KEY_EXTRA_CONF_RSP_LEN = "conf_info_rsp_len";
const string KEY_EXTRA_APP_DOWNLOAD = "app_dl_url";//app下载地址
const string KEY_EXTRA_CLOG        = "clog";  //webapp是否需要上报clog

const string KEY_DEVICEINFO_OS				= "os";//系统 例ios/5.11 android/2.3.6
const string KEY_DEVICEINFO_MODEL			= "model";//手机型号
const string KEY_EXTRA_PUSH_POSI          = "position";  //手机登入地点 1为深圳 2 为上海  3为天津

const int ENUM_TOKEN_MAP_OPENID_KEY   = 1;   //QQ或者微信得到的业务id key


// 客户端IP信息
struct QmfClientIpInfo
{
		0 require byte IpType;//1表示IPv4 2表示IPv6
		1 require short ClientPort;//客户端端口
		2 require int ClientIpv4;//IPV4
		3 optional byte ClientIpv6[16];//IPV6
};


// 用户票据集合
struct QmfTokenInfo
{
		0 require int Type;//token类型 类型见ENUM
		1 require vector< byte > Key;//票
		2 optional map<int, vector<byte>> ext_key;		// 扩展key
};

// accinfo
struct QmfAccInfo
{
		0 require long AccId = 0;//客户端链接唯一标识
		1 require int AccIp = 0;//接入的accip
		2 require short AccPort = 0;//接入的acc端口
		3 optional  byte AccFlag = 0; // 透传acc中的flag标志位, 0x2 -- akamai
};

// busibuff处理
struct QmfBusiControl
{
		0 require int compFlag = 0;				//0：不加压（默认无此key时也不加压），1：zip方式加压
		1 require long lenBeforeComp = 0;		//加压前的busiBuff长度
		2 require int rspCompFlag = 0;		    //是否支持回包压缩  0 - 不支持, 1 - 支持Gzip
		3 optional bool noexit = true;          // 不存在QmfBusiControl该结构体
};

// 拉取配置场景
enum eGetConfigScene
{
		SceneAppRun,            // app启动
		SceneAppActivate,       // app激活
		SceneTimeout,           // 定时器触发
		SceneNetworkChanged,    // 网络变化
		
		SQGetConfigAppStart = 100, //app 进程启动
		SQGetConfigApnChanged, //apn切换
		SQGetConfigAppTimer,   //定时拉取
		SQGetConfigFromBackToFront, //后台进入前台
};

// 心跳中的拉取请求，对应extra里的KEY_EXTRA_CONF_REQ
struct mobile_get_config_req
{
		0 optional int appid;   // wns appid
		1 optional int scene;   // 拉取场景, 见eGetConfigScene
		2 optional string cookies;
};

 //心跳场景  sense
 //1:app 启动后握手成功后发一次心跳包  
 //2:重连后握手成功后发一次心跳包  
 //3:每3分钟发一次心跳包 
 //4:省电模式下每20分钟发一次心跳包 
 //5:从省电模式回到前台，发一次心跳包
 
// 心跳回应中的拉取请求，对应extra里的KEY_EXTRA_CONF_RSP
struct mobile_get_config_rsp
{
		0 optional map<string, vector<byte> > config;
		1 optional string cookies;
		2 optional int scene_flag = 0; //if flag存在,则告诉不带cookie上来
};

struct RetryInfo
{
    0 require unsigned byte Flag; //0表示不支持，1表示支持
    1 require unsigned short RetryCount; //重试次数
    2 require long PkgId; //包唯一性标志
};

// 手机发起的请求包，APPSVR可以拿到这个结构体，获取一些公共信息
struct QmfUpstream
{
        0 require int Seq = 0;//序列号，回包时对应QmfRsp.Seq
        1 require int Appid = 0;//业务ID
        2 require long Uin = 0;//qq
        3 require string Qua = "";//qua;
        4 require string ServiceCmd = "";//命令字
		5 require string DeviceInfo = "";//设备信息 imei/os/机型/分辨率
        6 require QmfTokenInfo Token;//用户票据
        7 require QmfClientIpInfo IpInfo;//客户端IP信息
        8 require vector< byte > BusiBuff;//业务数据包
        9 require vector< byte > Extra;//wns附加信息 可能针对某些特殊业务才会带上的信息 使用UniAttribute编码
		10 optional unsigned int flag;
		11 optional unsigned int sessionID;
		12 optional RetryInfo retryinfo; //重试控制信息
		13 optional QmfBusiControl BusiControl; //BusiBuff的加压控制，对应struct QmfBusiControl结构
		14 optional string uid;//string 类型的uin
};

// APP服务器返回包，返回包结构体是不允许应用拿到的，仅限于WNS框架内部使用
struct QmfDownstream
{
        0 require int Seq = 0;//序列号
        1 require long Uin = 0;//qq
        2 require short WnsCode = 0;//wns内部返回码 业务不用设此值
        3 require short BizCode = 0;//业务返回码 由业务传入。用于wns统计监控使用
        4 require string ServiceCmd = "";//命令字
        5 require vector< byte > BusiBuff;//业务数据包
        6 require vector< byte > Extra;//wns附加信息 可能针对某些特殊业务才会带上的信息 使用UniAttribute编码
		7 optional string WnsErrorMsg;//错误信息
		8 optional string uid;//string 类型的uin
};

struct ServiceOverLoad
{
		0 require int limitedTime = 0;
		1 require string Msg = "";
		2 optional int appid = -1;
};

//公共string-string结构体
struct WnsCommonStringMap
{
	0 require map< string, string > data;
};
//公共string-buffer结构体
struct WnsCommonBufferMap
{
	0 require map< string, vector< byte > > data;
};

//PUSH
struct QmfProvidorReq
{
		0 require int SeqNo;
		1 require unsigned int Uin;
		2 require int Appid;//业务ID
		3 require string ServiceCmd;//命令字
		4 require unsigned int Time=0;//时间
		5 require int Version=0;
		6 require vector< byte > Data;//业务数据
		7 optional string DeviceToken;
		8 optional map< string, string > Reserve;//保留参数
};

};
