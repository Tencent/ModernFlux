// Code generated by protoc-gen-go.
// source: push_interface.proto
// DO NOT EDIT!

package amsactcon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CMD_TYPE int32

const (
	CMD_TYPE_SVR_PUSH_ONLINE_MSG               CMD_TYPE = 1
	CMD_TYPE_KICKOUT                           CMD_TYPE = 2
	CMD_TYPE_PEER_PUSH_ONLINE_MSG              CMD_TYPE = 3
	CMD_TYPE_CLIENT_LOGIN                      CMD_TYPE = 1001
	CMD_TYPE_CLIENT_HEARTBEAT                  CMD_TYPE = 1002
	CMD_TYPE_PUSH_ONLINE_MSG                   CMD_TYPE = 1003
	CMD_TYPE_CLIENT_KICKOUT                    CMD_TYPE = 1004
	CMD_TYPE_CLIENT_GET_ACT_LIST               CMD_TYPE = 2004
	CMD_TYPE_CLIENT_ATTEND_ACT                 CMD_TYPE = 2005
	CMD_TYPE_CLIENT_GET_ACT_LIST_FAST          CMD_TYPE = 2006
	CMD_TYPE_CLIENT_ATTEND_ACT_ALL             CMD_TYPE = 2007
	CMD_TYPE_IDIP_BATCH_REQ                    CMD_TYPE = 2008
	CMD_TYPE_AMS_ACT_CONDITION_JUDGE           CMD_TYPE = 2009
	CMD_TYPE_GPM_PRIME_GOODS_LIST              CMD_TYPE = 2011
	CMD_TYPE_GPM_PAY                           CMD_TYPE = 2013
	CMD_TYPE_GPM_CALLBACK                      CMD_TYPE = 2014
	CMD_TYPE_AMS_LOTTERY_2_0                   CMD_TYPE = 2015
	CMD_TYPE_AMS_GPM_UION_ACT                  CMD_TYPE = 2016
	CMD_TYPE_TLOGDATA_PANGGUAN_PLAYER_LOGIN    CMD_TYPE = 3004
	CMD_TYPE_TLOGDATA_PANGGUAN_PLAYER_EXPFLOW  CMD_TYPE = 3005
	CMD_TYPE_TLOGDATA_PANGGUAN_PLAYER_REGISTER CMD_TYPE = 3006
	CMD_TYPE_TLOGDATA_ALLTANK_PLAYER_LOGIN     CMD_TYPE = 3007
	CMD_TYPE_TLOGDATA_ALLTANK_PLAYER_EXPFLOW   CMD_TYPE = 3008
	CMD_TYPE_TLOGDATA_ALLTANK_PLAYER_REGISTER  CMD_TYPE = 3009
	CMD_TYPE_TLOGDATA_COMMON                   CMD_TYPE = 3010
	CMD_TYPE_TLOGDATA_DIAMOND                  CMD_TYPE = 3011
	CMD_TYPE_ACTIVITY_MODIFIED_INFORM          CMD_TYPE = 4000
	CMD_TYPE_SDK_LOG_REPORT                    CMD_TYPE = 5000
	CMD_TYPE_SDK_STATIC_REPORT                 CMD_TYPE = 5001
	CMD_TYPE_QUERY_LUCKYSTAR                   CMD_TYPE = 6001
	CMD_TYPE_PAY_SUCCEED                       CMD_TYPE = 6002
	CMD_TYPE_AME_ACTIVITY_QUALIFICATION        CMD_TYPE = 6003
	CMD_TYPE_READ_TCAPLUS                      CMD_TYPE = 100000
	CMD_TYPE_WRITE_TCAPLUS                     CMD_TYPE = 100001
)

var CMD_TYPE_name = map[int32]string{
	1:      "SVR_PUSH_ONLINE_MSG",
	2:      "KICKOUT",
	3:      "PEER_PUSH_ONLINE_MSG",
	1001:   "CLIENT_LOGIN",
	1002:   "CLIENT_HEARTBEAT",
	1003:   "PUSH_ONLINE_MSG",
	1004:   "CLIENT_KICKOUT",
	2004:   "CLIENT_GET_ACT_LIST",
	2005:   "CLIENT_ATTEND_ACT",
	2006:   "CLIENT_GET_ACT_LIST_FAST",
	2007:   "CLIENT_ATTEND_ACT_ALL",
	2008:   "IDIP_BATCH_REQ",
	2009:   "AMS_ACT_CONDITION_JUDGE",
	2011:   "GPM_PRIME_GOODS_LIST",
	2013:   "GPM_PAY",
	2014:   "GPM_CALLBACK",
	2015:   "AMS_LOTTERY_2_0",
	2016:   "AMS_GPM_UION_ACT",
	3004:   "TLOGDATA_PANGGUAN_PLAYER_LOGIN",
	3005:   "TLOGDATA_PANGGUAN_PLAYER_EXPFLOW",
	3006:   "TLOGDATA_PANGGUAN_PLAYER_REGISTER",
	3007:   "TLOGDATA_ALLTANK_PLAYER_LOGIN",
	3008:   "TLOGDATA_ALLTANK_PLAYER_EXPFLOW",
	3009:   "TLOGDATA_ALLTANK_PLAYER_REGISTER",
	3010:   "TLOGDATA_COMMON",
	3011:   "TLOGDATA_DIAMOND",
	4000:   "ACTIVITY_MODIFIED_INFORM",
	5000:   "SDK_LOG_REPORT",
	5001:   "SDK_STATIC_REPORT",
	6001:   "QUERY_LUCKYSTAR",
	6002:   "PAY_SUCCEED",
	6003:   "AME_ACTIVITY_QUALIFICATION",
	100000: "READ_TCAPLUS",
	100001: "WRITE_TCAPLUS",
}
var CMD_TYPE_value = map[string]int32{
	"SVR_PUSH_ONLINE_MSG":               1,
	"KICKOUT":                           2,
	"PEER_PUSH_ONLINE_MSG":              3,
	"CLIENT_LOGIN":                      1001,
	"CLIENT_HEARTBEAT":                  1002,
	"PUSH_ONLINE_MSG":                   1003,
	"CLIENT_KICKOUT":                    1004,
	"CLIENT_GET_ACT_LIST":               2004,
	"CLIENT_ATTEND_ACT":                 2005,
	"CLIENT_GET_ACT_LIST_FAST":          2006,
	"CLIENT_ATTEND_ACT_ALL":             2007,
	"IDIP_BATCH_REQ":                    2008,
	"AMS_ACT_CONDITION_JUDGE":           2009,
	"GPM_PRIME_GOODS_LIST":              2011,
	"GPM_PAY":                           2013,
	"GPM_CALLBACK":                      2014,
	"AMS_LOTTERY_2_0":                   2015,
	"AMS_GPM_UION_ACT":                  2016,
	"TLOGDATA_PANGGUAN_PLAYER_LOGIN":    3004,
	"TLOGDATA_PANGGUAN_PLAYER_EXPFLOW":  3005,
	"TLOGDATA_PANGGUAN_PLAYER_REGISTER": 3006,
	"TLOGDATA_ALLTANK_PLAYER_LOGIN":     3007,
	"TLOGDATA_ALLTANK_PLAYER_EXPFLOW":   3008,
	"TLOGDATA_ALLTANK_PLAYER_REGISTER":  3009,
	"TLOGDATA_COMMON":                   3010,
	"TLOGDATA_DIAMOND":                  3011,
	"ACTIVITY_MODIFIED_INFORM":          4000,
	"SDK_LOG_REPORT":                    5000,
	"SDK_STATIC_REPORT":                 5001,
	"QUERY_LUCKYSTAR":                   6001,
	"PAY_SUCCEED":                       6002,
	"AME_ACTIVITY_QUALIFICATION":        6003,
	"READ_TCAPLUS":                      100000,
	"WRITE_TCAPLUS":                     100001,
}

func (x CMD_TYPE) Enum() *CMD_TYPE {
	p := new(CMD_TYPE)
	*p = x
	return p
}
func (x CMD_TYPE) String() string {
	return proto.EnumName(CMD_TYPE_name, int32(x))
}
func (x *CMD_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_TYPE_value, data, "CMD_TYPE")
	if err != nil {
		return err
	}
	*x = CMD_TYPE(value)
	return nil
}
func (CMD_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type BODY_TYPE int32

const (
	BODY_TYPE_BODY_REQUEST      BODY_TYPE = 1
	BODY_TYPE_BODY_RESPONSE     BODY_TYPE = 2
	BODY_TYPE_BODY_REQUEST_SIM  BODY_TYPE = 3
	BODY_TYPE_BODY_RESPONSE_SIM BODY_TYPE = 4
)

var BODY_TYPE_name = map[int32]string{
	1: "BODY_REQUEST",
	2: "BODY_RESPONSE",
	3: "BODY_REQUEST_SIM",
	4: "BODY_RESPONSE_SIM",
}
var BODY_TYPE_value = map[string]int32{
	"BODY_REQUEST":      1,
	"BODY_RESPONSE":     2,
	"BODY_REQUEST_SIM":  3,
	"BODY_RESPONSE_SIM": 4,
}

func (x BODY_TYPE) Enum() *BODY_TYPE {
	p := new(BODY_TYPE)
	*p = x
	return p
}
func (x BODY_TYPE) String() string {
	return proto.EnumName(BODY_TYPE_name, int32(x))
}
func (x *BODY_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BODY_TYPE_value, data, "BODY_TYPE")
	if err != nil {
		return err
	}
	*x = BODY_TYPE(value)
	return nil
}
func (BODY_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

type RET_CODE int32

const (
	RET_CODE_RET_SDK_ATTACK                RET_CODE = -7
	RET_CODE_RET_CREATE_TASK_ERROR         RET_CODE = -6
	RET_CODE_RET_PARSE_ERROR               RET_CODE = -5
	RET_CODE_RET_PARAM_ERROR               RET_CODE = -4
	RET_CODE_RET_PARAM_NOT_ENOUGH          RET_CODE = -3
	RET_CODE_RET_PARAM_FORMAT_ERROR        RET_CODE = -2
	RET_CODE_RET_CMD_NOT_SUPPORT           RET_CODE = -1
	RET_CODE_RET_SUCCESS                   RET_CODE = 0
	RET_CODE_RET_TCAPLUS_ERROR             RET_CODE = 1
	RET_CODE_RET_REMOTE_KICKOUT_ERROR      RET_CODE = 2
	RET_CODE_RET_NOTIFY_SVC_ERROR          RET_CODE = 4
	RET_CODE_RET_SVC_CONN_NOT_EXIST        RET_CODE = 5
	RET_CODE_RET_REMOTE_PUSH_ERROR         RET_CODE = 6
	RET_CODE_RET_APP_CONN_NOT_EXIST        RET_CODE = 7
	RET_CODE_RET_SSL_ERROR                 RET_CODE = 8
	RET_CODE_RET_APP_USER_NOT_EXIST        RET_CODE = 9
	RET_CODE_RET_DEVICE_TYPE_UNKNOWN       RET_CODE = 10
	RET_CODE_RET_DEVICE_TOKEN_NOT_EXIST    RET_CODE = 11
	RET_CODE_RET_USER_ID_CONFLICT          RET_CODE = 12
	RET_CODE_RET_KICK_OLD_SVC_FAIL         RET_CODE = 13
	RET_CODE_RET_INVALID_DEVICE_TOKEN      RET_CODE = 14
	RET_CODE_RET_ACCESS_TCAPLUS_PROXY_FAIL RET_CODE = 15
	RET_CODE_RET_ACCESS_REDIS_FAIL         RET_CODE = 16
)

var RET_CODE_name = map[int32]string{
	-7: "RET_SDK_ATTACK",
	-6: "RET_CREATE_TASK_ERROR",
	-5: "RET_PARSE_ERROR",
	-4: "RET_PARAM_ERROR",
	-3: "RET_PARAM_NOT_ENOUGH",
	-2: "RET_PARAM_FORMAT_ERROR",
	-1: "RET_CMD_NOT_SUPPORT",
	0:  "RET_SUCCESS",
	1:  "RET_TCAPLUS_ERROR",
	2:  "RET_REMOTE_KICKOUT_ERROR",
	4:  "RET_NOTIFY_SVC_ERROR",
	5:  "RET_SVC_CONN_NOT_EXIST",
	6:  "RET_REMOTE_PUSH_ERROR",
	7:  "RET_APP_CONN_NOT_EXIST",
	8:  "RET_SSL_ERROR",
	9:  "RET_APP_USER_NOT_EXIST",
	10: "RET_DEVICE_TYPE_UNKNOWN",
	11: "RET_DEVICE_TOKEN_NOT_EXIST",
	12: "RET_USER_ID_CONFLICT",
	13: "RET_KICK_OLD_SVC_FAIL",
	14: "RET_INVALID_DEVICE_TOKEN",
	15: "RET_ACCESS_TCAPLUS_PROXY_FAIL",
	16: "RET_ACCESS_REDIS_FAIL",
}
var RET_CODE_value = map[string]int32{
	"RET_SDK_ATTACK":                -7,
	"RET_CREATE_TASK_ERROR":         -6,
	"RET_PARSE_ERROR":               -5,
	"RET_PARAM_ERROR":               -4,
	"RET_PARAM_NOT_ENOUGH":          -3,
	"RET_PARAM_FORMAT_ERROR":        -2,
	"RET_CMD_NOT_SUPPORT":           -1,
	"RET_SUCCESS":                   0,
	"RET_TCAPLUS_ERROR":             1,
	"RET_REMOTE_KICKOUT_ERROR":      2,
	"RET_NOTIFY_SVC_ERROR":          4,
	"RET_SVC_CONN_NOT_EXIST":        5,
	"RET_REMOTE_PUSH_ERROR":         6,
	"RET_APP_CONN_NOT_EXIST":        7,
	"RET_SSL_ERROR":                 8,
	"RET_APP_USER_NOT_EXIST":        9,
	"RET_DEVICE_TYPE_UNKNOWN":       10,
	"RET_DEVICE_TOKEN_NOT_EXIST":    11,
	"RET_USER_ID_CONFLICT":          12,
	"RET_KICK_OLD_SVC_FAIL":         13,
	"RET_INVALID_DEVICE_TOKEN":      14,
	"RET_ACCESS_TCAPLUS_PROXY_FAIL": 15,
	"RET_ACCESS_REDIS_FAIL":         16,
}

func (x RET_CODE) Enum() *RET_CODE {
	p := new(RET_CODE)
	*p = x
	return p
}
func (x RET_CODE) String() string {
	return proto.EnumName(RET_CODE_name, int32(x))
}
func (x *RET_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RET_CODE_value, data, "RET_CODE")
	if err != nil {
		return err
	}
	*x = RET_CODE(value)
	return nil
}
func (RET_CODE) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

type ACT_STYLE int32

const (
	ACT_STYLE_ONE_BUTTON_ACT    ACT_STYLE = 1
	ACT_STYLE_MUTLI_BUTTON_ACT  ACT_STYLE = 3
	ACT_STYLE_STATIC_SHOW_ACT   ACT_STYLE = 4
	ACT_STYLE_LUCKY_STAR_ACT    ACT_STYLE = 5
	ACT_STYLE_INCOMING_USER_ACT ACT_STYLE = 6
	ACT_STYLE_BACK_USER_ACT     ACT_STYLE = 7
	ACT_STYLE_SECRET_SHOP_ACT   ACT_STYLE = 8
	ACT_STYLE_EXCHANGE_ACT      ACT_STYLE = 9
	ACT_STYLE_GRAND_TOTAL_ACT   ACT_STYLE = 10
	ACT_STYLE_ADVERTISE_ACT     ACT_STYLE = 11
	ACT_STYLE_INVITE_CODE_ACT   ACT_STYLE = 12
	ACT_STYLE_ACTIVE_CODE_ACT   ACT_STYLE = 13
)

var ACT_STYLE_name = map[int32]string{
	1:  "ONE_BUTTON_ACT",
	3:  "MUTLI_BUTTON_ACT",
	4:  "STATIC_SHOW_ACT",
	5:  "LUCKY_STAR_ACT",
	6:  "INCOMING_USER_ACT",
	7:  "BACK_USER_ACT",
	8:  "SECRET_SHOP_ACT",
	9:  "EXCHANGE_ACT",
	10: "GRAND_TOTAL_ACT",
	11: "ADVERTISE_ACT",
	12: "INVITE_CODE_ACT",
	13: "ACTIVE_CODE_ACT",
}
var ACT_STYLE_value = map[string]int32{
	"ONE_BUTTON_ACT":    1,
	"MUTLI_BUTTON_ACT":  3,
	"STATIC_SHOW_ACT":   4,
	"LUCKY_STAR_ACT":    5,
	"INCOMING_USER_ACT": 6,
	"BACK_USER_ACT":     7,
	"SECRET_SHOP_ACT":   8,
	"EXCHANGE_ACT":      9,
	"GRAND_TOTAL_ACT":   10,
	"ADVERTISE_ACT":     11,
	"INVITE_CODE_ACT":   12,
	"ACTIVE_CODE_ACT":   13,
}

func (x ACT_STYLE) Enum() *ACT_STYLE {
	p := new(ACT_STYLE)
	*p = x
	return p
}
func (x ACT_STYLE) String() string {
	return proto.EnumName(ACT_STYLE_name, int32(x))
}
func (x *ACT_STYLE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ACT_STYLE_value, data, "ACT_STYLE")
	if err != nil {
		return err
	}
	*x = ACT_STYLE(value)
	return nil
}
func (ACT_STYLE) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

type DEVICE_TYPE int32

const (
	DEVICE_TYPE_DEVICE_TYPE_UNKOWN  DEVICE_TYPE = 0
	DEVICE_TYPE_DEVICE_TYPE_IPHONE  DEVICE_TYPE = 1
	DEVICE_TYPE_DEVICE_TYPE_ANDROID DEVICE_TYPE = 2
)

var DEVICE_TYPE_name = map[int32]string{
	0: "DEVICE_TYPE_UNKOWN",
	1: "DEVICE_TYPE_IPHONE",
	2: "DEVICE_TYPE_ANDROID",
}
var DEVICE_TYPE_value = map[string]int32{
	"DEVICE_TYPE_UNKOWN":  0,
	"DEVICE_TYPE_IPHONE":  1,
	"DEVICE_TYPE_ANDROID": 2,
}

func (x DEVICE_TYPE) Enum() *DEVICE_TYPE {
	p := new(DEVICE_TYPE)
	*p = x
	return p
}
func (x DEVICE_TYPE) String() string {
	return proto.EnumName(DEVICE_TYPE_name, int32(x))
}
func (x *DEVICE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DEVICE_TYPE_value, data, "DEVICE_TYPE")
	if err != nil {
		return err
	}
	*x = DEVICE_TYPE(value)
	return nil
}
func (DEVICE_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

type NET_TYPE int32

const (
	NET_TYPE_NETWORK_TYPE_WIFI    NET_TYPE = -1
	NET_TYPE_NETWORK_TYPE_UNKNOWN NET_TYPE = 0
	NET_TYPE_NETWORK_TYPE_GPRS    NET_TYPE = 1
	NET_TYPE_NETWORK_TYPE_EDGE    NET_TYPE = 2
	NET_TYPE_NETWORK_TYPE_UMTS    NET_TYPE = 3
	NET_TYPE_NETWORK_TYPE_CDMA    NET_TYPE = 4
	NET_TYPE_NETWORK_TYPE_EVDO    NET_TYPE = 5
	NET_TYPE_NETWORK_TYPE_EVDO_A  NET_TYPE = 6
	NET_TYPE_NETWORK_TYPE_1xRTT   NET_TYPE = 7
	NET_TYPE_NETWORK_TYPE_HSDPA   NET_TYPE = 8
	NET_TYPE_NETWORK_TYPE_HSUPA   NET_TYPE = 9
	NET_TYPE_NETWORK_TYPE_HSPA    NET_TYPE = 10
)

var NET_TYPE_name = map[int32]string{
	-1: "NETWORK_TYPE_WIFI",
	0:  "NETWORK_TYPE_UNKNOWN",
	1:  "NETWORK_TYPE_GPRS",
	2:  "NETWORK_TYPE_EDGE",
	3:  "NETWORK_TYPE_UMTS",
	4:  "NETWORK_TYPE_CDMA",
	5:  "NETWORK_TYPE_EVDO",
	6:  "NETWORK_TYPE_EVDO_A",
	7:  "NETWORK_TYPE_1xRTT",
	8:  "NETWORK_TYPE_HSDPA",
	9:  "NETWORK_TYPE_HSUPA",
	10: "NETWORK_TYPE_HSPA",
}
var NET_TYPE_value = map[string]int32{
	"NETWORK_TYPE_WIFI":    -1,
	"NETWORK_TYPE_UNKNOWN": 0,
	"NETWORK_TYPE_GPRS":    1,
	"NETWORK_TYPE_EDGE":    2,
	"NETWORK_TYPE_UMTS":    3,
	"NETWORK_TYPE_CDMA":    4,
	"NETWORK_TYPE_EVDO":    5,
	"NETWORK_TYPE_EVDO_A":  6,
	"NETWORK_TYPE_1xRTT":   7,
	"NETWORK_TYPE_HSDPA":   8,
	"NETWORK_TYPE_HSUPA":   9,
	"NETWORK_TYPE_HSPA":    10,
}

func (x NET_TYPE) Enum() *NET_TYPE {
	p := new(NET_TYPE)
	*p = x
	return p
}
func (x NET_TYPE) String() string {
	return proto.EnumName(NET_TYPE_name, int32(x))
}
func (x *NET_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NET_TYPE_value, data, "NET_TYPE")
	if err != nil {
		return err
	}
	*x = NET_TYPE(value)
	return nil
}
func (NET_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

type TABLE_FIELD int32

const (
	TABLE_FIELD_TABLE_FIELD_USER_ID          TABLE_FIELD = 1
	TABLE_FIELD_TABLE_FIELD_SVC_CONN_LOC     TABLE_FIELD = 2
	TABLE_FIELD_TABLE_FIELD_SVC_SEND_MSG     TABLE_FIELD = 3
	TABLE_FIELD_TABLE_FIELD_SVC_SEND_MSG_NUM TABLE_FIELD = 4
)

var TABLE_FIELD_name = map[int32]string{
	1: "TABLE_FIELD_USER_ID",
	2: "TABLE_FIELD_SVC_CONN_LOC",
	3: "TABLE_FIELD_SVC_SEND_MSG",
	4: "TABLE_FIELD_SVC_SEND_MSG_NUM",
}
var TABLE_FIELD_value = map[string]int32{
	"TABLE_FIELD_USER_ID":          1,
	"TABLE_FIELD_SVC_CONN_LOC":     2,
	"TABLE_FIELD_SVC_SEND_MSG":     3,
	"TABLE_FIELD_SVC_SEND_MSG_NUM": 4,
}

func (x TABLE_FIELD) Enum() *TABLE_FIELD {
	p := new(TABLE_FIELD)
	*p = x
	return p
}
func (x TABLE_FIELD) String() string {
	return proto.EnumName(TABLE_FIELD_name, int32(x))
}
func (x *TABLE_FIELD) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TABLE_FIELD_value, data, "TABLE_FIELD")
	if err != nil {
		return err
	}
	*x = TABLE_FIELD(value)
	return nil
}
func (TABLE_FIELD) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

type CmdBase struct {
	SeqId            *int64 `protobuf:"varint,1,opt,name=seq_id" json:"seq_id,omitempty"`
	CmdId            *int64 `protobuf:"varint,2,opt,name=cmd_id" json:"cmd_id,omitempty"`
	Type             *int64 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	FromIp           []byte `protobuf:"bytes,4,opt,name=from_ip" json:"from_ip,omitempty"`
	ProcessId        *int64 `protobuf:"varint,5,opt,name=process_id" json:"process_id,omitempty"`
	ModId            *int64 `protobuf:"varint,6,opt,name=mod_id" json:"mod_id,omitempty"`
	Version          []byte `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	Body             []byte `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	AppId            []byte `protobuf:"bytes,9,opt,name=app_id" json:"app_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CmdBase) Reset()                    { *m = CmdBase{} }
func (m *CmdBase) String() string            { return proto.CompactTextString(m) }
func (*CmdBase) ProtoMessage()               {}
func (*CmdBase) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *CmdBase) GetSeqId() int64 {
	if m != nil && m.SeqId != nil {
		return *m.SeqId
	}
	return 0
}

func (m *CmdBase) GetCmdId() int64 {
	if m != nil && m.CmdId != nil {
		return *m.CmdId
	}
	return 0
}

func (m *CmdBase) GetType() int64 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CmdBase) GetFromIp() []byte {
	if m != nil {
		return m.FromIp
	}
	return nil
}

func (m *CmdBase) GetProcessId() int64 {
	if m != nil && m.ProcessId != nil {
		return *m.ProcessId
	}
	return 0
}

func (m *CmdBase) GetModId() int64 {
	if m != nil && m.ModId != nil {
		return *m.ModId
	}
	return 0
}

func (m *CmdBase) GetVersion() []byte {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CmdBase) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *CmdBase) GetAppId() []byte {
	if m != nil {
		return m.AppId
	}
	return nil
}

type KV struct {
	Name             []byte `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *KV) Reset()                    { *m = KV{} }
func (m *KV) String() string            { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()               {}
func (*KV) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *KV) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *KV) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CmdBaseResp struct {
	Ret              *int64 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ErrMsg           []byte `protobuf:"bytes,2,opt,name=err_msg" json:"err_msg,omitempty"`
	Resp             []byte `protobuf:"bytes,3,opt,name=resp" json:"resp,omitempty"`
	Md5Val           []byte `protobuf:"bytes,4,opt,name=md5val" json:"md5val,omitempty"`
	Amesn            []byte `protobuf:"bytes,5,opt,name=amesn" json:"amesn,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CmdBaseResp) Reset()                    { *m = CmdBaseResp{} }
func (m *CmdBaseResp) String() string            { return proto.CompactTextString(m) }
func (*CmdBaseResp) ProtoMessage()               {}
func (*CmdBaseResp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *CmdBaseResp) GetRet() int64 {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return 0
}

func (m *CmdBaseResp) GetErrMsg() []byte {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *CmdBaseResp) GetResp() []byte {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *CmdBaseResp) GetMd5Val() []byte {
	if m != nil {
		return m.Md5Val
	}
	return nil
}

func (m *CmdBaseResp) GetAmesn() []byte {
	if m != nil {
		return m.Amesn
	}
	return nil
}

type SvrPushOnlineMsgReq struct {
	OnlineMsg        []*OnlineMsgInfo `protobuf:"bytes,1,rep,name=online_msg" json:"online_msg,omitempty"`
	GetAllList       *int64           `protobuf:"varint,2,opt,name=get_all_list" json:"get_all_list,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SvrPushOnlineMsgReq) Reset()                    { *m = SvrPushOnlineMsgReq{} }
func (m *SvrPushOnlineMsgReq) String() string            { return proto.CompactTextString(m) }
func (*SvrPushOnlineMsgReq) ProtoMessage()               {}
func (*SvrPushOnlineMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *SvrPushOnlineMsgReq) GetOnlineMsg() []*OnlineMsgInfo {
	if m != nil {
		return m.OnlineMsg
	}
	return nil
}

func (m *SvrPushOnlineMsgReq) GetGetAllList() int64 {
	if m != nil && m.GetAllList != nil {
		return *m.GetAllList
	}
	return 0
}

type PushOnlineMsgReq struct {
	OnlineMsg        []*OnlineMsgInfo `protobuf:"bytes,1,rep,name=online_msg" json:"online_msg,omitempty"`
	GetAllList       *int64           `protobuf:"varint,2,opt,name=get_all_list" json:"get_all_list,omitempty"`
	Extend           []*KV            `protobuf:"bytes,3,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *PushOnlineMsgReq) Reset()                    { *m = PushOnlineMsgReq{} }
func (m *PushOnlineMsgReq) String() string            { return proto.CompactTextString(m) }
func (*PushOnlineMsgReq) ProtoMessage()               {}
func (*PushOnlineMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *PushOnlineMsgReq) GetOnlineMsg() []*OnlineMsgInfo {
	if m != nil {
		return m.OnlineMsg
	}
	return nil
}

func (m *PushOnlineMsgReq) GetGetAllList() int64 {
	if m != nil && m.GetAllList != nil {
		return *m.GetAllList
	}
	return 0
}

func (m *PushOnlineMsgReq) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type ControlInfo struct {
	LogReportLevel     *int64 `protobuf:"varint,1,opt,name=log_report_level" json:"log_report_level,omitempty"`
	StaticsReportLevel *int64 `protobuf:"varint,2,opt,name=statics_report_level" json:"statics_report_level,omitempty"`
	PollingInterval    *int64 `protobuf:"varint,3,opt,name=polling_interval" json:"polling_interval,omitempty"`
	ConnectionType     *int64 `protobuf:"varint,4,opt,name=connection_type" json:"connection_type,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *ControlInfo) Reset()                    { *m = ControlInfo{} }
func (m *ControlInfo) String() string            { return proto.CompactTextString(m) }
func (*ControlInfo) ProtoMessage()               {}
func (*ControlInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *ControlInfo) GetLogReportLevel() int64 {
	if m != nil && m.LogReportLevel != nil {
		return *m.LogReportLevel
	}
	return 0
}

func (m *ControlInfo) GetStaticsReportLevel() int64 {
	if m != nil && m.StaticsReportLevel != nil {
		return *m.StaticsReportLevel
	}
	return 0
}

func (m *ControlInfo) GetPollingInterval() int64 {
	if m != nil && m.PollingInterval != nil {
		return *m.PollingInterval
	}
	return 0
}

func (m *ControlInfo) GetConnectionType() int64 {
	if m != nil && m.ConnectionType != nil {
		return *m.ConnectionType
	}
	return 0
}

type Channel struct {
	Name             []byte `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id               *int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Num              *int64 `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
	Begin            *int64 `protobuf:"varint,4,opt,name=begin" json:"begin,omitempty"`
	End              *int64 `protobuf:"varint,5,opt,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *Channel) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Channel) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Channel) GetNum() int64 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *Channel) GetBegin() int64 {
	if m != nil && m.Begin != nil {
		return *m.Begin
	}
	return 0
}

func (m *Channel) GetEnd() int64 {
	if m != nil && m.End != nil {
		return *m.End
	}
	return 0
}

type OnlineMsgInfo struct {
	OpenId           []byte        `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	ActInfo          []*ActInfo    `protobuf:"bytes,2,rep,name=act_info" json:"act_info,omitempty"`
	ActNum           *int64        `protobuf:"varint,3,opt,name=act_num" json:"act_num,omitempty"`
	NoUse            []byte        `protobuf:"bytes,4,opt,name=no_use" json:"no_use,omitempty"`
	MsgTimestamp     *int64        `protobuf:"varint,5,opt,name=msg_timestamp" json:"msg_timestamp,omitempty"`
	MsgControl       *ControlInfo  `protobuf:"bytes,6,opt,name=msg_control" json:"msg_control,omitempty"`
	Chan             []*Channel    `protobuf:"bytes,7,rep,name=chan" json:"chan,omitempty"`
	Sarea            []byte        `protobuf:"bytes,8,opt,name=sarea" json:"sarea,omitempty"`
	Splatid          []byte        `protobuf:"bytes,9,opt,name=splatid" json:"splatid,omitempty"`
	Spartition       []byte        `protobuf:"bytes,10,opt,name=spartition" json:"spartition,omitempty"`
	Lkr              *LuckyListRes `protobuf:"bytes,11,opt,name=lkr" json:"lkr,omitempty"`
	Sroleid          []byte        `protobuf:"bytes,12,opt,name=sroleid" json:"sroleid,omitempty"`
	SdkExtend        []byte        `protobuf:"bytes,13,opt,name=sdk_extend" json:"sdk_extend,omitempty"`
	Extend           []*KV         `protobuf:"bytes,14,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *OnlineMsgInfo) Reset()                    { *m = OnlineMsgInfo{} }
func (m *OnlineMsgInfo) String() string            { return proto.CompactTextString(m) }
func (*OnlineMsgInfo) ProtoMessage()               {}
func (*OnlineMsgInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *OnlineMsgInfo) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *OnlineMsgInfo) GetActInfo() []*ActInfo {
	if m != nil {
		return m.ActInfo
	}
	return nil
}

func (m *OnlineMsgInfo) GetActNum() int64 {
	if m != nil && m.ActNum != nil {
		return *m.ActNum
	}
	return 0
}

func (m *OnlineMsgInfo) GetNoUse() []byte {
	if m != nil {
		return m.NoUse
	}
	return nil
}

func (m *OnlineMsgInfo) GetMsgTimestamp() int64 {
	if m != nil && m.MsgTimestamp != nil {
		return *m.MsgTimestamp
	}
	return 0
}

func (m *OnlineMsgInfo) GetMsgControl() *ControlInfo {
	if m != nil {
		return m.MsgControl
	}
	return nil
}

func (m *OnlineMsgInfo) GetChan() []*Channel {
	if m != nil {
		return m.Chan
	}
	return nil
}

func (m *OnlineMsgInfo) GetSarea() []byte {
	if m != nil {
		return m.Sarea
	}
	return nil
}

func (m *OnlineMsgInfo) GetSplatid() []byte {
	if m != nil {
		return m.Splatid
	}
	return nil
}

func (m *OnlineMsgInfo) GetSpartition() []byte {
	if m != nil {
		return m.Spartition
	}
	return nil
}

func (m *OnlineMsgInfo) GetLkr() *LuckyListRes {
	if m != nil {
		return m.Lkr
	}
	return nil
}

func (m *OnlineMsgInfo) GetSroleid() []byte {
	if m != nil {
		return m.Sroleid
	}
	return nil
}

func (m *OnlineMsgInfo) GetSdkExtend() []byte {
	if m != nil {
		return m.SdkExtend
	}
	return nil
}

func (m *OnlineMsgInfo) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type LuckyListRes struct {
	EntranceFlag     []byte          `protobuf:"bytes,1,opt,name=entrance_flag" json:"entrance_flag,omitempty"`
	InfoId           []byte          `protobuf:"bytes,2,opt,name=info_id" json:"info_id,omitempty"`
	LuckActInfo      []*LuckyActInfo `protobuf:"bytes,3,rep,name=luck_act_info" json:"luck_act_info,omitempty"`
	IGoodsId         []byte          `protobuf:"bytes,4,opt,name=iGoodsId" json:"iGoodsId,omitempty"`
	Extend           []*KV           `protobuf:"bytes,5,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *LuckyListRes) Reset()                    { *m = LuckyListRes{} }
func (m *LuckyListRes) String() string            { return proto.CompactTextString(m) }
func (*LuckyListRes) ProtoMessage()               {}
func (*LuckyListRes) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *LuckyListRes) GetEntranceFlag() []byte {
	if m != nil {
		return m.EntranceFlag
	}
	return nil
}

func (m *LuckyListRes) GetInfoId() []byte {
	if m != nil {
		return m.InfoId
	}
	return nil
}

func (m *LuckyListRes) GetLuckActInfo() []*LuckyActInfo {
	if m != nil {
		return m.LuckActInfo
	}
	return nil
}

func (m *LuckyListRes) GetIGoodsId() []byte {
	if m != nil {
		return m.IGoodsId
	}
	return nil
}

func (m *LuckyListRes) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type LuckyActInfo struct {
	InfoId           []byte               `protobuf:"bytes,1,opt,name=info_id" json:"info_id,omitempty"`
	PicUrl           []byte               `protobuf:"bytes,2,opt,name=pic_url" json:"pic_url,omitempty"`
	ActDesc          []byte               `protobuf:"bytes,3,opt,name=act_desc" json:"act_desc,omitempty"`
	DaojuchengId     []byte               `protobuf:"bytes,4,opt,name=daojucheng_id" json:"daojucheng_id,omitempty"`
	Data             []*GPMPrimeGoodsInfo `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
	Picmd5Val        []byte               `protobuf:"bytes,6,opt,name=picmd5val" json:"picmd5val,omitempty"`
	ActDescmd5Val    []byte               `protobuf:"bytes,7,opt,name=act_descmd5val" json:"act_descmd5val,omitempty"`
	RecommendId      []byte               `protobuf:"bytes,8,opt,name=recommend_id" json:"recommend_id,omitempty"`
	ChangjingId      []byte               `protobuf:"bytes,9,opt,name=changjing_id" json:"changjing_id,omitempty"`
	ActStyle         *int64               `protobuf:"varint,10,opt,name=act_style" json:"act_style,omitempty"`
	ActTitle         []byte               `protobuf:"bytes,11,opt,name=act_title" json:"act_title,omitempty"`
	LeftSecond       *int64               `protobuf:"varint,12,opt,name=left_second" json:"left_second,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *LuckyActInfo) Reset()                    { *m = LuckyActInfo{} }
func (m *LuckyActInfo) String() string            { return proto.CompactTextString(m) }
func (*LuckyActInfo) ProtoMessage()               {}
func (*LuckyActInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *LuckyActInfo) GetInfoId() []byte {
	if m != nil {
		return m.InfoId
	}
	return nil
}

func (m *LuckyActInfo) GetPicUrl() []byte {
	if m != nil {
		return m.PicUrl
	}
	return nil
}

func (m *LuckyActInfo) GetActDesc() []byte {
	if m != nil {
		return m.ActDesc
	}
	return nil
}

func (m *LuckyActInfo) GetDaojuchengId() []byte {
	if m != nil {
		return m.DaojuchengId
	}
	return nil
}

func (m *LuckyActInfo) GetData() []*GPMPrimeGoodsInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LuckyActInfo) GetPicmd5Val() []byte {
	if m != nil {
		return m.Picmd5Val
	}
	return nil
}

func (m *LuckyActInfo) GetActDescmd5Val() []byte {
	if m != nil {
		return m.ActDescmd5Val
	}
	return nil
}

func (m *LuckyActInfo) GetRecommendId() []byte {
	if m != nil {
		return m.RecommendId
	}
	return nil
}

func (m *LuckyActInfo) GetChangjingId() []byte {
	if m != nil {
		return m.ChangjingId
	}
	return nil
}

func (m *LuckyActInfo) GetActStyle() int64 {
	if m != nil && m.ActStyle != nil {
		return *m.ActStyle
	}
	return 0
}

func (m *LuckyActInfo) GetActTitle() []byte {
	if m != nil {
		return m.ActTitle
	}
	return nil
}

func (m *LuckyActInfo) GetLeftSecond() int64 {
	if m != nil && m.LeftSecond != nil {
		return *m.LeftSecond
	}
	return 0
}

type GoodsInfo struct {
	Goodsid          *int64 `protobuf:"varint,1,opt,name=goodsid" json:"goodsid,omitempty"`
	Goodcount        *int64 `protobuf:"varint,2,opt,name=goodcount" json:"goodcount,omitempty"`
	Goodname         []byte `protobuf:"bytes,3,opt,name=goodname" json:"goodname,omitempty"`
	GoodPicUrl       []byte `protobuf:"bytes,4,opt,name=good_pic_url" json:"good_pic_url,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GoodsInfo) Reset()                    { *m = GoodsInfo{} }
func (m *GoodsInfo) String() string            { return proto.CompactTextString(m) }
func (*GoodsInfo) ProtoMessage()               {}
func (*GoodsInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *GoodsInfo) GetGoodsid() int64 {
	if m != nil && m.Goodsid != nil {
		return *m.Goodsid
	}
	return 0
}

func (m *GoodsInfo) GetGoodcount() int64 {
	if m != nil && m.Goodcount != nil {
		return *m.Goodcount
	}
	return 0
}

func (m *GoodsInfo) GetGoodname() []byte {
	if m != nil {
		return m.Goodname
	}
	return nil
}

func (m *GoodsInfo) GetGoodPicUrl() []byte {
	if m != nil {
		return m.GoodPicUrl
	}
	return nil
}

type ActInfo struct {
	AppId            []byte               `protobuf:"bytes,1,opt,name=app_id" json:"app_id,omitempty"`
	ActId            []byte               `protobuf:"bytes,2,opt,name=act_id" json:"act_id,omitempty"`
	ActTitle         []byte               `protobuf:"bytes,3,opt,name=act_title" json:"act_title,omitempty"`
	ActContent       []byte               `protobuf:"bytes,4,opt,name=act_content" json:"act_content,omitempty"`
	ActBegTime       *uint32              `protobuf:"varint,5,opt,name=act_beg_time" json:"act_beg_time,omitempty"`
	ActEndTime       *uint32              `protobuf:"varint,6,opt,name=act_end_time" json:"act_end_time,omitempty"`
	UserFinishTime   *uint32              `protobuf:"varint,7,opt,name=user_finish_time" json:"user_finish_time,omitempty"`
	ConditionInfo    []*ActCondInfo       `protobuf:"bytes,8,rep,name=condition_info" json:"condition_info,omitempty"`
	ActUrl           []byte               `protobuf:"bytes,9,opt,name=act_url" json:"act_url,omitempty"`
	FlowList         []*ActFlowInfo       `protobuf:"bytes,10,rep,name=flow_list" json:"flow_list,omitempty"`
	ActStyle         *int64               `protobuf:"varint,11,opt,name=act_style" json:"act_style,omitempty"`
	PicUrl           []byte               `protobuf:"bytes,12,opt,name=pic_url" json:"pic_url,omitempty"`
	PicTimestamp     *int64               `protobuf:"varint,13,opt,name=pic_timestamp" json:"pic_timestamp,omitempty"`
	Showflag         *int64               `protobuf:"varint,14,opt,name=showflag" json:"showflag,omitempty"`
	Titleicon        []byte               `protobuf:"bytes,15,opt,name=titleicon" json:"titleicon,omitempty"`
	Jumpurl          []byte               `protobuf:"bytes,16,opt,name=jumpurl" json:"jumpurl,omitempty"`
	Limittype        []byte               `protobuf:"bytes,17,opt,name=limittype" json:"limittype,omitempty"`
	Limitnum         []byte               `protobuf:"bytes,18,opt,name=limitnum" json:"limitnum,omitempty"`
	Usenum           []byte               `protobuf:"bytes,19,opt,name=usenum" json:"usenum,omitempty"`
	Limitbusiness    []byte               `protobuf:"bytes,20,opt,name=limitbusiness" json:"limitbusiness,omitempty"`
	InfoId           *int64               `protobuf:"varint,21,opt,name=info_id" json:"info_id,omitempty"`
	Realicon         *uint32              `protobuf:"varint,23,opt,name=realicon" json:"realicon,omitempty"`
	Status           *uint32              `protobuf:"varint,24,opt,name=status" json:"status,omitempty"`
	ExtendFields     [][]byte             `protobuf:"bytes,25,rep,name=extend_fields" json:"extend_fields,omitempty"`
	Type             *uint32              `protobuf:"varint,26,opt,name=type" json:"type,omitempty"`
	Md5Val           []byte               `protobuf:"bytes,27,opt,name=md5_val" json:"md5_val,omitempty"`
	DaojuchengId     []byte               `protobuf:"bytes,28,opt,name=daojucheng_id" json:"daojucheng_id,omitempty"`
	Data             []*GPMPrimeGoodsInfo `protobuf:"bytes,29,rep,name=data" json:"data,omitempty"`
	Extend           []*KV                `protobuf:"bytes,30,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ActInfo) Reset()                    { *m = ActInfo{} }
func (m *ActInfo) String() string            { return proto.CompactTextString(m) }
func (*ActInfo) ProtoMessage()               {}
func (*ActInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *ActInfo) GetAppId() []byte {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *ActInfo) GetActId() []byte {
	if m != nil {
		return m.ActId
	}
	return nil
}

func (m *ActInfo) GetActTitle() []byte {
	if m != nil {
		return m.ActTitle
	}
	return nil
}

func (m *ActInfo) GetActContent() []byte {
	if m != nil {
		return m.ActContent
	}
	return nil
}

func (m *ActInfo) GetActBegTime() uint32 {
	if m != nil && m.ActBegTime != nil {
		return *m.ActBegTime
	}
	return 0
}

func (m *ActInfo) GetActEndTime() uint32 {
	if m != nil && m.ActEndTime != nil {
		return *m.ActEndTime
	}
	return 0
}

func (m *ActInfo) GetUserFinishTime() uint32 {
	if m != nil && m.UserFinishTime != nil {
		return *m.UserFinishTime
	}
	return 0
}

func (m *ActInfo) GetConditionInfo() []*ActCondInfo {
	if m != nil {
		return m.ConditionInfo
	}
	return nil
}

func (m *ActInfo) GetActUrl() []byte {
	if m != nil {
		return m.ActUrl
	}
	return nil
}

func (m *ActInfo) GetFlowList() []*ActFlowInfo {
	if m != nil {
		return m.FlowList
	}
	return nil
}

func (m *ActInfo) GetActStyle() int64 {
	if m != nil && m.ActStyle != nil {
		return *m.ActStyle
	}
	return 0
}

func (m *ActInfo) GetPicUrl() []byte {
	if m != nil {
		return m.PicUrl
	}
	return nil
}

func (m *ActInfo) GetPicTimestamp() int64 {
	if m != nil && m.PicTimestamp != nil {
		return *m.PicTimestamp
	}
	return 0
}

func (m *ActInfo) GetShowflag() int64 {
	if m != nil && m.Showflag != nil {
		return *m.Showflag
	}
	return 0
}

func (m *ActInfo) GetTitleicon() []byte {
	if m != nil {
		return m.Titleicon
	}
	return nil
}

func (m *ActInfo) GetJumpurl() []byte {
	if m != nil {
		return m.Jumpurl
	}
	return nil
}

func (m *ActInfo) GetLimittype() []byte {
	if m != nil {
		return m.Limittype
	}
	return nil
}

func (m *ActInfo) GetLimitnum() []byte {
	if m != nil {
		return m.Limitnum
	}
	return nil
}

func (m *ActInfo) GetUsenum() []byte {
	if m != nil {
		return m.Usenum
	}
	return nil
}

func (m *ActInfo) GetLimitbusiness() []byte {
	if m != nil {
		return m.Limitbusiness
	}
	return nil
}

func (m *ActInfo) GetInfoId() int64 {
	if m != nil && m.InfoId != nil {
		return *m.InfoId
	}
	return 0
}

func (m *ActInfo) GetRealicon() uint32 {
	if m != nil && m.Realicon != nil {
		return *m.Realicon
	}
	return 0
}

func (m *ActInfo) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *ActInfo) GetExtendFields() [][]byte {
	if m != nil {
		return m.ExtendFields
	}
	return nil
}

func (m *ActInfo) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ActInfo) GetMd5Val() []byte {
	if m != nil {
		return m.Md5Val
	}
	return nil
}

func (m *ActInfo) GetDaojuchengId() []byte {
	if m != nil {
		return m.DaojuchengId
	}
	return nil
}

func (m *ActInfo) GetData() []*GPMPrimeGoodsInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ActInfo) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type ActFlowInfo struct {
	FlowId           *int64         `protobuf:"varint,1,opt,name=flow_id" json:"flow_id,omitempty"`
	CanGet           *int64         `protobuf:"varint,2,opt,name=can_get" json:"can_get,omitempty"`
	ConditionInfo    []*ActCondInfo `protobuf:"bytes,3,rep,name=condition_info" json:"condition_info,omitempty"`
	ShowType         *int64         `protobuf:"varint,4,opt,name=show_type" json:"show_type,omitempty"`
	Flowname         []byte         `protobuf:"bytes,5,opt,name=flowname" json:"flowname,omitempty"`
	Fromgoods        []*GoodsInfo   `protobuf:"bytes,6,rep,name=fromgoods" json:"fromgoods,omitempty"`
	Togoods          []*GoodsInfo   `protobuf:"bytes,7,rep,name=togoods" json:"togoods,omitempty"`
	IActionId        []byte         `protobuf:"bytes,8,opt,name=iActionId" json:"iActionId,omitempty"`
	IGoodsId         []byte         `protobuf:"bytes,9,opt,name=iGoodsId" json:"iGoodsId,omitempty"`
	CondiRsp         []*ActCondiRsp `protobuf:"bytes,10,rep,name=condiRsp" json:"condiRsp,omitempty"`
	Serial           []byte         `protobuf:"bytes,11,opt,name=Serial" json:"Serial,omitempty"`
	Polltype         *int32         `protobuf:"varint,12,opt,name=polltype" json:"polltype,omitempty"`
	PubCurVal        *int64         `protobuf:"varint,13,opt,name=pub_cur_val" json:"pub_cur_val,omitempty"`
	PubObjVal        *int64         `protobuf:"varint,14,opt,name=pub_obj_val" json:"pub_obj_val,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ActFlowInfo) Reset()                    { *m = ActFlowInfo{} }
func (m *ActFlowInfo) String() string            { return proto.CompactTextString(m) }
func (*ActFlowInfo) ProtoMessage()               {}
func (*ActFlowInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *ActFlowInfo) GetFlowId() int64 {
	if m != nil && m.FlowId != nil {
		return *m.FlowId
	}
	return 0
}

func (m *ActFlowInfo) GetCanGet() int64 {
	if m != nil && m.CanGet != nil {
		return *m.CanGet
	}
	return 0
}

func (m *ActFlowInfo) GetConditionInfo() []*ActCondInfo {
	if m != nil {
		return m.ConditionInfo
	}
	return nil
}

func (m *ActFlowInfo) GetShowType() int64 {
	if m != nil && m.ShowType != nil {
		return *m.ShowType
	}
	return 0
}

func (m *ActFlowInfo) GetFlowname() []byte {
	if m != nil {
		return m.Flowname
	}
	return nil
}

func (m *ActFlowInfo) GetFromgoods() []*GoodsInfo {
	if m != nil {
		return m.Fromgoods
	}
	return nil
}

func (m *ActFlowInfo) GetTogoods() []*GoodsInfo {
	if m != nil {
		return m.Togoods
	}
	return nil
}

func (m *ActFlowInfo) GetIActionId() []byte {
	if m != nil {
		return m.IActionId
	}
	return nil
}

func (m *ActFlowInfo) GetIGoodsId() []byte {
	if m != nil {
		return m.IGoodsId
	}
	return nil
}

func (m *ActFlowInfo) GetCondiRsp() []*ActCondiRsp {
	if m != nil {
		return m.CondiRsp
	}
	return nil
}

func (m *ActFlowInfo) GetSerial() []byte {
	if m != nil {
		return m.Serial
	}
	return nil
}

func (m *ActFlowInfo) GetPolltype() int32 {
	if m != nil && m.Polltype != nil {
		return *m.Polltype
	}
	return 0
}

func (m *ActFlowInfo) GetPubCurVal() int64 {
	if m != nil && m.PubCurVal != nil {
		return *m.PubCurVal
	}
	return 0
}

func (m *ActFlowInfo) GetPubObjVal() int64 {
	if m != nil && m.PubObjVal != nil {
		return *m.PubObjVal
	}
	return 0
}

type ActCondInfo struct {
	IsQualified      *bool  `protobuf:"varint,1,opt,name=is_qualified" json:"is_qualified,omitempty"`
	CurVal           *int64 `protobuf:"varint,2,opt,name=cur_val" json:"cur_val,omitempty"`
	ObjVal           *int64 `protobuf:"varint,3,opt,name=obj_val" json:"obj_val,omitempty"`
	UintName         []byte `protobuf:"bytes,4,opt,name=uint_name" json:"uint_name,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActCondInfo) Reset()                    { *m = ActCondInfo{} }
func (m *ActCondInfo) String() string            { return proto.CompactTextString(m) }
func (*ActCondInfo) ProtoMessage()               {}
func (*ActCondInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *ActCondInfo) GetIsQualified() bool {
	if m != nil && m.IsQualified != nil {
		return *m.IsQualified
	}
	return false
}

func (m *ActCondInfo) GetCurVal() int64 {
	if m != nil && m.CurVal != nil {
		return *m.CurVal
	}
	return 0
}

func (m *ActCondInfo) GetObjVal() int64 {
	if m != nil && m.ObjVal != nil {
		return *m.ObjVal
	}
	return 0
}

func (m *ActCondInfo) GetUintName() []byte {
	if m != nil {
		return m.UintName
	}
	return nil
}

type ClientLoginReq struct {
	OpenId           []byte       `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	Gid              []byte       `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	DeviceId         []byte       `protobuf:"bytes,3,opt,name=device_id" json:"device_id,omitempty"`
	DeviceType       *DEVICE_TYPE `protobuf:"varint,4,opt,name=device_type,enum=ams_act_con.DEVICE_TYPE" json:"device_type,omitempty"`
	Imei             []byte       `protobuf:"bytes,5,opt,name=imei" json:"imei,omitempty"`
	NetType          *NET_TYPE    `protobuf:"varint,6,opt,name=net_type,enum=ams_act_con.NET_TYPE" json:"net_type,omitempty"`
	Imsi             []byte       `protobuf:"bytes,7,opt,name=imsi" json:"imsi,omitempty"`
	ClientIp         []byte       `protobuf:"bytes,8,opt,name=client_ip" json:"client_ip,omitempty"`
	AppId            []byte       `protobuf:"bytes,9,opt,name=app_id" json:"app_id,omitempty"`
	AccessToken      []byte       `protobuf:"bytes,10,opt,name=access_token" json:"access_token,omitempty"`
	Acctype          []byte       `protobuf:"bytes,11,opt,name=acctype" json:"acctype,omitempty"`
	Uin              []byte       `protobuf:"bytes,12,opt,name=uin" json:"uin,omitempty"`
	Skey             []byte       `protobuf:"bytes,13,opt,name=skey" json:"skey,omitempty"`
	PUin             []byte       `protobuf:"bytes,14,opt,name=p_uin" json:"p_uin,omitempty"`
	PSkey            []byte       `protobuf:"bytes,15,opt,name=p_skey" json:"p_skey,omitempty"`
	Pt4Token         []byte       `protobuf:"bytes,16,opt,name=pt4_token" json:"pt4_token,omitempty"`
	IED_LOG_INFO2    []byte       `protobuf:"bytes,17,opt,name=IED_LOG_INFO2" json:"IED_LOG_INFO2,omitempty"`
	Sarea            []byte       `protobuf:"bytes,18,opt,name=sarea" json:"sarea,omitempty"`
	Splatid          []byte       `protobuf:"bytes,19,opt,name=splatid" json:"splatid,omitempty"`
	Spartition       []byte       `protobuf:"bytes,20,opt,name=spartition" json:"spartition,omitempty"`
	Sroleid          []byte       `protobuf:"bytes,21,opt,name=sroleid" json:"sroleid,omitempty"`
	Extend           []*KV        `protobuf:"bytes,22,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ClientLoginReq) Reset()                    { *m = ClientLoginReq{} }
func (m *ClientLoginReq) String() string            { return proto.CompactTextString(m) }
func (*ClientLoginReq) ProtoMessage()               {}
func (*ClientLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{14} }

func (m *ClientLoginReq) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *ClientLoginReq) GetGid() []byte {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *ClientLoginReq) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *ClientLoginReq) GetDeviceType() DEVICE_TYPE {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return DEVICE_TYPE_DEVICE_TYPE_UNKOWN
}

func (m *ClientLoginReq) GetImei() []byte {
	if m != nil {
		return m.Imei
	}
	return nil
}

func (m *ClientLoginReq) GetNetType() NET_TYPE {
	if m != nil && m.NetType != nil {
		return *m.NetType
	}
	return NET_TYPE_NETWORK_TYPE_WIFI
}

func (m *ClientLoginReq) GetImsi() []byte {
	if m != nil {
		return m.Imsi
	}
	return nil
}

func (m *ClientLoginReq) GetClientIp() []byte {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *ClientLoginReq) GetAppId() []byte {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *ClientLoginReq) GetAccessToken() []byte {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (m *ClientLoginReq) GetAcctype() []byte {
	if m != nil {
		return m.Acctype
	}
	return nil
}

func (m *ClientLoginReq) GetUin() []byte {
	if m != nil {
		return m.Uin
	}
	return nil
}

func (m *ClientLoginReq) GetSkey() []byte {
	if m != nil {
		return m.Skey
	}
	return nil
}

func (m *ClientLoginReq) GetPUin() []byte {
	if m != nil {
		return m.PUin
	}
	return nil
}

func (m *ClientLoginReq) GetPSkey() []byte {
	if m != nil {
		return m.PSkey
	}
	return nil
}

func (m *ClientLoginReq) GetPt4Token() []byte {
	if m != nil {
		return m.Pt4Token
	}
	return nil
}

func (m *ClientLoginReq) GetIED_LOG_INFO2() []byte {
	if m != nil {
		return m.IED_LOG_INFO2
	}
	return nil
}

func (m *ClientLoginReq) GetSarea() []byte {
	if m != nil {
		return m.Sarea
	}
	return nil
}

func (m *ClientLoginReq) GetSplatid() []byte {
	if m != nil {
		return m.Splatid
	}
	return nil
}

func (m *ClientLoginReq) GetSpartition() []byte {
	if m != nil {
		return m.Spartition
	}
	return nil
}

func (m *ClientLoginReq) GetSroleid() []byte {
	if m != nil {
		return m.Sroleid
	}
	return nil
}

func (m *ClientLoginReq) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type ClientHeartbeatReq struct {
	OpenId           []byte  `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	DeviceId         []byte  `protobuf:"bytes,2,opt,name=device_id" json:"device_id,omitempty"`
	Gid              *uint64 `protobuf:"varint,3,opt,name=gid" json:"gid,omitempty"`
	AppId            []byte  `protobuf:"bytes,4,opt,name=app_id" json:"app_id,omitempty"`
	Sarea            []byte  `protobuf:"bytes,5,opt,name=sarea" json:"sarea,omitempty"`
	Splatid          []byte  `protobuf:"bytes,6,opt,name=splatid" json:"splatid,omitempty"`
	Spartition       []byte  `protobuf:"bytes,7,opt,name=spartition" json:"spartition,omitempty"`
	Extend           []*KV   `protobuf:"bytes,8,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClientHeartbeatReq) Reset()                    { *m = ClientHeartbeatReq{} }
func (m *ClientHeartbeatReq) String() string            { return proto.CompactTextString(m) }
func (*ClientHeartbeatReq) ProtoMessage()               {}
func (*ClientHeartbeatReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{15} }

func (m *ClientHeartbeatReq) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *ClientHeartbeatReq) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *ClientHeartbeatReq) GetGid() uint64 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *ClientHeartbeatReq) GetAppId() []byte {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *ClientHeartbeatReq) GetSarea() []byte {
	if m != nil {
		return m.Sarea
	}
	return nil
}

func (m *ClientHeartbeatReq) GetSplatid() []byte {
	if m != nil {
		return m.Splatid
	}
	return nil
}

func (m *ClientHeartbeatReq) GetSpartition() []byte {
	if m != nil {
		return m.Spartition
	}
	return nil
}

func (m *ClientHeartbeatReq) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type ActStatus struct {
	InfoId           []byte `protobuf:"bytes,1,opt,name=info_id" json:"info_id,omitempty"`
	Md5Val           []byte `protobuf:"bytes,2,opt,name=md5_val" json:"md5_val,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActStatus) Reset()                    { *m = ActStatus{} }
func (m *ActStatus) String() string            { return proto.CompactTextString(m) }
func (*ActStatus) ProtoMessage()               {}
func (*ActStatus) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{16} }

func (m *ActStatus) GetInfoId() []byte {
	if m != nil {
		return m.InfoId
	}
	return nil
}

func (m *ActStatus) GetMd5Val() []byte {
	if m != nil {
		return m.Md5Val
	}
	return nil
}

type ClientGetActListReq struct {
	OpenId           []byte       `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	Gid              []byte       `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	DeviceId         []byte       `protobuf:"bytes,3,opt,name=device_id" json:"device_id,omitempty"`
	DeviceType       *DEVICE_TYPE `protobuf:"varint,4,opt,name=device_type,enum=ams_act_con.DEVICE_TYPE" json:"device_type,omitempty"`
	Imei             []byte       `protobuf:"bytes,5,opt,name=imei" json:"imei,omitempty"`
	NetType          *NET_TYPE    `protobuf:"varint,6,opt,name=net_type,enum=ams_act_con.NET_TYPE" json:"net_type,omitempty"`
	Imsi             []byte       `protobuf:"bytes,7,opt,name=imsi" json:"imsi,omitempty"`
	ClientIp         []byte       `protobuf:"bytes,8,opt,name=client_ip" json:"client_ip,omitempty"`
	AppId            []byte       `protobuf:"bytes,9,opt,name=app_id" json:"app_id,omitempty"`
	GTk              []byte       `protobuf:"bytes,10,opt,name=g_tk" json:"g_tk,omitempty"`
	Sarea            []byte       `protobuf:"bytes,11,opt,name=sarea" json:"sarea,omitempty"`
	Splatid          []byte       `protobuf:"bytes,12,opt,name=splatid" json:"splatid,omitempty"`
	Spartition       []byte       `protobuf:"bytes,13,opt,name=spartition" json:"spartition,omitempty"`
	Sroleid          []byte       `protobuf:"bytes,14,opt,name=sroleid" json:"sroleid,omitempty"`
	AccessToken      []byte       `protobuf:"bytes,15,opt,name=access_token" json:"access_token,omitempty"`
	Acctype          []byte       `protobuf:"bytes,16,opt,name=acctype" json:"acctype,omitempty"`
	Uin              []byte       `protobuf:"bytes,17,opt,name=uin" json:"uin,omitempty"`
	Skey             []byte       `protobuf:"bytes,18,opt,name=skey" json:"skey,omitempty"`
	PUin             []byte       `protobuf:"bytes,19,opt,name=p_uin" json:"p_uin,omitempty"`
	PSkey            []byte       `protobuf:"bytes,20,opt,name=p_skey" json:"p_skey,omitempty"`
	Pt4Token         []byte       `protobuf:"bytes,21,opt,name=pt4_token" json:"pt4_token,omitempty"`
	Md5Val           []byte       `protobuf:"bytes,22,opt,name=md5val" json:"md5val,omitempty"`
	TrigerType       *uint64      `protobuf:"varint,23,opt,name=triger_type" json:"triger_type,omitempty"`
	Gameappversion   []byte       `protobuf:"bytes,24,opt,name=gameappversion" json:"gameappversion,omitempty"`
	DescMd5          []*DescMd5   `protobuf:"bytes,25,rep,name=desc_md5" json:"desc_md5,omitempty"`
	Channelid        []int64      `protobuf:"varint,26,rep,name=channelid" json:"channelid,omitempty"`
	Infoid           []int64      `protobuf:"varint,27,rep,name=infoid" json:"infoid,omitempty"`
	SdkExtend        []byte       `protobuf:"bytes,28,opt,name=sdk_extend" json:"sdk_extend,omitempty"`
	ActStatus        []*ActStatus `protobuf:"bytes,29,rep,name=act_status" json:"act_status,omitempty"`
	Extend           []*KV        `protobuf:"bytes,30,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ClientGetActListReq) Reset()                    { *m = ClientGetActListReq{} }
func (m *ClientGetActListReq) String() string            { return proto.CompactTextString(m) }
func (*ClientGetActListReq) ProtoMessage()               {}
func (*ClientGetActListReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{17} }

func (m *ClientGetActListReq) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *ClientGetActListReq) GetGid() []byte {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *ClientGetActListReq) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *ClientGetActListReq) GetDeviceType() DEVICE_TYPE {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return DEVICE_TYPE_DEVICE_TYPE_UNKOWN
}

func (m *ClientGetActListReq) GetImei() []byte {
	if m != nil {
		return m.Imei
	}
	return nil
}

func (m *ClientGetActListReq) GetNetType() NET_TYPE {
	if m != nil && m.NetType != nil {
		return *m.NetType
	}
	return NET_TYPE_NETWORK_TYPE_WIFI
}

func (m *ClientGetActListReq) GetImsi() []byte {
	if m != nil {
		return m.Imsi
	}
	return nil
}

func (m *ClientGetActListReq) GetClientIp() []byte {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *ClientGetActListReq) GetAppId() []byte {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *ClientGetActListReq) GetGTk() []byte {
	if m != nil {
		return m.GTk
	}
	return nil
}

func (m *ClientGetActListReq) GetSarea() []byte {
	if m != nil {
		return m.Sarea
	}
	return nil
}

func (m *ClientGetActListReq) GetSplatid() []byte {
	if m != nil {
		return m.Splatid
	}
	return nil
}

func (m *ClientGetActListReq) GetSpartition() []byte {
	if m != nil {
		return m.Spartition
	}
	return nil
}

func (m *ClientGetActListReq) GetSroleid() []byte {
	if m != nil {
		return m.Sroleid
	}
	return nil
}

func (m *ClientGetActListReq) GetAccessToken() []byte {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (m *ClientGetActListReq) GetAcctype() []byte {
	if m != nil {
		return m.Acctype
	}
	return nil
}

func (m *ClientGetActListReq) GetUin() []byte {
	if m != nil {
		return m.Uin
	}
	return nil
}

func (m *ClientGetActListReq) GetSkey() []byte {
	if m != nil {
		return m.Skey
	}
	return nil
}

func (m *ClientGetActListReq) GetPUin() []byte {
	if m != nil {
		return m.PUin
	}
	return nil
}

func (m *ClientGetActListReq) GetPSkey() []byte {
	if m != nil {
		return m.PSkey
	}
	return nil
}

func (m *ClientGetActListReq) GetPt4Token() []byte {
	if m != nil {
		return m.Pt4Token
	}
	return nil
}

func (m *ClientGetActListReq) GetMd5Val() []byte {
	if m != nil {
		return m.Md5Val
	}
	return nil
}

func (m *ClientGetActListReq) GetTrigerType() uint64 {
	if m != nil && m.TrigerType != nil {
		return *m.TrigerType
	}
	return 0
}

func (m *ClientGetActListReq) GetGameappversion() []byte {
	if m != nil {
		return m.Gameappversion
	}
	return nil
}

func (m *ClientGetActListReq) GetDescMd5() []*DescMd5 {
	if m != nil {
		return m.DescMd5
	}
	return nil
}

func (m *ClientGetActListReq) GetChannelid() []int64 {
	if m != nil {
		return m.Channelid
	}
	return nil
}

func (m *ClientGetActListReq) GetInfoid() []int64 {
	if m != nil {
		return m.Infoid
	}
	return nil
}

func (m *ClientGetActListReq) GetSdkExtend() []byte {
	if m != nil {
		return m.SdkExtend
	}
	return nil
}

func (m *ClientGetActListReq) GetActStatus() []*ActStatus {
	if m != nil {
		return m.ActStatus
	}
	return nil
}

func (m *ClientGetActListReq) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type DescMd5 struct {
	InfoId           []byte `protobuf:"bytes,1,opt,name=info_id" json:"info_id,omitempty"`
	DescMd5          []byte `protobuf:"bytes,2,opt,name=desc_md5" json:"desc_md5,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DescMd5) Reset()                    { *m = DescMd5{} }
func (m *DescMd5) String() string            { return proto.CompactTextString(m) }
func (*DescMd5) ProtoMessage()               {}
func (*DescMd5) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{18} }

func (m *DescMd5) GetInfoId() []byte {
	if m != nil {
		return m.InfoId
	}
	return nil
}

func (m *DescMd5) GetDescMd5() []byte {
	if m != nil {
		return m.DescMd5
	}
	return nil
}

type ClientAttendActReq struct {
	AmeVersion         []byte `protobuf:"bytes,1,opt,name=ameVersion" json:"ameVersion,omitempty"`
	SServiceType       []byte `protobuf:"bytes,2,opt,name=sServiceType" json:"sServiceType,omitempty"`
	IActivityId        *int64 `protobuf:"varint,3,opt,name=iActivityId" json:"iActivityId,omitempty"`
	SServiceDepartment []byte `protobuf:"bytes,4,opt,name=sServiceDepartment" json:"sServiceDepartment,omitempty"`
	Appid              []byte `protobuf:"bytes,5,opt,name=appid" json:"appid,omitempty"`
	Openid             []byte `protobuf:"bytes,6,opt,name=openid" json:"openid,omitempty"`
	AccessToken        []byte `protobuf:"bytes,7,opt,name=access_token" json:"access_token,omitempty"`
	Acctype            []byte `protobuf:"bytes,8,opt,name=acctype" json:"acctype,omitempty"`
	Uin                []byte `protobuf:"bytes,9,opt,name=uin" json:"uin,omitempty"`
	Skey               []byte `protobuf:"bytes,10,opt,name=skey" json:"skey,omitempty"`
	PUin               []byte `protobuf:"bytes,11,opt,name=p_uin" json:"p_uin,omitempty"`
	PSkey              []byte `protobuf:"bytes,12,opt,name=p_skey" json:"p_skey,omitempty"`
	Pt4Token           []byte `protobuf:"bytes,13,opt,name=pt4_token" json:"pt4_token,omitempty"`
	IED_LOG_INFO2      []byte `protobuf:"bytes,14,opt,name=IED_LOG_INFO2" json:"IED_LOG_INFO2,omitempty"`
	IFlowId            *int64 `protobuf:"varint,15,opt,name=iFlowId" json:"iFlowId,omitempty"`
	GTk                []byte `protobuf:"bytes,16,opt,name=g_tk" json:"g_tk,omitempty"`
	SArea              []byte `protobuf:"bytes,17,opt,name=sArea" json:"sArea,omitempty"`
	SPlatId            []byte `protobuf:"bytes,18,opt,name=sPlatId" json:"sPlatId,omitempty"`
	SPartition         []byte `protobuf:"bytes,19,opt,name=sPartition" json:"sPartition,omitempty"`
	SRoleId            []byte `protobuf:"bytes,20,opt,name=sRoleId" json:"sRoleId,omitempty"`
	PayZone            []byte `protobuf:"bytes,21,opt,name=pay_zone" json:"pay_zone,omitempty"`
	PayToken           []byte `protobuf:"bytes,22,opt,name=pay_token" json:"pay_token,omitempty"`
	Gameappversion     []byte `protobuf:"bytes,23,opt,name=gameappversion" json:"gameappversion,omitempty"`
	SCDkey             []byte `protobuf:"bytes,24,opt,name=sCDkey" json:"sCDkey,omitempty"`
	SVerifyCode        []byte `protobuf:"bytes,25,opt,name=sVerifyCode" json:"sVerifyCode,omitempty"`
	SUserIP            []byte `protobuf:"bytes,26,opt,name=sUserIP" json:"sUserIP,omitempty"`
	ActStyle           *int64 `protobuf:"varint,27,opt,name=act_style" json:"act_style,omitempty"`
	PayLotterySerial   []byte `protobuf:"bytes,28,opt,name=pay_lottery_serial" json:"pay_lottery_serial,omitempty"`
	Extend             []*KV  `protobuf:"bytes,29,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *ClientAttendActReq) Reset()                    { *m = ClientAttendActReq{} }
func (m *ClientAttendActReq) String() string            { return proto.CompactTextString(m) }
func (*ClientAttendActReq) ProtoMessage()               {}
func (*ClientAttendActReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{19} }

func (m *ClientAttendActReq) GetAmeVersion() []byte {
	if m != nil {
		return m.AmeVersion
	}
	return nil
}

func (m *ClientAttendActReq) GetSServiceType() []byte {
	if m != nil {
		return m.SServiceType
	}
	return nil
}

func (m *ClientAttendActReq) GetIActivityId() int64 {
	if m != nil && m.IActivityId != nil {
		return *m.IActivityId
	}
	return 0
}

func (m *ClientAttendActReq) GetSServiceDepartment() []byte {
	if m != nil {
		return m.SServiceDepartment
	}
	return nil
}

func (m *ClientAttendActReq) GetAppid() []byte {
	if m != nil {
		return m.Appid
	}
	return nil
}

func (m *ClientAttendActReq) GetOpenid() []byte {
	if m != nil {
		return m.Openid
	}
	return nil
}

func (m *ClientAttendActReq) GetAccessToken() []byte {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (m *ClientAttendActReq) GetAcctype() []byte {
	if m != nil {
		return m.Acctype
	}
	return nil
}

func (m *ClientAttendActReq) GetUin() []byte {
	if m != nil {
		return m.Uin
	}
	return nil
}

func (m *ClientAttendActReq) GetSkey() []byte {
	if m != nil {
		return m.Skey
	}
	return nil
}

func (m *ClientAttendActReq) GetPUin() []byte {
	if m != nil {
		return m.PUin
	}
	return nil
}

func (m *ClientAttendActReq) GetPSkey() []byte {
	if m != nil {
		return m.PSkey
	}
	return nil
}

func (m *ClientAttendActReq) GetPt4Token() []byte {
	if m != nil {
		return m.Pt4Token
	}
	return nil
}

func (m *ClientAttendActReq) GetIED_LOG_INFO2() []byte {
	if m != nil {
		return m.IED_LOG_INFO2
	}
	return nil
}

func (m *ClientAttendActReq) GetIFlowId() int64 {
	if m != nil && m.IFlowId != nil {
		return *m.IFlowId
	}
	return 0
}

func (m *ClientAttendActReq) GetGTk() []byte {
	if m != nil {
		return m.GTk
	}
	return nil
}

func (m *ClientAttendActReq) GetSArea() []byte {
	if m != nil {
		return m.SArea
	}
	return nil
}

func (m *ClientAttendActReq) GetSPlatId() []byte {
	if m != nil {
		return m.SPlatId
	}
	return nil
}

func (m *ClientAttendActReq) GetSPartition() []byte {
	if m != nil {
		return m.SPartition
	}
	return nil
}

func (m *ClientAttendActReq) GetSRoleId() []byte {
	if m != nil {
		return m.SRoleId
	}
	return nil
}

func (m *ClientAttendActReq) GetPayZone() []byte {
	if m != nil {
		return m.PayZone
	}
	return nil
}

func (m *ClientAttendActReq) GetPayToken() []byte {
	if m != nil {
		return m.PayToken
	}
	return nil
}

func (m *ClientAttendActReq) GetGameappversion() []byte {
	if m != nil {
		return m.Gameappversion
	}
	return nil
}

func (m *ClientAttendActReq) GetSCDkey() []byte {
	if m != nil {
		return m.SCDkey
	}
	return nil
}

func (m *ClientAttendActReq) GetSVerifyCode() []byte {
	if m != nil {
		return m.SVerifyCode
	}
	return nil
}

func (m *ClientAttendActReq) GetSUserIP() []byte {
	if m != nil {
		return m.SUserIP
	}
	return nil
}

func (m *ClientAttendActReq) GetActStyle() int64 {
	if m != nil && m.ActStyle != nil {
		return *m.ActStyle
	}
	return 0
}

func (m *ClientAttendActReq) GetPayLotterySerial() []byte {
	if m != nil {
		return m.PayLotterySerial
	}
	return nil
}

func (m *ClientAttendActReq) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type ActivityInformReq struct {
	StrBiz           []byte `protobuf:"bytes,1,opt,name=str_biz" json:"str_biz,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActivityInformReq) Reset()                    { *m = ActivityInformReq{} }
func (m *ActivityInformReq) String() string            { return proto.CompactTextString(m) }
func (*ActivityInformReq) ProtoMessage()               {}
func (*ActivityInformReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{20} }

func (m *ActivityInformReq) GetStrBiz() []byte {
	if m != nil {
		return m.StrBiz
	}
	return nil
}

type ClientAttendActRsp struct {
	FlowRetIRet                  *int64       `protobuf:"varint,1,opt,name=flowRet_iRet" json:"flowRet_iRet,omitempty"`
	FlowRetSMsg                  []byte       `protobuf:"bytes,2,opt,name=flowRet_sMsg" json:"flowRet_sMsg,omitempty"`
	FlowRetIAlertSerial          *int64       `protobuf:"varint,3,opt,name=flowRet_iAlertSerial" json:"flowRet_iAlertSerial,omitempty"`
	FlowRetSLogSerialNum         []byte       `protobuf:"bytes,4,opt,name=flowRet_sLogSerialNum" json:"flowRet_sLogSerialNum,omitempty"`
	ModRetBHasSendFailItem       *int64       `protobuf:"varint,5,opt,name=modRet_bHasSendFailItem" json:"modRet_bHasSendFailItem,omitempty"`
	ModRetIRet                   *int64       `protobuf:"varint,6,opt,name=modRet_iRet" json:"modRet_iRet,omitempty"`
	ModRetSMsg                   []byte       `protobuf:"bytes,7,opt,name=modRet_sMsg" json:"modRet_sMsg,omitempty"`
	ModRetIActivityId            *int64       `protobuf:"varint,8,opt,name=modRet_iActivityId" json:"modRet_iActivityId,omitempty"`
	ModRetIPackageGroupId        *int64       `protobuf:"varint,9,opt,name=modRet_iPackageGroupId" json:"modRet_iPackageGroupId,omitempty"`
	ModRetIPackageId             *int64       `protobuf:"varint,10,opt,name=modRet_iPackageId" json:"modRet_iPackageId,omitempty"`
	ModRetIPackageIdCnt          *int64       `protobuf:"varint,11,opt,name=modRet_iPackageIdCnt" json:"modRet_iPackageIdCnt,omitempty"`
	ModRetSPackageName           []byte       `protobuf:"bytes,12,opt,name=modRet_sPackageName" json:"modRet_sPackageName,omitempty"`
	ModRetIPackageNum            *int64       `protobuf:"varint,13,opt,name=modRet_iPackageNum" json:"modRet_iPackageNum,omitempty"`
	ModRetSPackageRealFlag       []byte       `protobuf:"bytes,14,opt,name=modRet_sPackageRealFlag" json:"modRet_sPackageRealFlag,omitempty"`
	ModRetSPackageCDkey          []byte       `protobuf:"bytes,15,opt,name=modRet_sPackageCDkey" json:"modRet_sPackageCDkey,omitempty"`
	ModRetDTimeNow               []byte       `protobuf:"bytes,16,opt,name=modRet_dTimeNow" json:"modRet_dTimeNow,omitempty"`
	ModRetSPackageLimitCheckCode []byte       `protobuf:"bytes,17,opt,name=modRet_sPackageLimitCheckCode" json:"modRet_sPackageLimitCheckCode,omitempty"`
	Ret                          *int64       `protobuf:"varint,18,opt,name=ret" json:"ret,omitempty"`
	Msg                          []byte       `protobuf:"bytes,19,opt,name=msg" json:"msg,omitempty"`
	GetGoods                     []*GoodsInfo `protobuf:"bytes,20,rep,name=get_goods" json:"get_goods,omitempty"`
	ExchangeGoods                []*GoodsInfo `protobuf:"bytes,21,rep,name=exchange_goods" json:"exchange_goods,omitempty"`
	Extend                       []*KV        `protobuf:"bytes,22,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized             []byte       `json:"-"`
}

func (m *ClientAttendActRsp) Reset()                    { *m = ClientAttendActRsp{} }
func (m *ClientAttendActRsp) String() string            { return proto.CompactTextString(m) }
func (*ClientAttendActRsp) ProtoMessage()               {}
func (*ClientAttendActRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{21} }

func (m *ClientAttendActRsp) GetFlowRetIRet() int64 {
	if m != nil && m.FlowRetIRet != nil {
		return *m.FlowRetIRet
	}
	return 0
}

func (m *ClientAttendActRsp) GetFlowRetSMsg() []byte {
	if m != nil {
		return m.FlowRetSMsg
	}
	return nil
}

func (m *ClientAttendActRsp) GetFlowRetIAlertSerial() int64 {
	if m != nil && m.FlowRetIAlertSerial != nil {
		return *m.FlowRetIAlertSerial
	}
	return 0
}

func (m *ClientAttendActRsp) GetFlowRetSLogSerialNum() []byte {
	if m != nil {
		return m.FlowRetSLogSerialNum
	}
	return nil
}

func (m *ClientAttendActRsp) GetModRetBHasSendFailItem() int64 {
	if m != nil && m.ModRetBHasSendFailItem != nil {
		return *m.ModRetBHasSendFailItem
	}
	return 0
}

func (m *ClientAttendActRsp) GetModRetIRet() int64 {
	if m != nil && m.ModRetIRet != nil {
		return *m.ModRetIRet
	}
	return 0
}

func (m *ClientAttendActRsp) GetModRetSMsg() []byte {
	if m != nil {
		return m.ModRetSMsg
	}
	return nil
}

func (m *ClientAttendActRsp) GetModRetIActivityId() int64 {
	if m != nil && m.ModRetIActivityId != nil {
		return *m.ModRetIActivityId
	}
	return 0
}

func (m *ClientAttendActRsp) GetModRetIPackageGroupId() int64 {
	if m != nil && m.ModRetIPackageGroupId != nil {
		return *m.ModRetIPackageGroupId
	}
	return 0
}

func (m *ClientAttendActRsp) GetModRetIPackageId() int64 {
	if m != nil && m.ModRetIPackageId != nil {
		return *m.ModRetIPackageId
	}
	return 0
}

func (m *ClientAttendActRsp) GetModRetIPackageIdCnt() int64 {
	if m != nil && m.ModRetIPackageIdCnt != nil {
		return *m.ModRetIPackageIdCnt
	}
	return 0
}

func (m *ClientAttendActRsp) GetModRetSPackageName() []byte {
	if m != nil {
		return m.ModRetSPackageName
	}
	return nil
}

func (m *ClientAttendActRsp) GetModRetIPackageNum() int64 {
	if m != nil && m.ModRetIPackageNum != nil {
		return *m.ModRetIPackageNum
	}
	return 0
}

func (m *ClientAttendActRsp) GetModRetSPackageRealFlag() []byte {
	if m != nil {
		return m.ModRetSPackageRealFlag
	}
	return nil
}

func (m *ClientAttendActRsp) GetModRetSPackageCDkey() []byte {
	if m != nil {
		return m.ModRetSPackageCDkey
	}
	return nil
}

func (m *ClientAttendActRsp) GetModRetDTimeNow() []byte {
	if m != nil {
		return m.ModRetDTimeNow
	}
	return nil
}

func (m *ClientAttendActRsp) GetModRetSPackageLimitCheckCode() []byte {
	if m != nil {
		return m.ModRetSPackageLimitCheckCode
	}
	return nil
}

func (m *ClientAttendActRsp) GetRet() int64 {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return 0
}

func (m *ClientAttendActRsp) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ClientAttendActRsp) GetGetGoods() []*GoodsInfo {
	if m != nil {
		return m.GetGoods
	}
	return nil
}

func (m *ClientAttendActRsp) GetExchangeGoods() []*GoodsInfo {
	if m != nil {
		return m.ExchangeGoods
	}
	return nil
}

func (m *ClientAttendActRsp) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type IDIPCMDReq struct {
	Serial           *int32 `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	Req              []byte `protobuf:"bytes,2,opt,name=req" json:"req,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IDIPCMDReq) Reset()                    { *m = IDIPCMDReq{} }
func (m *IDIPCMDReq) String() string            { return proto.CompactTextString(m) }
func (*IDIPCMDReq) ProtoMessage()               {}
func (*IDIPCMDReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{22} }

func (m *IDIPCMDReq) GetSerial() int32 {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return 0
}

func (m *IDIPCMDReq) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

type IDIPBatchReq struct {
	ReqNum           *int32        `protobuf:"varint,1,opt,name=req_num" json:"req_num,omitempty"`
	Reqs             []*IDIPCMDReq `protobuf:"bytes,2,rep,name=reqs" json:"reqs,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *IDIPBatchReq) Reset()                    { *m = IDIPBatchReq{} }
func (m *IDIPBatchReq) String() string            { return proto.CompactTextString(m) }
func (*IDIPBatchReq) ProtoMessage()               {}
func (*IDIPBatchReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{23} }

func (m *IDIPBatchReq) GetReqNum() int32 {
	if m != nil && m.ReqNum != nil {
		return *m.ReqNum
	}
	return 0
}

func (m *IDIPBatchReq) GetReqs() []*IDIPCMDReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type IDIPCMDRsp struct {
	Serial           *int32 `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	Rsp              []byte `protobuf:"bytes,2,opt,name=rsp" json:"rsp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IDIPCMDRsp) Reset()                    { *m = IDIPCMDRsp{} }
func (m *IDIPCMDRsp) String() string            { return proto.CompactTextString(m) }
func (*IDIPCMDRsp) ProtoMessage()               {}
func (*IDIPCMDRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{24} }

func (m *IDIPCMDRsp) GetSerial() int32 {
	if m != nil && m.Serial != nil {
		return *m.Serial
	}
	return 0
}

func (m *IDIPCMDRsp) GetRsp() []byte {
	if m != nil {
		return m.Rsp
	}
	return nil
}

type IDIPBatchRsp struct {
	RspNum           *int32        `protobuf:"varint,1,opt,name=rsp_num" json:"rsp_num,omitempty"`
	Rsps             []*IDIPCMDRsp `protobuf:"bytes,2,rep,name=rsps" json:"rsps,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *IDIPBatchRsp) Reset()                    { *m = IDIPBatchRsp{} }
func (m *IDIPBatchRsp) String() string            { return proto.CompactTextString(m) }
func (*IDIPBatchRsp) ProtoMessage()               {}
func (*IDIPBatchRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{25} }

func (m *IDIPBatchRsp) GetRspNum() int32 {
	if m != nil && m.RspNum != nil {
		return *m.RspNum
	}
	return 0
}

func (m *IDIPBatchRsp) GetRsps() []*IDIPCMDRsp {
	if m != nil {
		return m.Rsps
	}
	return nil
}

type KickoutReq struct {
	OpenId           []byte `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	Sarea            []byte `protobuf:"bytes,2,opt,name=sarea" json:"sarea,omitempty"`
	Splatid          []byte `protobuf:"bytes,3,opt,name=splatid" json:"splatid,omitempty"`
	Spartition       []byte `protobuf:"bytes,4,opt,name=spartition" json:"spartition,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *KickoutReq) Reset()                    { *m = KickoutReq{} }
func (m *KickoutReq) String() string            { return proto.CompactTextString(m) }
func (*KickoutReq) ProtoMessage()               {}
func (*KickoutReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{26} }

func (m *KickoutReq) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *KickoutReq) GetSarea() []byte {
	if m != nil {
		return m.Sarea
	}
	return nil
}

func (m *KickoutReq) GetSplatid() []byte {
	if m != nil {
		return m.Splatid
	}
	return nil
}

func (m *KickoutReq) GetSpartition() []byte {
	if m != nil {
		return m.Spartition
	}
	return nil
}

type ClientKickoutReq struct {
	OpenId           []byte `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	Sarea            []byte `protobuf:"bytes,2,opt,name=sarea" json:"sarea,omitempty"`
	Splatid          []byte `protobuf:"bytes,3,opt,name=splatid" json:"splatid,omitempty"`
	Spartition       []byte `protobuf:"bytes,4,opt,name=spartition" json:"spartition,omitempty"`
	Extend           []*KV  `protobuf:"bytes,5,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClientKickoutReq) Reset()                    { *m = ClientKickoutReq{} }
func (m *ClientKickoutReq) String() string            { return proto.CompactTextString(m) }
func (*ClientKickoutReq) ProtoMessage()               {}
func (*ClientKickoutReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{27} }

func (m *ClientKickoutReq) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *ClientKickoutReq) GetSarea() []byte {
	if m != nil {
		return m.Sarea
	}
	return nil
}

func (m *ClientKickoutReq) GetSplatid() []byte {
	if m != nil {
		return m.Splatid
	}
	return nil
}

func (m *ClientKickoutReq) GetSpartition() []byte {
	if m != nil {
		return m.Spartition
	}
	return nil
}

func (m *ClientKickoutReq) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type PeerPushOnlineMsgReq struct {
	OpenId           []byte `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PeerPushOnlineMsgReq) Reset()                    { *m = PeerPushOnlineMsgReq{} }
func (m *PeerPushOnlineMsgReq) String() string            { return proto.CompactTextString(m) }
func (*PeerPushOnlineMsgReq) ProtoMessage()               {}
func (*PeerPushOnlineMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{28} }

func (m *PeerPushOnlineMsgReq) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

type ReadTcaplusReq struct {
	OpenId           []byte  `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	Fields           []int32 `protobuf:"varint,2,rep,name=fields" json:"fields,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadTcaplusReq) Reset()                    { *m = ReadTcaplusReq{} }
func (m *ReadTcaplusReq) String() string            { return proto.CompactTextString(m) }
func (*ReadTcaplusReq) ProtoMessage()               {}
func (*ReadTcaplusReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{29} }

func (m *ReadTcaplusReq) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *ReadTcaplusReq) GetFields() []int32 {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadTcaplusRsp struct {
	OpenId           []byte   `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	Fields           []int32  `protobuf:"varint,2,rep,name=fields" json:"fields,omitempty"`
	FieldsValue      [][]byte `protobuf:"bytes,3,rep,name=fields_value" json:"fields_value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ReadTcaplusRsp) Reset()                    { *m = ReadTcaplusRsp{} }
func (m *ReadTcaplusRsp) String() string            { return proto.CompactTextString(m) }
func (*ReadTcaplusRsp) ProtoMessage()               {}
func (*ReadTcaplusRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{30} }

func (m *ReadTcaplusRsp) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *ReadTcaplusRsp) GetFields() []int32 {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ReadTcaplusRsp) GetFieldsValue() [][]byte {
	if m != nil {
		return m.FieldsValue
	}
	return nil
}

type WriteTcaplusReq struct {
	OpenId           []byte   `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	Fields           []int32  `protobuf:"varint,2,rep,name=fields" json:"fields,omitempty"`
	FieldsValue      [][]byte `protobuf:"bytes,3,rep,name=fields_value" json:"fields_value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *WriteTcaplusReq) Reset()                    { *m = WriteTcaplusReq{} }
func (m *WriteTcaplusReq) String() string            { return proto.CompactTextString(m) }
func (*WriteTcaplusReq) ProtoMessage()               {}
func (*WriteTcaplusReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{31} }

func (m *WriteTcaplusReq) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *WriteTcaplusReq) GetFields() []int32 {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *WriteTcaplusReq) GetFieldsValue() [][]byte {
	if m != nil {
		return m.FieldsValue
	}
	return nil
}

type Report struct {
	UintTimestamp    *uint64 `protobuf:"varint,1,opt,name=uint_timestamp" json:"uint_timestamp,omitempty"`
	UintClientip     *uint64 `protobuf:"varint,2,opt,name=uint_clientip" json:"uint_clientip,omitempty"`
	StrOpenId        []byte  `protobuf:"bytes,3,opt,name=str_open_id" json:"str_open_id,omitempty"`
	StrPhoneid       []byte  `protobuf:"bytes,4,opt,name=str_phoneid" json:"str_phoneid,omitempty"`
	UintModule       *uint64 `protobuf:"varint,5,opt,name=uint_module" json:"uint_module,omitempty"`
	UintChannelId    *uint64 `protobuf:"varint,6,opt,name=uint_channel_id" json:"uint_channel_id,omitempty"`
	UintType         *uint64 `protobuf:"varint,7,opt,name=uint_type" json:"uint_type,omitempty"`
	StrAppid         []byte  `protobuf:"bytes,8,opt,name=str_appid" json:"str_appid,omitempty"`
	StrSdkversion    []byte  `protobuf:"bytes,9,opt,name=str_sdkversion" json:"str_sdkversion,omitempty"`
	UintOstype       *uint64 `protobuf:"varint,10,opt,name=uint_ostype" json:"uint_ostype,omitempty"`
	UintActId        *uint64 `protobuf:"varint,11,opt,name=uint_act_id" json:"uint_act_id,omitempty"`
	UintJumpType     *uint64 `protobuf:"varint,12,opt,name=uint_jump_type" json:"uint_jump_type,omitempty"`
	StrJumpUrl       []byte  `protobuf:"bytes,13,opt,name=str_jump_url" json:"str_jump_url,omitempty"`
	UintCmd          *uint64 `protobuf:"varint,14,opt,name=uint_cmd" json:"uint_cmd,omitempty"`
	Partition        []byte  `protobuf:"bytes,15,opt,name=partition" json:"partition,omitempty"`
	RecommendId      []byte  `protobuf:"bytes,16,opt,name=recommend_id" json:"recommend_id,omitempty"`
	ChangjingId      []byte  `protobuf:"bytes,17,opt,name=changjing_id" json:"changjing_id,omitempty"`
	GoodsId          []byte  `protobuf:"bytes,18,opt,name=goods_id" json:"goods_id,omitempty"`
	UintCount        *uint64 `protobuf:"varint,19,opt,name=uint_count" json:"uint_count,omitempty"`
	UintFee          *uint64 `protobuf:"varint,20,opt,name=uint_fee" json:"uint_fee,omitempty"`
	CurrencyType     []byte  `protobuf:"bytes,21,opt,name=currency_type" json:"currency_type,omitempty"`
	Sroleid          []byte  `protobuf:"bytes,22,opt,name=sroleid" json:"sroleid,omitempty"`
	ActStyle         *int64  `protobuf:"varint,23,opt,name=act_style" json:"act_style,omitempty"`
	FlowId           *int64  `protobuf:"varint,24,opt,name=flow_id" json:"flow_id,omitempty"`
	Extend           []*KV   `protobuf:"bytes,25,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Report) Reset()                    { *m = Report{} }
func (m *Report) String() string            { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()               {}
func (*Report) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{32} }

func (m *Report) GetUintTimestamp() uint64 {
	if m != nil && m.UintTimestamp != nil {
		return *m.UintTimestamp
	}
	return 0
}

func (m *Report) GetUintClientip() uint64 {
	if m != nil && m.UintClientip != nil {
		return *m.UintClientip
	}
	return 0
}

func (m *Report) GetStrOpenId() []byte {
	if m != nil {
		return m.StrOpenId
	}
	return nil
}

func (m *Report) GetStrPhoneid() []byte {
	if m != nil {
		return m.StrPhoneid
	}
	return nil
}

func (m *Report) GetUintModule() uint64 {
	if m != nil && m.UintModule != nil {
		return *m.UintModule
	}
	return 0
}

func (m *Report) GetUintChannelId() uint64 {
	if m != nil && m.UintChannelId != nil {
		return *m.UintChannelId
	}
	return 0
}

func (m *Report) GetUintType() uint64 {
	if m != nil && m.UintType != nil {
		return *m.UintType
	}
	return 0
}

func (m *Report) GetStrAppid() []byte {
	if m != nil {
		return m.StrAppid
	}
	return nil
}

func (m *Report) GetStrSdkversion() []byte {
	if m != nil {
		return m.StrSdkversion
	}
	return nil
}

func (m *Report) GetUintOstype() uint64 {
	if m != nil && m.UintOstype != nil {
		return *m.UintOstype
	}
	return 0
}

func (m *Report) GetUintActId() uint64 {
	if m != nil && m.UintActId != nil {
		return *m.UintActId
	}
	return 0
}

func (m *Report) GetUintJumpType() uint64 {
	if m != nil && m.UintJumpType != nil {
		return *m.UintJumpType
	}
	return 0
}

func (m *Report) GetStrJumpUrl() []byte {
	if m != nil {
		return m.StrJumpUrl
	}
	return nil
}

func (m *Report) GetUintCmd() uint64 {
	if m != nil && m.UintCmd != nil {
		return *m.UintCmd
	}
	return 0
}

func (m *Report) GetPartition() []byte {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *Report) GetRecommendId() []byte {
	if m != nil {
		return m.RecommendId
	}
	return nil
}

func (m *Report) GetChangjingId() []byte {
	if m != nil {
		return m.ChangjingId
	}
	return nil
}

func (m *Report) GetGoodsId() []byte {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *Report) GetUintCount() uint64 {
	if m != nil && m.UintCount != nil {
		return *m.UintCount
	}
	return 0
}

func (m *Report) GetUintFee() uint64 {
	if m != nil && m.UintFee != nil {
		return *m.UintFee
	}
	return 0
}

func (m *Report) GetCurrencyType() []byte {
	if m != nil {
		return m.CurrencyType
	}
	return nil
}

func (m *Report) GetSroleid() []byte {
	if m != nil {
		return m.Sroleid
	}
	return nil
}

func (m *Report) GetActStyle() int64 {
	if m != nil && m.ActStyle != nil {
		return *m.ActStyle
	}
	return 0
}

func (m *Report) GetFlowId() int64 {
	if m != nil && m.FlowId != nil {
		return *m.FlowId
	}
	return 0
}

func (m *Report) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type Reportack struct {
	UintResult       *uint64 `protobuf:"varint,1,opt,name=uint_result" json:"uint_result,omitempty"`
	StrErrmsg        []byte  `protobuf:"bytes,2,opt,name=str_errmsg" json:"str_errmsg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Reportack) Reset()                    { *m = Reportack{} }
func (m *Reportack) String() string            { return proto.CompactTextString(m) }
func (*Reportack) ProtoMessage()               {}
func (*Reportack) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{33} }

func (m *Reportack) GetUintResult() uint64 {
	if m != nil && m.UintResult != nil {
		return *m.UintResult
	}
	return 0
}

func (m *Reportack) GetStrErrmsg() []byte {
	if m != nil {
		return m.StrErrmsg
	}
	return nil
}

type SDKLogReport struct {
	UintLogLevel     *uint64 `protobuf:"varint,1,opt,name=uint_log_level" json:"uint_log_level,omitempty"`
	StrSdkVersion    []byte  `protobuf:"bytes,2,opt,name=str_sdk_version" json:"str_sdk_version,omitempty"`
	StrHardwareOs    []byte  `protobuf:"bytes,3,opt,name=str_hardware_os" json:"str_hardware_os,omitempty"`
	StrOpenid        []byte  `protobuf:"bytes,4,opt,name=str_openid" json:"str_openid,omitempty"`
	StrUserip        []byte  `protobuf:"bytes,5,opt,name=str_userip" json:"str_userip,omitempty"`
	UintReportType   *uint64 `protobuf:"varint,6,opt,name=uint_report_type" json:"uint_report_type,omitempty"`
	UintToreturncode *uint64 `protobuf:"varint,7,opt,name=uint_toreturncode" json:"uint_toreturncode,omitempty"`
	StrRespara       []byte  `protobuf:"bytes,8,opt,name=str_respara" json:"str_respara,omitempty"`
	UintSerialtime   *uint64 `protobuf:"varint,9,opt,name=uint_serialtime" json:"uint_serialtime,omitempty"`
	UintCmd          *uint64 `protobuf:"varint,10,opt,name=uint_cmd" json:"uint_cmd,omitempty"`
	Sarea            []byte  `protobuf:"bytes,11,opt,name=sarea" json:"sarea,omitempty"`
	Splatid          []byte  `protobuf:"bytes,12,opt,name=splatid" json:"splatid,omitempty"`
	Spartition       []byte  `protobuf:"bytes,13,opt,name=spartition" json:"spartition,omitempty"`
	Extend           []*KV   `protobuf:"bytes,14,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SDKLogReport) Reset()                    { *m = SDKLogReport{} }
func (m *SDKLogReport) String() string            { return proto.CompactTextString(m) }
func (*SDKLogReport) ProtoMessage()               {}
func (*SDKLogReport) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{34} }

func (m *SDKLogReport) GetUintLogLevel() uint64 {
	if m != nil && m.UintLogLevel != nil {
		return *m.UintLogLevel
	}
	return 0
}

func (m *SDKLogReport) GetStrSdkVersion() []byte {
	if m != nil {
		return m.StrSdkVersion
	}
	return nil
}

func (m *SDKLogReport) GetStrHardwareOs() []byte {
	if m != nil {
		return m.StrHardwareOs
	}
	return nil
}

func (m *SDKLogReport) GetStrOpenid() []byte {
	if m != nil {
		return m.StrOpenid
	}
	return nil
}

func (m *SDKLogReport) GetStrUserip() []byte {
	if m != nil {
		return m.StrUserip
	}
	return nil
}

func (m *SDKLogReport) GetUintReportType() uint64 {
	if m != nil && m.UintReportType != nil {
		return *m.UintReportType
	}
	return 0
}

func (m *SDKLogReport) GetUintToreturncode() uint64 {
	if m != nil && m.UintToreturncode != nil {
		return *m.UintToreturncode
	}
	return 0
}

func (m *SDKLogReport) GetStrRespara() []byte {
	if m != nil {
		return m.StrRespara
	}
	return nil
}

func (m *SDKLogReport) GetUintSerialtime() uint64 {
	if m != nil && m.UintSerialtime != nil {
		return *m.UintSerialtime
	}
	return 0
}

func (m *SDKLogReport) GetUintCmd() uint64 {
	if m != nil && m.UintCmd != nil {
		return *m.UintCmd
	}
	return 0
}

func (m *SDKLogReport) GetSarea() []byte {
	if m != nil {
		return m.Sarea
	}
	return nil
}

func (m *SDKLogReport) GetSplatid() []byte {
	if m != nil {
		return m.Splatid
	}
	return nil
}

func (m *SDKLogReport) GetSpartition() []byte {
	if m != nil {
		return m.Spartition
	}
	return nil
}

func (m *SDKLogReport) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type TLogData struct {
	StrService       []byte `protobuf:"bytes,1,opt,name=str_service" json:"str_service,omitempty"`
	StrTlogdata      []byte `protobuf:"bytes,2,opt,name=str_tlogdata" json:"str_tlogdata,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TLogData) Reset()                    { *m = TLogData{} }
func (m *TLogData) String() string            { return proto.CompactTextString(m) }
func (*TLogData) ProtoMessage()               {}
func (*TLogData) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{35} }

func (m *TLogData) GetStrService() []byte {
	if m != nil {
		return m.StrService
	}
	return nil
}

func (m *TLogData) GetStrTlogdata() []byte {
	if m != nil {
		return m.StrTlogdata
	}
	return nil
}

type Empty struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{36} }

type GPMQueryPrimeGoodsListReq struct {
	Gameappid        []byte `protobuf:"bytes,1,opt,name=gameappid" json:"gameappid,omitempty"`
	Actionid         []byte `protobuf:"bytes,2,opt,name=actionid" json:"actionid,omitempty"`
	XOutputFmt       []byte `protobuf:"bytes,3,opt,name=_output_fmt" json:"_output_fmt,omitempty"`
	PageNum          []byte `protobuf:"bytes,4,opt,name=page_num" json:"page_num,omitempty"`
	PageSize         []byte `protobuf:"bytes,5,opt,name=page_size" json:"page_size,omitempty"`
	ZoneType         []byte `protobuf:"bytes,6,opt,name=zone_type" json:"zone_type,omitempty"`
	Zoneid           []byte `protobuf:"bytes,7,opt,name=zoneid" json:"zoneid,omitempty"`
	Partition        []byte `protobuf:"bytes,8,opt,name=partition" json:"partition,omitempty"`
	Roleid           []byte `protobuf:"bytes,9,opt,name=roleid" json:"roleid,omitempty"`
	Uin              []byte `protobuf:"bytes,10,opt,name=uin" json:"uin,omitempty"`
	Plat             []byte `protobuf:"bytes,11,opt,name=plat" json:"plat,omitempty"`
	Md5Val           []byte `protobuf:"bytes,12,opt,name=md5val" json:"md5val,omitempty"`
	ActDescmd5Val    []byte `protobuf:"bytes,13,opt,name=act_descmd5val" json:"act_descmd5val,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GPMQueryPrimeGoodsListReq) Reset()                    { *m = GPMQueryPrimeGoodsListReq{} }
func (m *GPMQueryPrimeGoodsListReq) String() string            { return proto.CompactTextString(m) }
func (*GPMQueryPrimeGoodsListReq) ProtoMessage()               {}
func (*GPMQueryPrimeGoodsListReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{37} }

func (m *GPMQueryPrimeGoodsListReq) GetGameappid() []byte {
	if m != nil {
		return m.Gameappid
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetActionid() []byte {
	if m != nil {
		return m.Actionid
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetXOutputFmt() []byte {
	if m != nil {
		return m.XOutputFmt
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetPageNum() []byte {
	if m != nil {
		return m.PageNum
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetPageSize() []byte {
	if m != nil {
		return m.PageSize
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetZoneType() []byte {
	if m != nil {
		return m.ZoneType
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetZoneid() []byte {
	if m != nil {
		return m.Zoneid
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetPartition() []byte {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetRoleid() []byte {
	if m != nil {
		return m.Roleid
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetUin() []byte {
	if m != nil {
		return m.Uin
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetPlat() []byte {
	if m != nil {
		return m.Plat
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetMd5Val() []byte {
	if m != nil {
		return m.Md5Val
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListReq) GetActDescmd5Val() []byte {
	if m != nil {
		return m.ActDescmd5Val
	}
	return nil
}

type GPMGoodsDetail struct {
	SItemId          []byte `protobuf:"bytes,1,opt,name=sItemId" json:"sItemId,omitempty"`
	SGoodsName       []byte `protobuf:"bytes,2,opt,name=sGoodsName" json:"sGoodsName,omitempty"`
	SGoodsPic        []byte `protobuf:"bytes,3,opt,name=sGoodsPic" json:"sGoodsPic,omitempty"`
	IPacketNum       []byte `protobuf:"bytes,4,opt,name=iPacketNum" json:"iPacketNum,omitempty"`
	Picmd5Val        []byte `protobuf:"bytes,5,opt,name=picmd5val" json:"picmd5val,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GPMGoodsDetail) Reset()                    { *m = GPMGoodsDetail{} }
func (m *GPMGoodsDetail) String() string            { return proto.CompactTextString(m) }
func (*GPMGoodsDetail) ProtoMessage()               {}
func (*GPMGoodsDetail) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{38} }

func (m *GPMGoodsDetail) GetSItemId() []byte {
	if m != nil {
		return m.SItemId
	}
	return nil
}

func (m *GPMGoodsDetail) GetSGoodsName() []byte {
	if m != nil {
		return m.SGoodsName
	}
	return nil
}

func (m *GPMGoodsDetail) GetSGoodsPic() []byte {
	if m != nil {
		return m.SGoodsPic
	}
	return nil
}

func (m *GPMGoodsDetail) GetIPacketNum() []byte {
	if m != nil {
		return m.IPacketNum
	}
	return nil
}

func (m *GPMGoodsDetail) GetPicmd5Val() []byte {
	if m != nil {
		return m.Picmd5Val
	}
	return nil
}

type GPMPrimeGoodsInfo struct {
	IGoodsId         []byte            `protobuf:"bytes,1,opt,name=iGoodsId" json:"iGoodsId,omitempty"`
	IActionId        []byte            `protobuf:"bytes,2,opt,name=iActionId" json:"iActionId,omitempty"`
	SActionNo        []byte            `protobuf:"bytes,3,opt,name=sActionNo" json:"sActionNo,omitempty"`
	DtBeginTime      []byte            `protobuf:"bytes,4,opt,name=dtBeginTime" json:"dtBeginTime,omitempty"`
	DtEndTime        []byte            `protobuf:"bytes,5,opt,name=dtEndTime" json:"dtEndTime,omitempty"`
	SGoodsName       []byte            `protobuf:"bytes,6,opt,name=sGoodsName" json:"sGoodsName,omitempty"`
	SGoodsPic        []byte            `protobuf:"bytes,7,opt,name=sGoodsPic" json:"sGoodsPic,omitempty"`
	SPrice           []byte            `protobuf:"bytes,8,opt,name=sPrice" json:"sPrice,omitempty"`
	SRealPrice       []byte            `protobuf:"bytes,9,opt,name=sRealPrice" json:"sRealPrice,omitempty"`
	Detail           []*GPMGoodsDetail `protobuf:"bytes,10,rep,name=detail" json:"detail,omitempty"`
	SGoodsDesc       []byte            `protobuf:"bytes,11,opt,name=sGoodsDesc" json:"sGoodsDesc,omitempty"`
	Picmd5Val        []byte            `protobuf:"bytes,12,opt,name=picmd5val" json:"picmd5val,omitempty"`
	Productid        []byte            `protobuf:"bytes,13,opt,name=productid" json:"productid,omitempty"`
	CurBuyNum        []byte            `protobuf:"bytes,14,opt,name=cur_buy_num" json:"cur_buy_num,omitempty"`
	MaxBuyNum        []byte            `protobuf:"bytes,15,opt,name=max_buy_num" json:"max_buy_num,omitempty"`
	CurrencyType     []byte            `protobuf:"bytes,16,opt,name=currency_type" json:"currency_type,omitempty"`
	Limittype        []byte            `protobuf:"bytes,17,opt,name=limittype" json:"limittype,omitempty"`
	SGoodsDesc2      []byte            `protobuf:"bytes,18,opt,name=sGoodsDesc2" json:"sGoodsDesc2,omitempty"`
	IMinLevel        []byte            `protobuf:"bytes,19,opt,name=iMinLevel" json:"iMinLevel,omitempty"`
	IMaxLevel        []byte            `protobuf:"bytes,20,opt,name=iMaxLevel" json:"iMaxLevel,omitempty"`
	IMinCapability   []byte            `protobuf:"bytes,21,opt,name=iMinCapability" json:"iMinCapability,omitempty"`
	IMaxCapability   []byte            `protobuf:"bytes,22,opt,name=iMaxCapability" json:"iMaxCapability,omitempty"`
	GoodsDetailDesc  []byte            `protobuf:"bytes,23,opt,name=GoodsDetailDesc" json:"GoodsDetailDesc,omitempty"`
	GamePicId        []byte            `protobuf:"bytes,24,opt,name=GamePicId" json:"GamePicId,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GPMPrimeGoodsInfo) Reset()                    { *m = GPMPrimeGoodsInfo{} }
func (m *GPMPrimeGoodsInfo) String() string            { return proto.CompactTextString(m) }
func (*GPMPrimeGoodsInfo) ProtoMessage()               {}
func (*GPMPrimeGoodsInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{39} }

func (m *GPMPrimeGoodsInfo) GetIGoodsId() []byte {
	if m != nil {
		return m.IGoodsId
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetIActionId() []byte {
	if m != nil {
		return m.IActionId
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetSActionNo() []byte {
	if m != nil {
		return m.SActionNo
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetDtBeginTime() []byte {
	if m != nil {
		return m.DtBeginTime
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetDtEndTime() []byte {
	if m != nil {
		return m.DtEndTime
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetSGoodsName() []byte {
	if m != nil {
		return m.SGoodsName
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetSGoodsPic() []byte {
	if m != nil {
		return m.SGoodsPic
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetSPrice() []byte {
	if m != nil {
		return m.SPrice
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetSRealPrice() []byte {
	if m != nil {
		return m.SRealPrice
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetDetail() []*GPMGoodsDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetSGoodsDesc() []byte {
	if m != nil {
		return m.SGoodsDesc
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetPicmd5Val() []byte {
	if m != nil {
		return m.Picmd5Val
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetProductid() []byte {
	if m != nil {
		return m.Productid
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetCurBuyNum() []byte {
	if m != nil {
		return m.CurBuyNum
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetMaxBuyNum() []byte {
	if m != nil {
		return m.MaxBuyNum
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetCurrencyType() []byte {
	if m != nil {
		return m.CurrencyType
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetLimittype() []byte {
	if m != nil {
		return m.Limittype
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetSGoodsDesc2() []byte {
	if m != nil {
		return m.SGoodsDesc2
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetIMinLevel() []byte {
	if m != nil {
		return m.IMinLevel
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetIMaxLevel() []byte {
	if m != nil {
		return m.IMaxLevel
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetIMinCapability() []byte {
	if m != nil {
		return m.IMinCapability
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetIMaxCapability() []byte {
	if m != nil {
		return m.IMaxCapability
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetGoodsDetailDesc() []byte {
	if m != nil {
		return m.GoodsDetailDesc
	}
	return nil
}

func (m *GPMPrimeGoodsInfo) GetGamePicId() []byte {
	if m != nil {
		return m.GamePicId
	}
	return nil
}

type GPMQueryPrimeGoodsListRsp struct {
	Ret              *int64               `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	Msg              []byte               `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	IsLucky          []byte               `protobuf:"bytes,3,opt,name=isLucky" json:"isLucky,omitempty"`
	DtValidDate      []byte               `protobuf:"bytes,4,opt,name=dtValidDate" json:"dtValidDate,omitempty"`
	RecommendId      []byte               `protobuf:"bytes,5,opt,name=recommend_id" json:"recommend_id,omitempty"`
	ServerTime       []byte               `protobuf:"bytes,6,opt,name=serverTime" json:"serverTime,omitempty"`
	FromCache        []byte               `protobuf:"bytes,7,opt,name=from_cache" json:"from_cache,omitempty"`
	Data             []*GPMPrimeGoodsInfo `protobuf:"bytes,8,rep,name=data" json:"data,omitempty"`
	PicUrl           []byte               `protobuf:"bytes,9,opt,name=pic_url" json:"pic_url,omitempty"`
	ActDesc          []byte               `protobuf:"bytes,10,opt,name=act_desc" json:"act_desc,omitempty"`
	ActId            []byte               `protobuf:"bytes,11,opt,name=act_id" json:"act_id,omitempty"`
	FlowId           []byte               `protobuf:"bytes,12,opt,name=flow_id" json:"flow_id,omitempty"`
	Showflag         []byte               `protobuf:"bytes,17,opt,name=showflag" json:"showflag,omitempty"`
	Picmd5Val        []byte               `protobuf:"bytes,18,opt,name=picmd5val" json:"picmd5val,omitempty"`
	ActDescmd5Val    []byte               `protobuf:"bytes,19,opt,name=act_descmd5val" json:"act_descmd5val,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *GPMQueryPrimeGoodsListRsp) Reset()                    { *m = GPMQueryPrimeGoodsListRsp{} }
func (m *GPMQueryPrimeGoodsListRsp) String() string            { return proto.CompactTextString(m) }
func (*GPMQueryPrimeGoodsListRsp) ProtoMessage()               {}
func (*GPMQueryPrimeGoodsListRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{40} }

func (m *GPMQueryPrimeGoodsListRsp) GetRet() int64 {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return 0
}

func (m *GPMQueryPrimeGoodsListRsp) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetIsLucky() []byte {
	if m != nil {
		return m.IsLucky
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetDtValidDate() []byte {
	if m != nil {
		return m.DtValidDate
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetRecommendId() []byte {
	if m != nil {
		return m.RecommendId
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetServerTime() []byte {
	if m != nil {
		return m.ServerTime
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetFromCache() []byte {
	if m != nil {
		return m.FromCache
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetData() []*GPMPrimeGoodsInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetPicUrl() []byte {
	if m != nil {
		return m.PicUrl
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetActDesc() []byte {
	if m != nil {
		return m.ActDesc
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetActId() []byte {
	if m != nil {
		return m.ActId
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetFlowId() []byte {
	if m != nil {
		return m.FlowId
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetShowflag() []byte {
	if m != nil {
		return m.Showflag
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetPicmd5Val() []byte {
	if m != nil {
		return m.Picmd5Val
	}
	return nil
}

func (m *GPMQueryPrimeGoodsListRsp) GetActDescmd5Val() []byte {
	if m != nil {
		return m.ActDescmd5Val
	}
	return nil
}

type GPMBuyPayReq struct {
	GpmAppId         []byte `protobuf:"bytes,1,opt,name=gpm_app_id" json:"gpm_app_id,omitempty"`
	Gameappid        []byte `protobuf:"bytes,2,opt,name=gameappid" json:"gameappid,omitempty"`
	XPlugId          []byte `protobuf:"bytes,3,opt,name=_plug_id" json:"_plug_id,omitempty"`
	XOutputFmt       []byte `protobuf:"bytes,4,opt,name=_output_fmt" json:"_output_fmt,omitempty"`
	Acctype          []byte `protobuf:"bytes,5,opt,name=acctype" json:"acctype,omitempty"`
	Openid           []byte `protobuf:"bytes,6,opt,name=openid" json:"openid,omitempty"`
	AccessToken      []byte `protobuf:"bytes,7,opt,name=access_token" json:"access_token,omitempty"`
	PayToken         []byte `protobuf:"bytes,8,opt,name=pay_token" json:"pay_token,omitempty"`
	Plat             []byte `protobuf:"bytes,9,opt,name=plat" json:"plat,omitempty"`
	Areaid           []byte `protobuf:"bytes,10,opt,name=areaid" json:"areaid,omitempty"`
	Partition        []byte `protobuf:"bytes,11,opt,name=partition" json:"partition,omitempty"`
	Roleid           []byte `protobuf:"bytes,12,opt,name=roleid" json:"roleid,omitempty"`
	Rolename         []byte `protobuf:"bytes,13,opt,name=rolename" json:"rolename,omitempty"`
	Propid           []byte `protobuf:"bytes,14,opt,name=propid" json:"propid,omitempty"`
	Buynum           []byte `protobuf:"bytes,15,opt,name=buynum" json:"buynum,omitempty"`
	Paytype          []byte `protobuf:"bytes,16,opt,name=paytype" json:"paytype,omitempty"`
	XTest            []byte `protobuf:"bytes,17,opt,name=_test" json:"_test,omitempty"`
	XJsonp           []byte `protobuf:"bytes,18,opt,name=_jsonp" json:"_jsonp,omitempty"`
	XCs              []byte `protobuf:"bytes,19,opt,name=_cs" json:"_cs,omitempty"`
	XRetkey          []byte `protobuf:"bytes,20,opt,name=_retkey" json:"_retkey,omitempty"`
	Apptype          []byte `protobuf:"bytes,21,opt,name=apptype" json:"apptype,omitempty"`
	Serial           []byte `protobuf:"bytes,22,opt,name=serial" json:"serial,omitempty"`
	Ru               []byte `protobuf:"bytes,23,opt,name=ru" json:"ru,omitempty"`
	Pu               []byte `protobuf:"bytes,24,opt,name=pu" json:"pu,omitempty"`
	Hu               []byte `protobuf:"bytes,25,opt,name=hu" json:"hu,omitempty"`
	IGoodsId         []byte `protobuf:"bytes,26,opt,name=iGoodsId" json:"iGoodsId,omitempty"`
	IActionId        []byte `protobuf:"bytes,27,opt,name=iActionId" json:"iActionId,omitempty"`
	Productid        []byte `protobuf:"bytes,28,opt,name=productid" json:"productid,omitempty"`
	PayZone          []byte `protobuf:"bytes,29,opt,name=pay_zone" json:"pay_zone,omitempty"`
	Extend           []*KV  `protobuf:"bytes,30,rep,name=extend" json:"extend,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GPMBuyPayReq) Reset()                    { *m = GPMBuyPayReq{} }
func (m *GPMBuyPayReq) String() string            { return proto.CompactTextString(m) }
func (*GPMBuyPayReq) ProtoMessage()               {}
func (*GPMBuyPayReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{41} }

func (m *GPMBuyPayReq) GetGpmAppId() []byte {
	if m != nil {
		return m.GpmAppId
	}
	return nil
}

func (m *GPMBuyPayReq) GetGameappid() []byte {
	if m != nil {
		return m.Gameappid
	}
	return nil
}

func (m *GPMBuyPayReq) GetXPlugId() []byte {
	if m != nil {
		return m.XPlugId
	}
	return nil
}

func (m *GPMBuyPayReq) GetXOutputFmt() []byte {
	if m != nil {
		return m.XOutputFmt
	}
	return nil
}

func (m *GPMBuyPayReq) GetAcctype() []byte {
	if m != nil {
		return m.Acctype
	}
	return nil
}

func (m *GPMBuyPayReq) GetOpenid() []byte {
	if m != nil {
		return m.Openid
	}
	return nil
}

func (m *GPMBuyPayReq) GetAccessToken() []byte {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (m *GPMBuyPayReq) GetPayToken() []byte {
	if m != nil {
		return m.PayToken
	}
	return nil
}

func (m *GPMBuyPayReq) GetPlat() []byte {
	if m != nil {
		return m.Plat
	}
	return nil
}

func (m *GPMBuyPayReq) GetAreaid() []byte {
	if m != nil {
		return m.Areaid
	}
	return nil
}

func (m *GPMBuyPayReq) GetPartition() []byte {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *GPMBuyPayReq) GetRoleid() []byte {
	if m != nil {
		return m.Roleid
	}
	return nil
}

func (m *GPMBuyPayReq) GetRolename() []byte {
	if m != nil {
		return m.Rolename
	}
	return nil
}

func (m *GPMBuyPayReq) GetPropid() []byte {
	if m != nil {
		return m.Propid
	}
	return nil
}

func (m *GPMBuyPayReq) GetBuynum() []byte {
	if m != nil {
		return m.Buynum
	}
	return nil
}

func (m *GPMBuyPayReq) GetPaytype() []byte {
	if m != nil {
		return m.Paytype
	}
	return nil
}

func (m *GPMBuyPayReq) GetXTest() []byte {
	if m != nil {
		return m.XTest
	}
	return nil
}

func (m *GPMBuyPayReq) GetXJsonp() []byte {
	if m != nil {
		return m.XJsonp
	}
	return nil
}

func (m *GPMBuyPayReq) GetXCs() []byte {
	if m != nil {
		return m.XCs
	}
	return nil
}

func (m *GPMBuyPayReq) GetXRetkey() []byte {
	if m != nil {
		return m.XRetkey
	}
	return nil
}

func (m *GPMBuyPayReq) GetApptype() []byte {
	if m != nil {
		return m.Apptype
	}
	return nil
}

func (m *GPMBuyPayReq) GetSerial() []byte {
	if m != nil {
		return m.Serial
	}
	return nil
}

func (m *GPMBuyPayReq) GetRu() []byte {
	if m != nil {
		return m.Ru
	}
	return nil
}

func (m *GPMBuyPayReq) GetPu() []byte {
	if m != nil {
		return m.Pu
	}
	return nil
}

func (m *GPMBuyPayReq) GetHu() []byte {
	if m != nil {
		return m.Hu
	}
	return nil
}

func (m *GPMBuyPayReq) GetIGoodsId() []byte {
	if m != nil {
		return m.IGoodsId
	}
	return nil
}

func (m *GPMBuyPayReq) GetIActionId() []byte {
	if m != nil {
		return m.IActionId
	}
	return nil
}

func (m *GPMBuyPayReq) GetProductid() []byte {
	if m != nil {
		return m.Productid
	}
	return nil
}

func (m *GPMBuyPayReq) GetPayZone() []byte {
	if m != nil {
		return m.PayZone
	}
	return nil
}

func (m *GPMBuyPayReq) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

type GPMBuyPayRsp struct {
	Ret              *int64 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	Msg              []byte `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	ServerTime       []byte `protobuf:"bytes,3,opt,name=serverTime" json:"serverTime,omitempty"`
	ActAmount        []byte `protobuf:"bytes,4,opt,name=act_amount" json:"act_amount,omitempty"`
	EventId          []byte `protobuf:"bytes,5,opt,name=event_id" json:"event_id,omitempty"`
	Serial           []byte `protobuf:"bytes,6,opt,name=serial" json:"serial,omitempty"`
	PayPrice         []byte `protobuf:"bytes,7,opt,name=payPrice" json:"payPrice,omitempty"`
	Sandbox          []byte `protobuf:"bytes,8,opt,name=sandbox" json:"sandbox,omitempty"`
	OfferId          []byte `protobuf:"bytes,9,opt,name=offerId" json:"offerId,omitempty"`
	Pf               []byte `protobuf:"bytes,10,opt,name=pf" json:"pf,omitempty"`
	Token            []byte `protobuf:"bytes,11,opt,name=token" json:"token,omitempty"`
	UrlParams        []byte `protobuf:"bytes,12,opt,name=urlParams" json:"urlParams,omitempty"`
	PayUrl           []byte `protobuf:"bytes,13,opt,name=payUrl" json:"payUrl,omitempty"`
	Extend           []*KV  `protobuf:"bytes,14,rep,name=extend" json:"extend,omitempty"`
	AmsActId         *int64 `protobuf:"varint,15,opt,name=amsActId" json:"amsActId,omitempty"`
	AmsFlowId        *int64 `protobuf:"varint,16,opt,name=amsFlowId" json:"amsFlowId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GPMBuyPayRsp) Reset()                    { *m = GPMBuyPayRsp{} }
func (m *GPMBuyPayRsp) String() string            { return proto.CompactTextString(m) }
func (*GPMBuyPayRsp) ProtoMessage()               {}
func (*GPMBuyPayRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{42} }

func (m *GPMBuyPayRsp) GetRet() int64 {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return 0
}

func (m *GPMBuyPayRsp) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GPMBuyPayRsp) GetServerTime() []byte {
	if m != nil {
		return m.ServerTime
	}
	return nil
}

func (m *GPMBuyPayRsp) GetActAmount() []byte {
	if m != nil {
		return m.ActAmount
	}
	return nil
}

func (m *GPMBuyPayRsp) GetEventId() []byte {
	if m != nil {
		return m.EventId
	}
	return nil
}

func (m *GPMBuyPayRsp) GetSerial() []byte {
	if m != nil {
		return m.Serial
	}
	return nil
}

func (m *GPMBuyPayRsp) GetPayPrice() []byte {
	if m != nil {
		return m.PayPrice
	}
	return nil
}

func (m *GPMBuyPayRsp) GetSandbox() []byte {
	if m != nil {
		return m.Sandbox
	}
	return nil
}

func (m *GPMBuyPayRsp) GetOfferId() []byte {
	if m != nil {
		return m.OfferId
	}
	return nil
}

func (m *GPMBuyPayRsp) GetPf() []byte {
	if m != nil {
		return m.Pf
	}
	return nil
}

func (m *GPMBuyPayRsp) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GPMBuyPayRsp) GetUrlParams() []byte {
	if m != nil {
		return m.UrlParams
	}
	return nil
}

func (m *GPMBuyPayRsp) GetPayUrl() []byte {
	if m != nil {
		return m.PayUrl
	}
	return nil
}

func (m *GPMBuyPayRsp) GetExtend() []*KV {
	if m != nil {
		return m.Extend
	}
	return nil
}

func (m *GPMBuyPayRsp) GetAmsActId() int64 {
	if m != nil && m.AmsActId != nil {
		return *m.AmsActId
	}
	return 0
}

func (m *GPMBuyPayRsp) GetAmsFlowId() int64 {
	if m != nil && m.AmsFlowId != nil {
		return *m.AmsFlowId
	}
	return 0
}

type PushLuckyCallBack struct {
	InfoId           []byte `protobuf:"bytes,1,opt,name=info_id" json:"info_id,omitempty"`
	PushFlag         []byte `protobuf:"bytes,2,opt,name=push_flag" json:"push_flag,omitempty"`
	Appid            []byte `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Openid           []byte `protobuf:"bytes,4,opt,name=openid" json:"openid,omitempty"`
	Plat             []byte `protobuf:"bytes,5,opt,name=plat" json:"plat,omitempty"`
	Areaid           []byte `protobuf:"bytes,6,opt,name=areaid" json:"areaid,omitempty"`
	Partition        []byte `protobuf:"bytes,7,opt,name=partition" json:"partition,omitempty"`
	Roleid           []byte `protobuf:"bytes,8,opt,name=roleid" json:"roleid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PushLuckyCallBack) Reset()                    { *m = PushLuckyCallBack{} }
func (m *PushLuckyCallBack) String() string            { return proto.CompactTextString(m) }
func (*PushLuckyCallBack) ProtoMessage()               {}
func (*PushLuckyCallBack) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{43} }

func (m *PushLuckyCallBack) GetInfoId() []byte {
	if m != nil {
		return m.InfoId
	}
	return nil
}

func (m *PushLuckyCallBack) GetPushFlag() []byte {
	if m != nil {
		return m.PushFlag
	}
	return nil
}

func (m *PushLuckyCallBack) GetAppid() []byte {
	if m != nil {
		return m.Appid
	}
	return nil
}

func (m *PushLuckyCallBack) GetOpenid() []byte {
	if m != nil {
		return m.Openid
	}
	return nil
}

func (m *PushLuckyCallBack) GetPlat() []byte {
	if m != nil {
		return m.Plat
	}
	return nil
}

func (m *PushLuckyCallBack) GetAreaid() []byte {
	if m != nil {
		return m.Areaid
	}
	return nil
}

func (m *PushLuckyCallBack) GetPartition() []byte {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *PushLuckyCallBack) GetRoleid() []byte {
	if m != nil {
		return m.Roleid
	}
	return nil
}

type LotteryReq struct {
	IAmsActivityId      *int64 `protobuf:"varint,1,opt,name=iAmsActivityId" json:"iAmsActivityId,omitempty"`
	IModuleId           *int64 `protobuf:"varint,2,opt,name=iModuleId" json:"iModuleId,omitempty"`
	IPackageGroupId     *int64 `protobuf:"varint,3,opt,name=iPackageGroupId" json:"iPackageGroupId,omitempty"`
	IPackageGroupIdList []byte `protobuf:"bytes,4,opt,name=iPackageGroupIdList" json:"iPackageGroupIdList,omitempty"`
	SPackageNum         *int64 `protobuf:"varint,5,opt,name=sPackageNum" json:"sPackageNum,omitempty"`
	IUin                []byte `protobuf:"bytes,6,opt,name=iUin" json:"iUin,omitempty"`
	SAmsSerial          []byte `protobuf:"bytes,7,opt,name=sAmsSerial" json:"sAmsSerial,omitempty"`
	SServiceType        []byte `protobuf:"bytes,8,opt,name=sServiceType" json:"sServiceType,omitempty"`
	Acctype             []byte `protobuf:"bytes,9,opt,name=acctype" json:"acctype,omitempty"`
	UniZoneid           []byte `protobuf:"bytes,10,opt,name=uni_zoneid" json:"uni_zoneid,omitempty"`
	UniPayappid         []byte `protobuf:"bytes,11,opt,name=uni_payappid" json:"uni_payappid,omitempty"`
	UniClientver        []byte `protobuf:"bytes,12,opt,name=uni_clientver" json:"uni_clientver,omitempty"`
	SPlatId             []byte `protobuf:"bytes,13,opt,name=sPlatId" json:"sPlatId,omitempty"`
	SArea               []byte `protobuf:"bytes,14,opt,name=sArea" json:"sArea,omitempty"`
	SPartition          []byte `protobuf:"bytes,15,opt,name=sPartition" json:"sPartition,omitempty"`
	SRoleId             []byte `protobuf:"bytes,16,opt,name=sRoleId" json:"sRoleId,omitempty"`
	SRoleName           []byte `protobuf:"bytes,17,opt,name=sRoleName" json:"sRoleName,omitempty"`
	SUserIP             []byte `protobuf:"bytes,18,opt,name=sUserIP" json:"sUserIP,omitempty"`
	SServerIP           []byte `protobuf:"bytes,19,opt,name=sServerIP" json:"sServerIP,omitempty"`
	SPlatName           []byte `protobuf:"bytes,20,opt,name=sPlatName" json:"sPlatName,omitempty"`
	SServiceDepartment  []byte `protobuf:"bytes,21,opt,name=sServiceDepartment" json:"sServiceDepartment,omitempty"`
	IBaseUin            *int64 `protobuf:"varint,22,opt,name=iBaseUin" json:"iBaseUin,omitempty"`
	SSendPlatId         []byte `protobuf:"bytes,23,opt,name=sSendPlatId" json:"sSendPlatId,omitempty"`
	ISendUin            []byte `protobuf:"bytes,24,opt,name=iSendUin" json:"iSendUin,omitempty"`
	Skey                []byte `protobuf:"bytes,25,opt,name=skey" json:"skey,omitempty"`
	PUin                []byte `protobuf:"bytes,26,opt,name=p_uin" json:"p_uin,omitempty"`
	PSkey               []byte `protobuf:"bytes,27,opt,name=p_skey" json:"p_skey,omitempty"`
	Pt4Token            []byte `protobuf:"bytes,28,opt,name=pt4_token" json:"pt4_token,omitempty"`
	IED_LOG_INFO2       []byte `protobuf:"bytes,29,opt,name=IED_LOG_INFO2" json:"IED_LOG_INFO2,omitempty"`
	Iflowid             *int64 `protobuf:"varint,30,opt,name=iflowid" json:"iflowid,omitempty"`
	PayLotterySerial    []byte `protobuf:"bytes,31,opt,name=pay_lottery_serial" json:"pay_lottery_serial,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *LotteryReq) Reset()                    { *m = LotteryReq{} }
func (m *LotteryReq) String() string            { return proto.CompactTextString(m) }
func (*LotteryReq) ProtoMessage()               {}
func (*LotteryReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{44} }

func (m *LotteryReq) GetIAmsActivityId() int64 {
	if m != nil && m.IAmsActivityId != nil {
		return *m.IAmsActivityId
	}
	return 0
}

func (m *LotteryReq) GetIModuleId() int64 {
	if m != nil && m.IModuleId != nil {
		return *m.IModuleId
	}
	return 0
}

func (m *LotteryReq) GetIPackageGroupId() int64 {
	if m != nil && m.IPackageGroupId != nil {
		return *m.IPackageGroupId
	}
	return 0
}

func (m *LotteryReq) GetIPackageGroupIdList() []byte {
	if m != nil {
		return m.IPackageGroupIdList
	}
	return nil
}

func (m *LotteryReq) GetSPackageNum() int64 {
	if m != nil && m.SPackageNum != nil {
		return *m.SPackageNum
	}
	return 0
}

func (m *LotteryReq) GetIUin() []byte {
	if m != nil {
		return m.IUin
	}
	return nil
}

func (m *LotteryReq) GetSAmsSerial() []byte {
	if m != nil {
		return m.SAmsSerial
	}
	return nil
}

func (m *LotteryReq) GetSServiceType() []byte {
	if m != nil {
		return m.SServiceType
	}
	return nil
}

func (m *LotteryReq) GetAcctype() []byte {
	if m != nil {
		return m.Acctype
	}
	return nil
}

func (m *LotteryReq) GetUniZoneid() []byte {
	if m != nil {
		return m.UniZoneid
	}
	return nil
}

func (m *LotteryReq) GetUniPayappid() []byte {
	if m != nil {
		return m.UniPayappid
	}
	return nil
}

func (m *LotteryReq) GetUniClientver() []byte {
	if m != nil {
		return m.UniClientver
	}
	return nil
}

func (m *LotteryReq) GetSPlatId() []byte {
	if m != nil {
		return m.SPlatId
	}
	return nil
}

func (m *LotteryReq) GetSArea() []byte {
	if m != nil {
		return m.SArea
	}
	return nil
}

func (m *LotteryReq) GetSPartition() []byte {
	if m != nil {
		return m.SPartition
	}
	return nil
}

func (m *LotteryReq) GetSRoleId() []byte {
	if m != nil {
		return m.SRoleId
	}
	return nil
}

func (m *LotteryReq) GetSRoleName() []byte {
	if m != nil {
		return m.SRoleName
	}
	return nil
}

func (m *LotteryReq) GetSUserIP() []byte {
	if m != nil {
		return m.SUserIP
	}
	return nil
}

func (m *LotteryReq) GetSServerIP() []byte {
	if m != nil {
		return m.SServerIP
	}
	return nil
}

func (m *LotteryReq) GetSPlatName() []byte {
	if m != nil {
		return m.SPlatName
	}
	return nil
}

func (m *LotteryReq) GetSServiceDepartment() []byte {
	if m != nil {
		return m.SServiceDepartment
	}
	return nil
}

func (m *LotteryReq) GetIBaseUin() int64 {
	if m != nil && m.IBaseUin != nil {
		return *m.IBaseUin
	}
	return 0
}

func (m *LotteryReq) GetSSendPlatId() []byte {
	if m != nil {
		return m.SSendPlatId
	}
	return nil
}

func (m *LotteryReq) GetISendUin() []byte {
	if m != nil {
		return m.ISendUin
	}
	return nil
}

func (m *LotteryReq) GetSkey() []byte {
	if m != nil {
		return m.Skey
	}
	return nil
}

func (m *LotteryReq) GetPUin() []byte {
	if m != nil {
		return m.PUin
	}
	return nil
}

func (m *LotteryReq) GetPSkey() []byte {
	if m != nil {
		return m.PSkey
	}
	return nil
}

func (m *LotteryReq) GetPt4Token() []byte {
	if m != nil {
		return m.Pt4Token
	}
	return nil
}

func (m *LotteryReq) GetIED_LOG_INFO2() []byte {
	if m != nil {
		return m.IED_LOG_INFO2
	}
	return nil
}

func (m *LotteryReq) GetIflowid() int64 {
	if m != nil && m.Iflowid != nil {
		return *m.Iflowid
	}
	return 0
}

func (m *LotteryReq) GetPayLotterySerial() []byte {
	if m != nil {
		return m.PayLotterySerial
	}
	return nil
}

type LotteryRsp struct {
	IRet                   *int64       `protobuf:"varint,1,opt,name=iRet" json:"iRet,omitempty"`
	BHasSendFailItem       *int64       `protobuf:"varint,2,opt,name=bHasSendFailItem" json:"bHasSendFailItem,omitempty"`
	SMsg                   []byte       `protobuf:"bytes,3,opt,name=sMsg" json:"sMsg,omitempty"`
	IActivityId            *int64       `protobuf:"varint,4,opt,name=iActivityId" json:"iActivityId,omitempty"`
	IPackageGroupId        *int64       `protobuf:"varint,5,opt,name=iPackageGroupId" json:"iPackageGroupId,omitempty"`
	IPackageId             *int64       `protobuf:"varint,6,opt,name=iPackageId" json:"iPackageId,omitempty"`
	IPackageIdCnt          []byte       `protobuf:"bytes,7,opt,name=iPackageIdCnt" json:"iPackageIdCnt,omitempty"`
	SPackageName           []byte       `protobuf:"bytes,8,opt,name=sPackageName" json:"sPackageName,omitempty"`
	IPackageNum            *int64       `protobuf:"varint,9,opt,name=iPackageNum" json:"iPackageNum,omitempty"`
	SPackageRealFlag       *int64       `protobuf:"varint,10,opt,name=sPackageRealFlag" json:"sPackageRealFlag,omitempty"`
	SPackageCDkey          []byte       `protobuf:"bytes,11,opt,name=sPackageCDkey" json:"sPackageCDkey,omitempty"`
	DTimeNow               []byte       `protobuf:"bytes,12,opt,name=dTimeNow" json:"dTimeNow,omitempty"`
	SPackageLimitCheckCode []byte       `protobuf:"bytes,13,opt,name=sPackageLimitCheckCode" json:"sPackageLimitCheckCode,omitempty"`
	Costtime               *int64       `protobuf:"varint,14,opt,name=costtime" json:"costtime,omitempty"`
	GetGoods               []*GoodsInfo `protobuf:"bytes,15,rep,name=get_goods" json:"get_goods,omitempty"`
	ExchangeGoods          []*GoodsInfo `protobuf:"bytes,16,rep,name=exchange_goods" json:"exchange_goods,omitempty"`
	XXX_unrecognized       []byte       `json:"-"`
}

func (m *LotteryRsp) Reset()                    { *m = LotteryRsp{} }
func (m *LotteryRsp) String() string            { return proto.CompactTextString(m) }
func (*LotteryRsp) ProtoMessage()               {}
func (*LotteryRsp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{45} }

func (m *LotteryRsp) GetIRet() int64 {
	if m != nil && m.IRet != nil {
		return *m.IRet
	}
	return 0
}

func (m *LotteryRsp) GetBHasSendFailItem() int64 {
	if m != nil && m.BHasSendFailItem != nil {
		return *m.BHasSendFailItem
	}
	return 0
}

func (m *LotteryRsp) GetSMsg() []byte {
	if m != nil {
		return m.SMsg
	}
	return nil
}

func (m *LotteryRsp) GetIActivityId() int64 {
	if m != nil && m.IActivityId != nil {
		return *m.IActivityId
	}
	return 0
}

func (m *LotteryRsp) GetIPackageGroupId() int64 {
	if m != nil && m.IPackageGroupId != nil {
		return *m.IPackageGroupId
	}
	return 0
}

func (m *LotteryRsp) GetIPackageId() int64 {
	if m != nil && m.IPackageId != nil {
		return *m.IPackageId
	}
	return 0
}

func (m *LotteryRsp) GetIPackageIdCnt() []byte {
	if m != nil {
		return m.IPackageIdCnt
	}
	return nil
}

func (m *LotteryRsp) GetSPackageName() []byte {
	if m != nil {
		return m.SPackageName
	}
	return nil
}

func (m *LotteryRsp) GetIPackageNum() int64 {
	if m != nil && m.IPackageNum != nil {
		return *m.IPackageNum
	}
	return 0
}

func (m *LotteryRsp) GetSPackageRealFlag() int64 {
	if m != nil && m.SPackageRealFlag != nil {
		return *m.SPackageRealFlag
	}
	return 0
}

func (m *LotteryRsp) GetSPackageCDkey() []byte {
	if m != nil {
		return m.SPackageCDkey
	}
	return nil
}

func (m *LotteryRsp) GetDTimeNow() []byte {
	if m != nil {
		return m.DTimeNow
	}
	return nil
}

func (m *LotteryRsp) GetSPackageLimitCheckCode() []byte {
	if m != nil {
		return m.SPackageLimitCheckCode
	}
	return nil
}

func (m *LotteryRsp) GetCosttime() int64 {
	if m != nil && m.Costtime != nil {
		return *m.Costtime
	}
	return 0
}

func (m *LotteryRsp) GetGetGoods() []*GoodsInfo {
	if m != nil {
		return m.GetGoods
	}
	return nil
}

func (m *LotteryRsp) GetExchangeGoods() []*GoodsInfo {
	if m != nil {
		return m.ExchangeGoods
	}
	return nil
}

type ActListInfo struct {
	OpenId             []byte     `protobuf:"bytes,1,opt,name=open_id" json:"open_id,omitempty"`
	Sarea              []byte     `protobuf:"bytes,2,opt,name=sarea" json:"sarea,omitempty"`
	Splatid            []byte     `protobuf:"bytes,3,opt,name=splatid" json:"splatid,omitempty"`
	Spartition         []byte     `protobuf:"bytes,4,opt,name=spartition" json:"spartition,omitempty"`
	Sroleid            []byte     `protobuf:"bytes,5,opt,name=sroleid" json:"sroleid,omitempty"`
	ActInfo            []*ActInfo `protobuf:"bytes,6,rep,name=act_info" json:"act_info,omitempty"`
	BizCode            []byte     `protobuf:"bytes,7,opt,name=biz_code" json:"biz_code,omitempty"`
	SServiceDepartment []byte     `protobuf:"bytes,8,opt,name=sServiceDepartment" json:"sServiceDepartment,omitempty"`
	Suin               []byte     `protobuf:"bytes,9,opt,name=suin" json:"suin,omitempty"`
	XXX_unrecognized   []byte     `json:"-"`
}

func (m *ActListInfo) Reset()                    { *m = ActListInfo{} }
func (m *ActListInfo) String() string            { return proto.CompactTextString(m) }
func (*ActListInfo) ProtoMessage()               {}
func (*ActListInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{46} }

func (m *ActListInfo) GetOpenId() []byte {
	if m != nil {
		return m.OpenId
	}
	return nil
}

func (m *ActListInfo) GetSarea() []byte {
	if m != nil {
		return m.Sarea
	}
	return nil
}

func (m *ActListInfo) GetSplatid() []byte {
	if m != nil {
		return m.Splatid
	}
	return nil
}

func (m *ActListInfo) GetSpartition() []byte {
	if m != nil {
		return m.Spartition
	}
	return nil
}

func (m *ActListInfo) GetSroleid() []byte {
	if m != nil {
		return m.Sroleid
	}
	return nil
}

func (m *ActListInfo) GetActInfo() []*ActInfo {
	if m != nil {
		return m.ActInfo
	}
	return nil
}

func (m *ActListInfo) GetBizCode() []byte {
	if m != nil {
		return m.BizCode
	}
	return nil
}

func (m *ActListInfo) GetSServiceDepartment() []byte {
	if m != nil {
		return m.SServiceDepartment
	}
	return nil
}

func (m *ActListInfo) GetSuin() []byte {
	if m != nil {
		return m.Suin
	}
	return nil
}

func init() {
	proto.RegisterType((*CmdBase)(nil), "ams_act_con.CmdBase")
	proto.RegisterType((*KV)(nil), "ams_act_con.KV")
	proto.RegisterType((*CmdBaseResp)(nil), "ams_act_con.CmdBaseResp")
	proto.RegisterType((*SvrPushOnlineMsgReq)(nil), "ams_act_con.SvrPushOnlineMsgReq")
	proto.RegisterType((*PushOnlineMsgReq)(nil), "ams_act_con.PushOnlineMsgReq")
	proto.RegisterType((*ControlInfo)(nil), "ams_act_con.ControlInfo")
	proto.RegisterType((*Channel)(nil), "ams_act_con.Channel")
	proto.RegisterType((*OnlineMsgInfo)(nil), "ams_act_con.OnlineMsgInfo")
	proto.RegisterType((*LuckyListRes)(nil), "ams_act_con.LuckyListRes")
	proto.RegisterType((*LuckyActInfo)(nil), "ams_act_con.LuckyActInfo")
	proto.RegisterType((*GoodsInfo)(nil), "ams_act_con.GoodsInfo")
	proto.RegisterType((*ActInfo)(nil), "ams_act_con.ActInfo")
	proto.RegisterType((*ActFlowInfo)(nil), "ams_act_con.ActFlowInfo")
	proto.RegisterType((*ActCondInfo)(nil), "ams_act_con.ActCondInfo")
	proto.RegisterType((*ClientLoginReq)(nil), "ams_act_con.ClientLoginReq")
	proto.RegisterType((*ClientHeartbeatReq)(nil), "ams_act_con.ClientHeartbeatReq")
	proto.RegisterType((*ActStatus)(nil), "ams_act_con.ActStatus")
	proto.RegisterType((*ClientGetActListReq)(nil), "ams_act_con.ClientGetActListReq")
	proto.RegisterType((*DescMd5)(nil), "ams_act_con.DescMd5")
	proto.RegisterType((*ClientAttendActReq)(nil), "ams_act_con.ClientAttendActReq")
	proto.RegisterType((*ActivityInformReq)(nil), "ams_act_con.ActivityInformReq")
	proto.RegisterType((*ClientAttendActRsp)(nil), "ams_act_con.ClientAttendActRsp")
	proto.RegisterType((*IDIPCMDReq)(nil), "ams_act_con.IDIPCMDReq")
	proto.RegisterType((*IDIPBatchReq)(nil), "ams_act_con.IDIPBatchReq")
	proto.RegisterType((*IDIPCMDRsp)(nil), "ams_act_con.IDIPCMDRsp")
	proto.RegisterType((*IDIPBatchRsp)(nil), "ams_act_con.IDIPBatchRsp")
	proto.RegisterType((*KickoutReq)(nil), "ams_act_con.KickoutReq")
	proto.RegisterType((*ClientKickoutReq)(nil), "ams_act_con.ClientKickoutReq")
	proto.RegisterType((*PeerPushOnlineMsgReq)(nil), "ams_act_con.PeerPushOnlineMsgReq")
	proto.RegisterType((*ReadTcaplusReq)(nil), "ams_act_con.ReadTcaplusReq")
	proto.RegisterType((*ReadTcaplusRsp)(nil), "ams_act_con.ReadTcaplusRsp")
	proto.RegisterType((*WriteTcaplusReq)(nil), "ams_act_con.WriteTcaplusReq")
	proto.RegisterType((*Report)(nil), "ams_act_con.report")
	proto.RegisterType((*Reportack)(nil), "ams_act_con.reportack")
	proto.RegisterType((*SDKLogReport)(nil), "ams_act_con.SDKLogReport")
	proto.RegisterType((*TLogData)(nil), "ams_act_con.TLogData")
	proto.RegisterType((*Empty)(nil), "ams_act_con.Empty")
	proto.RegisterType((*GPMQueryPrimeGoodsListReq)(nil), "ams_act_con.GPMQueryPrimeGoodsListReq")
	proto.RegisterType((*GPMGoodsDetail)(nil), "ams_act_con.GPMGoodsDetail")
	proto.RegisterType((*GPMPrimeGoodsInfo)(nil), "ams_act_con.GPMPrimeGoodsInfo")
	proto.RegisterType((*GPMQueryPrimeGoodsListRsp)(nil), "ams_act_con.GPMQueryPrimeGoodsListRsp")
	proto.RegisterType((*GPMBuyPayReq)(nil), "ams_act_con.GPMBuyPayReq")
	proto.RegisterType((*GPMBuyPayRsp)(nil), "ams_act_con.GPMBuyPayRsp")
	proto.RegisterType((*PushLuckyCallBack)(nil), "ams_act_con.PushLuckyCallBack")
	proto.RegisterType((*LotteryReq)(nil), "ams_act_con.LotteryReq")
	proto.RegisterType((*LotteryRsp)(nil), "ams_act_con.LotteryRsp")
	proto.RegisterType((*ActListInfo)(nil), "ams_act_con.ActListInfo")
	proto.RegisterEnum("ams_act_con.CMD_TYPE", CMD_TYPE_name, CMD_TYPE_value)
	proto.RegisterEnum("ams_act_con.BODY_TYPE", BODY_TYPE_name, BODY_TYPE_value)
	proto.RegisterEnum("ams_act_con.RET_CODE", RET_CODE_name, RET_CODE_value)
	proto.RegisterEnum("ams_act_con.ACT_STYLE", ACT_STYLE_name, ACT_STYLE_value)
	proto.RegisterEnum("ams_act_con.DEVICE_TYPE", DEVICE_TYPE_name, DEVICE_TYPE_value)
	proto.RegisterEnum("ams_act_con.NET_TYPE", NET_TYPE_name, NET_TYPE_value)
	proto.RegisterEnum("ams_act_con.TABLE_FIELD", TABLE_FIELD_name, TABLE_FIELD_value)
}

var fileDescriptor6 = []byte{
	// 6251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x7b, 0xc9, 0x8f, 0x23, 0xc9,
	0x75, 0xb7, 0x6a, 0xe3, 0x12, 0x64, 0x91, 0x59, 0x59, 0x6b, 0x6f, 0xd3, 0x2d, 0x4a, 0xdf, 0x37,
	0xe3, 0x1e, 0xb9, 0x35, 0x6a, 0xcf, 0xc8, 0xf0, 0x61, 0x60, 0x64, 0x91, 0xac, 0x2a, 0xaa, 0x58,
	0x24, 0x27, 0x49, 0x56, 0x4f, 0x0b, 0x30, 0x12, 0x59, 0x64, 0x56, 0x75, 0x76, 0x73, 0x1b, 0x66,
	0xb2, 0xa7, 0xab, 0x2f, 0x86, 0x00, 0x19, 0xb0, 0x0f, 0xba, 0xf8, 0x60, 0x18, 0x3e, 0x8d, 0x00,
	0xc3, 0x17, 0x1f, 0x7c, 0xf0, 0xcd, 0x90, 0xbc, 0xfe, 0x03, 0x3e, 0xd8, 0xb2, 0x65, 0xc3, 0x96,
	0x6f, 0x86, 0x6d, 0xc1, 0x80, 0xe5, 0x83, 0x57, 0x49, 0x7e, 0xef, 0xc5, 0x8b, 0x5c, 0xb8, 0x4d,
	0x8f, 0x25, 0xd8, 0x17, 0x17, 0x50, 0x40, 0xc6, 0x2f, 0x5e, 0x44, 0xbc, 0x88, 0x78, 0x5b, 0xc4,
	0x0b, 0x8a, 0x9d, 0xd1, 0xc4, 0x7b, 0x62, 0xb9, 0x03, 0xdf, 0x19, 0x5f, 0xda, 0x1d, 0xe7, 0xc1,
	0x68, 0x3c, 0xf4, 0x87, 0x7a, 0xc6, 0xee, 0x7b, 0x96, 0xdd, 0xf1, 0xad, 0xce, 0x70, 0x70, 0x73,
	0x2b, 0x52, 0x90, 0xf5, 0x85, 0xef, 0xac, 0x88, 0x64, 0xb1, 0xdf, 0x3d, 0xb4, 0x3d, 0x47, 0xdf,
	0x15, 0x09, 0xcf, 0xf9, 0xc0, 0x72, 0xbb, 0x07, 0x2b, 0xf7, 0x56, 0xde, 0x58, 0x33, 0x37, 0xa0,
	0x54, 0xe9, 0x22, 0xdc, 0xe9, 0x77, 0x11, 0x5e, 0x95, 0x30, 0x94, 0x00, 0xd6, 0xc5, 0xba, 0x7f,
	0x3d, 0x72, 0x0e, 0xd6, 0x08, 0xa4, 0x6f, 0x7d, 0x5f, 0x24, 0x2f, 0xc7, 0xc3, 0xbe, 0xe5, 0x8e,
	0x0e, 0xd6, 0x01, 0xce, 0x9a, 0x09, 0x2c, 0x56, 0x46, 0xfa, 0x1d, 0x21, 0x60, 0xbc, 0x8e, 0xe3,
	0x79, 0xd8, 0xcf, 0x06, 0x35, 0x49, 0x33, 0x22, 0x87, 0xe8, 0x0f, 0x69, 0x88, 0x84, 0x1c, 0x02,
	0x4a, 0x00, 0x1f, 0x88, 0xe4, 0x73, 0x67, 0xec, 0xb9, 0xc3, 0xc1, 0x41, 0x8a, 0xba, 0x53, 0x45,
	0x1c, 0xfc, 0x62, 0xd8, 0xbd, 0x3e, 0x48, 0x12, 0x4c, 0xdf, 0xd8, 0x89, 0x3d, 0x1a, 0x61, 0x27,
	0x69, 0x42, 0x37, 0xa0, 0x54, 0xe9, 0x16, 0x1e, 0x88, 0xd5, 0xd3, 0x73, 0x6c, 0x30, 0xb0, 0xfb,
	0x0e, 0xcd, 0x0c, 0x1a, 0xe0, 0xb7, 0xbe, 0x23, 0x36, 0x9e, 0xdb, 0xbd, 0x89, 0x43, 0xf3, 0x02,
	0x7a, 0x2a, 0x14, 0x5e, 0x8a, 0x0c, 0x2f, 0x88, 0xe9, 0x78, 0x23, 0x5d, 0x13, 0x6b, 0x63, 0xc7,
	0xe7, 0x15, 0xc1, 0x4f, 0x9c, 0xa4, 0x33, 0x1e, 0x5b, 0x7d, 0xef, 0x8a, 0x1b, 0x26, 0xa0, 0x78,
	0xe6, 0x5d, 0xe1, 0x18, 0x63, 0x68, 0x42, 0x2b, 0x02, 0x63, 0xe0, 0xb7, 0xbe, 0x07, 0x33, 0xeb,
	0xbe, 0x03, 0x3d, 0xab, 0x05, 0x91, 0x25, 0x1c, 0x1b, 0x58, 0xf0, 0x06, 0xb4, 0x16, 0xc8, 0x2b,
	0x16, 0x0a, 0x63, 0xb1, 0xdd, 0x7c, 0x3e, 0x6e, 0xc0, 0x46, 0xd6, 0x07, 0x3d, 0x77, 0xe0, 0x40,
	0xaf, 0xa6, 0xf3, 0x81, 0xfe, 0x33, 0x42, 0x0c, 0xa9, 0x4c, 0x83, 0xae, 0xdc, 0x5b, 0x7b, 0x23,
	0xf3, 0xf0, 0xe6, 0x83, 0xe8, 0x66, 0x06, 0xe4, 0x95, 0xc1, 0xe5, 0xd0, 0x4c, 0x0f, 0x55, 0x51,
	0xbf, 0x27, 0xb2, 0x57, 0x8e, 0x6f, 0xd9, 0xbd, 0x9e, 0xd5, 0x73, 0x3d, 0x9f, 0xb7, 0x50, 0x00,
	0x66, 0xf4, 0x7a, 0x55, 0x40, 0x0a, 0xbf, 0xba, 0x22, 0xb4, 0xff, 0xd1, 0x11, 0xf5, 0xd7, 0x45,
	0xc2, 0x79, 0xe1, 0x3b, 0x83, 0x2e, 0xac, 0x14, 0x76, 0x9c, 0x8f, 0x75, 0x7c, 0x7a, 0x6e, 0x72,
	0x75, 0xe1, 0x9b, 0x2b, 0xb0, 0x17, 0xc3, 0x81, 0x3f, 0x1e, 0xf6, 0x70, 0x14, 0xfd, 0x0d, 0xa1,
	0xf5, 0x86, 0x57, 0xd6, 0xd8, 0x19, 0x0d, 0xc7, 0xbe, 0xd5, 0x73, 0x9e, 0x3b, 0x3d, 0xde, 0x98,
	0x1c, 0xe0, 0x26, 0xc1, 0x55, 0x44, 0xf5, 0xb7, 0xc4, 0x8e, 0xe7, 0xdb, 0xbe, 0xdb, 0xf1, 0xe2,
	0xd4, 0x92, 0x19, 0x9d, 0xeb, 0xa2, 0x2d, 0x7e, 0x42, 0x68, 0xa3, 0x61, 0x0f, 0x26, 0x71, 0x25,
	0x75, 0x08, 0xb7, 0x4c, 0x8a, 0x76, 0x9e, 0xf1, 0x0a, 0xc3, 0xc0, 0x7f, 0x1e, 0x18, 0x1d, 0x38,
	0x1d, 0x1f, 0x44, 0xd1, 0x22, 0x25, 0x58, 0x97, 0x5c, 0x84, 0x70, 0x0b, 0xd0, 0xc2, 0x15, 0xe8,
	0xd6, 0x13, 0x1b, 0xa0, 0xde, 0x5c, 0xf9, 0xcb, 0x89, 0xd5, 0x40, 0xa9, 0xe0, 0x0b, 0x45, 0x6d,
	0x30, 0xe9, 0xf3, 0xa8, 0xf8, 0x89, 0x52, 0x72, 0xe1, 0x5c, 0xb9, 0x03, 0xee, 0x5f, 0x16, 0x90,
	0x0e, 0x17, 0x4f, 0x6a, 0x11, 0x7e, 0x16, 0xbe, 0xb7, 0x26, 0x36, 0x63, 0x1b, 0x82, 0x42, 0x3a,
	0x1c, 0x39, 0x03, 0xa5, 0xcc, 0x20, 0x78, 0x58, 0x04, 0x9d, 0xfa, 0xbc, 0x48, 0xe1, 0x4a, 0xbb,
	0x40, 0x04, 0x43, 0xe3, 0xf2, 0xef, 0xc4, 0x96, 0xdf, 0xe8, 0xf8, 0xb4, 0xa3, 0x49, 0x5b, 0x7e,
	0x60, 0x4f, 0x58, 0x17, 0x72, 0x96, 0x80, 0x62, 0x0d, 0x98, 0x03, 0x7d, 0x1b, 0x0c, 0xad, 0x89,
	0xe7, 0xb0, 0x68, 0x6f, 0x0c, 0x86, 0x6d, 0xb0, 0x22, 0x9f, 0x11, 0x9b, 0x20, 0x33, 0x96, 0xef,
	0x82, 0x44, 0xfb, 0x76, 0x7f, 0xc4, 0x7c, 0x66, 0x01, 0x6c, 0x29, 0x0c, 0xe4, 0x2b, 0x83, 0x44,
	0x1d, 0xb9, 0xb9, 0xa4, 0xf5, 0x99, 0x87, 0x07, 0x31, 0x46, 0x22, 0x1b, 0x6f, 0x0a, 0x20, 0xe6,
	0x32, 0x08, 0xc1, 0x7a, 0x07, 0x16, 0x15, 0x54, 0x7f, 0x96, 0x79, 0x5e, 0x6d, 0x93, 0x28, 0x70,
	0xf5, 0x3c, 0x7b, 0xec, 0xd8, 0x6c, 0x3c, 0x64, 0x01, 0x8d, 0x8a, 0x37, 0xea, 0xc1, 0xfe, 0x2b,
	0x3b, 0xa1, 0x8a, 0xfa, 0x6b, 0x42, 0x78, 0x23, 0x7b, 0xec, 0xbb, 0xb8, 0x81, 0x07, 0x82, 0x2a,
	0x23, 0x88, 0xfe, 0xa6, 0x58, 0xeb, 0x3d, 0x1b, 0x1f, 0x64, 0x88, 0xd9, 0x1b, 0xb1, 0x81, 0xab,
	0x93, 0xce, 0xb3, 0x6b, 0x14, 0x6e, 0xb0, 0x19, 0x26, 0x52, 0xd1, 0x30, 0xc0, 0xae, 0x03, 0xc3,
	0x64, 0x79, 0x18, 0x59, 0x44, 0x5b, 0xe8, 0x75, 0x9f, 0x59, 0xac, 0x02, 0x9b, 0x54, 0x99, 0x06,
	0xa4, 0x4c, 0x40, 0x44, 0x3b, 0x72, 0xcb, 0xb5, 0xe3, 0x8f, 0x57, 0x44, 0x36, 0x3a, 0x2e, 0xae,
	0xbc, 0x03, 0x6b, 0x64, 0x0f, 0x3a, 0x8e, 0x75, 0xd9, 0xb3, 0xaf, 0x78, 0xe7, 0xb3, 0x0a, 0x3c,
	0x02, 0x0c, 0xb7, 0x13, 0xf7, 0x5e, 0x99, 0x73, 0x10, 0x0c, 0x2c, 0x82, 0x60, 0xbc, 0x2b, 0x36,
	0x7b, 0xd0, 0x9b, 0x15, 0x48, 0x87, 0x54, 0xce, 0x39, 0xf3, 0x54, 0x22, 0x92, 0x41, 0x7a, 0x2e,
	0xe8, 0x37, 0x45, 0xca, 0x3d, 0x1e, 0x0e, 0xbb, 0x60, 0xce, 0x59, 0x1e, 0x82, 0x72, 0x64, 0x4a,
	0x1b, 0xcb, 0xa7, 0xf4, 0x6b, 0x6b, 0x3c, 0x25, 0x23, 0x14, 0x3e, 0xc5, 0xed, 0x4a, 0x8c, 0x5b,
	0xa8, 0x18, 0xb9, 0x1d, 0x6b, 0x32, 0xee, 0xa9, 0x69, 0x40, 0xb1, 0x3d, 0xee, 0xe9, 0x37, 0xa4,
	0x7c, 0x77, 0x1d, 0xaf, 0xc3, 0x86, 0x18, 0xc5, 0xb7, 0x04, 0x45, 0x5c, 0x9f, 0xae, 0x3d, 0x7c,
	0x3a, 0xe9, 0x3c, 0x71, 0x50, 0xcb, 0x15, 0x9f, 0xd9, 0x10, 0x84, 0x8e, 0x1f, 0x8a, 0xf5, 0xae,
	0xed, 0xdb, 0xcc, 0xe9, 0x6b, 0x31, 0x4e, 0x8f, 0x1b, 0x67, 0x8d, 0x31, 0xc8, 0xb0, 0x9c, 0x17,
	0x2e, 0x01, 0xd1, 0xea, 0xb7, 0x45, 0x1a, 0x46, 0x67, 0x3b, 0x9f, 0x90, 0x1b, 0x1a, 0x00, 0xfa,
	0xff, 0x13, 0x39, 0xc5, 0x11, 0x93, 0x48, 0xaf, 0xb5, 0xc9, 0x7c, 0x31, 0xd9, 0xa7, 0x45, 0x76,
	0xec, 0x74, 0x86, 0xfd, 0x3e, 0x2c, 0x04, 0x32, 0x27, 0x85, 0x36, 0x13, 0x60, 0xc0, 0x1b, 0x90,
	0xa0, 0x60, 0x5f, 0x3d, 0x75, 0x25, 0xff, 0x52, 0x7e, 0x33, 0x01, 0x06, 0x24, 0xb7, 0x44, 0x1a,
	0x07, 0xf3, 0xfc, 0xeb, 0x9e, 0x43, 0x22, 0xbc, 0x66, 0xe2, 0x7a, 0x34, 0xb1, 0xac, 0x2a, 0x41,
	0x9c, 0xa1, 0x32, 0x23, 0x37, 0x09, 0x80, 0x16, 0x96, 0xf5, 0xbb, 0x22, 0xd3, 0x73, 0x2e, 0xa1,
	0x29, 0x0c, 0x38, 0x90, 0x42, 0x0b, 0x66, 0x1b, 0xa1, 0x26, 0x21, 0x85, 0xaf, 0xac, 0x88, 0x74,
	0x30, 0x73, 0x94, 0xef, 0x2b, 0x2c, 0x04, 0xd1, 0x82, 0x2a, 0xe2, 0x6a, 0xe0, 0x67, 0x67, 0x38,
	0x19, 0x28, 0xeb, 0x1f, 0x02, 0x28, 0x27, 0x58, 0x20, 0x63, 0x28, 0xf7, 0x27, 0x28, 0x93, 0xeb,
	0x80, 0x6f, 0x4b, 0xed, 0xac, 0xdc, 0x1f, 0x81, 0x58, 0x83, 0x76, 0xb7, 0xf0, 0x8d, 0xa4, 0x48,
	0x2a, 0xd9, 0x08, 0xfd, 0xfd, 0x4a, 0xc4, 0xdf, 0x13, 0x8c, 0x22, 0xac, 0xe4, 0x7b, 0x03, 0x0d,
	0x59, 0x37, 0x3e, 0xf7, 0xb5, 0xd9, 0xb9, 0xf3, 0x1e, 0x83, 0x18, 0xfa, 0x6a, 0x5c, 0x80, 0x8a,
	0x12, 0x41, 0xce, 0x90, 0x00, 0xec, 0x2f, 0x19, 0x36, 0xb2, 0x69, 0x9b, 0x44, 0x71, 0xe8, 0x90,
	0x59, 0x53, 0x14, 0xb8, 0x79, 0x44, 0x91, 0x08, 0x28, 0xca, 0x83, 0x2e, 0x51, 0x80, 0xf7, 0x02,
	0x63, 0x39, 0xb6, 0x2e, 0xdd, 0x81, 0x0b, 0x91, 0x1a, 0x51, 0x25, 0x89, 0x2a, 0x87, 0xf8, 0x11,
	0xc1, 0x44, 0xf9, 0xb3, 0x02, 0x3d, 0x49, 0x97, 0xac, 0x8e, 0xd4, 0xc5, 0x14, 0x49, 0xe3, 0xc1,
	0xb4, 0xa5, 0x06, 0xf6, 0xba, 0x24, 0x87, 0x9b, 0x01, 0x7d, 0xd4, 0x66, 0xe3, 0x1a, 0x4a, 0x19,
	0xc1, 0x25, 0x41, 0xed, 0x78, 0x47, 0xa4, 0x2f, 0x7b, 0xc3, 0x0f, 0xa5, 0x67, 0x16, 0xf3, 0x3b,
	0x3d, 0x02, 0x02, 0xea, 0x34, 0x85, 0xa4, 0xe4, 0xb1, 0x63, 0x52, 0x95, 0x99, 0x92, 0xaa, 0x88,
	0x2a, 0x66, 0x63, 0xaa, 0x08, 0xfa, 0x86, 0x15, 0xa1, 0x27, 0xd8, 0x94, 0x9e, 0x00, 0xc0, 0xd0,
	0x13, 0x80, 0x3c, 0x78, 0x4f, 0x86, 0x1f, 0x92, 0xbd, 0xca, 0xc9, 0x9e, 0x55, 0x19, 0x25, 0x89,
	0xf6, 0xcb, 0x05, 0xce, 0x0e, 0xf2, 0x52, 0xaf, 0x02, 0x00, 0x25, 0xf0, 0xe9, 0xa4, 0x3f, 0xc2,
	0x71, 0x35, 0xa9, 0xe8, 0x5c, 0xc4, 0x76, 0x3d, 0xb7, 0xef, 0xfa, 0xe4, 0x9a, 0xb7, 0x64, 0xbb,
	0x00, 0xc0, 0x11, 0xa9, 0x80, 0x1e, 0x4d, 0x97, 0x82, 0xa0, 0xca, 0x18, 0xae, 0xc1, 0x5e, 0x60,
	0xcd, 0xb6, 0x9c, 0x8a, 0x2c, 0xe9, 0x9f, 0x05, 0xe3, 0x88, 0x34, 0x17, 0x13, 0x0f, 0x9c, 0xac,
	0xe7, 0x1d, 0xec, 0x48, 0x15, 0x8e, 0x81, 0x51, 0x6b, 0xb5, 0x2b, 0x5d, 0x25, 0x5b, 0x2b, 0x18,
	0x12, 0x5c, 0x4f, 0x8f, 0xe6, 0xb1, 0x4f, 0x5b, 0x1e, 0x94, 0x71, 0x48, 0x0c, 0x47, 0x26, 0xde,
	0xc1, 0x01, 0xd5, 0x70, 0x89, 0xac, 0x39, 0x59, 0x45, 0x10, 0x18, 0xa7, 0xd7, 0xf5, 0x0e, 0x6e,
	0xc0, 0x76, 0xa1, 0x35, 0x27, 0xf0, 0x88, 0xb0, 0x20, 0x08, 0xbf, 0x49, 0x4d, 0x83, 0x20, 0x1c,
	0x4c, 0x8a, 0x85, 0x86, 0xe6, 0x56, 0x10, 0x73, 0x9e, 0xdb, 0xbd, 0x59, 0xfb, 0x77, 0x7b, 0x89,
	0xfd, 0xbb, 0xf3, 0x09, 0xec, 0x5f, 0x68, 0xdf, 0x5f, 0x5b, 0x6e, 0xdf, 0x7f, 0x61, 0x5d, 0x64,
	0x22, 0x12, 0x46, 0xe7, 0x05, 0x14, 0xc7, 0xc0, 0x88, 0x24, 0xb0, 0x28, 0xcd, 0x7b, 0xc7, 0x1e,
	0x58, 0x10, 0x34, 0xb2, 0x05, 0x49, 0x40, 0xf1, 0x18, 0x82, 0xef, 0x59, 0xd5, 0x58, 0xfb, 0x64,
	0xaa, 0x01, 0xa2, 0x8c, 0xf2, 0x15, 0x0d, 0xdb, 0x48, 0xe0, 0x5a, 0x2c, 0x1a, 0xc8, 0x00, 0x19,
	0x27, 0x19, 0x98, 0x07, 0x65, 0xfd, 0x6d, 0x50, 0x1d, 0x38, 0xcc, 0x90, 0x95, 0x03, 0xed, 0xc6,
	0x41, 0xf7, 0xe2, 0xab, 0x13, 0xac, 0x4a, 0x48, 0x08, 0x81, 0x68, 0xd2, 0x1f, 0xca, 0x36, 0xc9,
	0xa5, 0x6d, 0x14, 0x19, 0x0a, 0xaf, 0x6b, 0x50, 0x0c, 0x59, 0x51, 0x4e, 0x20, 0x04, 0x62, 0x6e,
	0x36, 0x3d, 0xe5, 0x66, 0xdf, 0x16, 0x29, 0x9a, 0xab, 0x09, 0x67, 0x10, 0xb1, 0x78, 0x55, 0xb0,
	0xde, 0x0c, 0x28, 0x51, 0xfe, 0x9a, 0xce, 0xd8, 0x05, 0x69, 0x91, 0x1e, 0x01, 0xce, 0x80, 0x58,
	0xc2, 0x91, 0x30, 0xf0, 0xa5, 0x75, 0x42, 0xbd, 0xde, 0x30, 0x83, 0x32, 0x44, 0x4a, 0x99, 0xd1,
	0xe4, 0xc2, 0xea, 0x4c, 0xc6, 0x24, 0x66, 0x9b, 0x7c, 0x9e, 0x9b, 0x5c, 0x14, 0x27, 0x63, 0x94,
	0x34, 0xae, 0x1f, 0x5e, 0x3c, 0xa5, 0xfa, 0x5c, 0x50, 0x5f, 0xbf, 0x78, 0x0a, 0xf5, 0x85, 0x9f,
	0x27, 0x31, 0x50, 0x5b, 0x84, 0x7e, 0xcd, 0xf5, 0xac, 0x0f, 0x26, 0xa0, 0x11, 0x20, 0xeb, 0x52,
	0x16, 0x52, 0x66, 0xc6, 0xf5, 0xde, 0x53, 0x10, 0x09, 0x04, 0x8f, 0xa6, 0x04, 0x42, 0x0e, 0x85,
	0x81, 0x2e, 0x0f, 0xc3, 0xe1, 0xe9, 0x90, 0xc6, 0xc0, 0x8d, 0x9e, 0x40, 0x24, 0x6f, 0xd1, 0x66,
	0x72, 0x44, 0x82, 0x40, 0x0d, 0xca, 0x85, 0xaf, 0x6e, 0x88, 0x5c, 0xb1, 0xe7, 0x82, 0x69, 0xaf,
	0x0e, 0x21, 0xa4, 0xc6, 0x23, 0xcf, 0xc2, 0x88, 0x19, 0xc2, 0xed, 0xab, 0xc0, 0x9b, 0xe0, 0x27,
	0x76, 0xdd, 0x75, 0x9e, 0xbb, 0x10, 0x66, 0xb9, 0x5d, 0xe5, 0x4b, 0x24, 0x00, 0xe4, 0x10, 0xda,
	0x72, 0x65, 0x20, 0x62, 0xb9, 0xa9, 0x8d, 0x28, 0x95, 0xcf, 0x2b, 0xc5, 0xb2, 0xd5, 0x7a, 0xdc,
	0x28, 0x9b, 0x42, 0x12, 0x93, 0xf8, 0x81, 0x36, 0x83, 0x76, 0xb9, 0x2c, 0x7a, 0xf4, 0x0d, 0x02,
	0x94, 0x1a, 0xc0, 0x71, 0x8a, 0xfa, 0x4a, 0x50, 0x5f, 0xbb, 0xb1, 0xbe, 0x6a, 0xe5, 0x96, 0xec,
	0x28, 0x09, 0x64, 0x61, 0x2f, 0x9e, 0xab, 0xce, 0xc6, 0xf8, 0x8d, 0x1c, 0x77, 0x68, 0xba, 0x78,
	0x34, 0x97, 0x42, 0x95, 0x92, 0x00, 0x1c, 0xce, 0xe7, 0x1f, 0x9c, 0x71, 0x57, 0xec, 0x0e, 0x1d,
	0xd9, 0xfd, 0xe1, 0x33, 0x47, 0x05, 0xc4, 0x19, 0x89, 0xb5, 0x10, 0x42, 0x13, 0x0c, 0x45, 0xe2,
	0x2d, 0xa3, 0x62, 0x2d, 0x2a, 0xe2, 0xa2, 0xc1, 0x62, 0xb3, 0x43, 0xc0, 0x4f, 0x64, 0xcb, 0x7b,
	0xe6, 0x5c, 0x73, 0xc0, 0x4b, 0xdf, 0xfa, 0xb6, 0xd8, 0x18, 0x59, 0x48, 0x97, 0x93, 0xe0, 0xa8,
	0x0d, 0x84, 0xc0, 0xce, 0xc8, 0x22, 0x52, 0x69, 0xf2, 0x37, 0x46, 0x4d, 0xa4, 0x85, 0x29, 0x8c,
	0xfc, 0xb7, 0x99, 0x17, 0x69, 0xf0, 0x53, 0x00, 0x48, 0x46, 0x0a, 0x62, 0xb3, 0x52, 0x2e, 0x59,
	0xd5, 0xfa, 0xb1, 0x55, 0xa9, 0x1d, 0xd5, 0x1f, 0xb2, 0xd5, 0xcf, 0xb8, 0xe5, 0x12, 0x60, 0x04,
	0x85, 0xc7, 0x01, 0x7d, 0xc1, 0x71, 0x60, 0x7b, 0xd9, 0x71, 0x60, 0x67, 0xe6, 0x38, 0x10, 0x89,
	0xf0, 0x77, 0xe3, 0x11, 0x7e, 0x68, 0x0f, 0xf7, 0x96, 0xdb, 0xc3, 0xef, 0xae, 0x08, 0x5d, 0x8a,
	0xe1, 0x89, 0x03, 0xfd, 0x5e, 0x38, 0xb6, 0xbf, 0x54, 0x14, 0x63, 0x82, 0xb7, 0x3a, 0x25, 0x78,
	0x2c, 0xa7, 0x28, 0x8f, 0xeb, 0x52, 0x4e, 0xc3, 0x8d, 0x5d, 0x8f, 0x6e, 0x6c, 0xb0, 0x10, 0x1b,
	0x0b, 0x16, 0x22, 0xb1, 0x6c, 0x21, 0x92, 0x33, 0x0b, 0x11, 0x4e, 0x37, 0xb5, 0x7c, 0xba, 0xef,
	0x8a, 0xb4, 0x81, 0x51, 0x03, 0xf9, 0xb7, 0x65, 0xa1, 0xbd, 0xf2, 0x5f, 0xab, 0x51, 0xff, 0x55,
	0xf8, 0x95, 0xa4, 0xd8, 0x96, 0xab, 0x05, 0x9e, 0x00, 0x3a, 0x92, 0xe7, 0x9e, 0xff, 0xd3, 0xdc,
	0x19, 0xcd, 0xdd, 0x12, 0xeb, 0x10, 0xa7, 0x3e, 0x63, 0x8d, 0x5d, 0xbb, 0x6a, 0x3d, 0x0b, 0xf7,
	0x3c, 0xb3, 0x60, 0xcf, 0xb3, 0xcb, 0xf6, 0x7c, 0x73, 0x99, 0xf0, 0xe7, 0xe2, 0xc2, 0x3f, 0x6d,
	0x36, 0xf2, 0x4b, 0xcd, 0x86, 0x36, 0xd7, 0x6c, 0x6c, 0xcd, 0x9a, 0x0d, 0x7d, 0x9e, 0xd9, 0xd8,
	0x9e, 0x6b, 0x36, 0x76, 0x16, 0x9a, 0x8d, 0xdd, 0x29, 0xb3, 0x11, 0xde, 0xce, 0xed, 0xc5, 0x6e,
	0xe7, 0xe0, 0x3c, 0xe0, 0x8f, 0xdd, 0x2b, 0x08, 0xd6, 0x89, 0xc9, 0x7d, 0x52, 0x29, 0x21, 0x21,
	0xda, 0xa9, 0xff, 0x2f, 0x72, 0x57, 0xe0, 0x47, 0x60, 0xb9, 0xd5, 0x05, 0xe5, 0x01, 0x75, 0x30,
	0x85, 0xe2, 0x6d, 0x0b, 0x9e, 0xfb, 0x2c, 0xe8, 0x97, 0xe2, 0xb7, 0xe9, 0x0b, 0x0b, 0x3c, 0xff,
	0x9d, 0x75, 0xdf, 0x31, 0x93, 0x5d, 0xf9, 0x81, 0xde, 0xbf, 0x23, 0x2f, 0x31, 0x60, 0x65, 0x6f,
	0x42, 0x0b, 0xf0, 0x9b, 0x01, 0x80, 0xfc, 0xa2, 0x92, 0x40, 0xd5, 0x2d, 0xaa, 0xe2, 0xd2, 0xd4,
	0x95, 0xc2, 0xed, 0xe9, 0x2b, 0x85, 0x77, 0x84, 0x90, 0xe1, 0x3b, 0x85, 0x99, 0x77, 0xe6, 0xc4,
	0x21, 0x81, 0x5a, 0x9a, 0x69, 0x3b, 0xd0, 0xd0, 0x57, 0x0e, 0xeb, 0xde, 0x15, 0x49, 0x9e, 0xc8,
	0x62, 0xad, 0xbe, 0x11, 0x59, 0x09, 0xa9, 0x90, 0x6a, 0xce, 0x85, 0xbf, 0x4d, 0x28, 0x2b, 0x68,
	0xf8, 0xd8, 0x1f, 0x30, 0x83, 0x6a, 0x0d, 0x22, 0x08, 0x8b, 0x79, 0xce, 0xeb, 0xbb, 0xc2, 0x67,
	0xb2, 0x00, 0x01, 0x9b, 0x9f, 0xf5, 0x20, 0x72, 0x51, 0x3a, 0xc8, 0xbd, 0xc6, 0x30, 0x38, 0x95,
	0x65, 0x28, 0x76, 0x7a, 0xee, 0xfa, 0xd7, 0x95, 0x2e, 0x47, 0x08, 0x51, 0x48, 0x7f, 0x20, 0x74,
	0xd5, 0xa2, 0xe4, 0xa0, 0x7c, 0xf7, 0xc3, 0x13, 0xe0, 0x9c, 0x1a, 0xba, 0xb8, 0x1d, 0x8d, 0xf8,
	0x12, 0x5b, 0x6a, 0x9c, 0xdc, 0x18, 0xb4, 0x39, 0x81, 0xed, 0xe4, 0xd2, 0x8c, 0x32, 0x24, 0x97,
	0x2a, 0x43, 0x6a, 0xae, 0x32, 0xa4, 0x67, 0x95, 0x41, 0xcc, 0x53, 0x86, 0xcc, 0x5c, 0x65, 0xc8,
	0x2e, 0x54, 0x86, 0xcd, 0x8f, 0xf3, 0xa1, 0xb9, 0x59, 0x1f, 0x0a, 0xcc, 0xba, 0x14, 0xbd, 0x77,
	0x49, 0xaf, 0xe1, 0xd4, 0xcf, 0xc5, 0xc0, 0xe6, 0x68, 0x71, 0x9b, 0x63, 0xa0, 0xcd, 0xd9, 0x62,
	0x9b, 0x63, 0x28, 0x9b, 0xd3, 0x00, 0x23, 0x03, 0x5d, 0xe8, 0x6c, 0x39, 0x64, 0x91, 0x6c, 0x4e,
	0x23, 0xb0, 0x39, 0xdb, 0x6c, 0x73, 0x1a, 0x31, 0x9b, 0x63, 0x82, 0x91, 0x81, 0x96, 0x3b, 0xdc,
	0x52, 0x16, 0x51, 0xb8, 0x46, 0xf6, 0xb5, 0xf5, 0x72, 0x38, 0x70, 0x94, 0x2f, 0x86, 0xf2, 0x97,
	0xa1, 0x48, 0x53, 0x86, 0x2a, 0x39, 0xe5, 0x3d, 0x9e, 0xb2, 0x7d, 0x2d, 0xa7, 0x3c, 0xab, 0xc6,
	0xfb, 0x73, 0xd5, 0x18, 0xcf, 0x68, 0xc5, 0x12, 0x2e, 0xe7, 0x01, 0xc7, 0xc8, 0x54, 0x42, 0xf1,
	0xf2, 0x40, 0x1c, 0xdd, 0xcb, 0xeb, 0xe2, 0xb0, 0xeb, 0x80, 0x86, 0xd3, 0x82, 0x45, 0x20, 0xe2,
	0xb9, 0x0d, 0x11, 0x75, 0xa5, 0x41, 0x67, 0x34, 0xe4, 0x59, 0x16, 0xe3, 0x67, 0xea, 0x5b, 0x53,
	0x67, 0xea, 0xcf, 0x09, 0x1d, 0xb9, 0xee, 0x0d, 0x41, 0x21, 0xc6, 0xd7, 0x96, 0x0c, 0xc9, 0x59,
	0xb1, 0x35, 0xa8, 0xa9, 0xca, 0x0a, 0x19, 0xb8, 0x47, 0x14, 0xf5, 0xce, 0x72, 0x45, 0xfd, 0x9c,
	0xd8, 0x0a, 0x44, 0x1f, 0xd4, 0x72, 0xdc, 0x67, 0xf7, 0xe9, 0xf9, 0x63, 0xeb, 0xc2, 0x7d, 0xa9,
	0x54, 0x16, 0x8a, 0x87, 0xee, 0xcb, 0xc2, 0x0f, 0x92, 0xb3, 0x7a, 0x09, 0x07, 0x06, 0x90, 0x69,
	0x3c, 0x14, 0x99, 0xe0, 0xdb, 0x5c, 0x33, 0x48, 0x8d, 0x64, 0x18, 0xab, 0xc0, 0x7f, 0x94, 0xc4,
	0x3b, 0x0b, 0xf2, 0x24, 0x8a, 0xa4, 0x89, 0x69, 0x82, 0x2f, 0x88, 0x9d, 0xa0, 0x17, 0xa3, 0xe7,
	0x8c, 0x7d, 0x3e, 0x84, 0x48, 0x15, 0xdd, 0x56, 0xbd, 0x45, 0xaa, 0xf4, 0x9f, 0x12, 0xbb, 0x41,
	0xaf, 0x10, 0xb6, 0x4b, 0xb4, 0x06, 0x67, 0x75, 0xa9, 0xad, 0xaa, 0xbf, 0x66, 0xb4, 0x4e, 0xff,
	0x69, 0xb1, 0xdf, 0x1f, 0x76, 0xb1, 0xcd, 0xc5, 0x89, 0x0d, 0xfa, 0x0c, 0x47, 0x67, 0xdb, 0xed,
	0x55, 0x7c, 0xa7, 0xcf, 0x17, 0xd3, 0x7b, 0xb2, 0xfa, 0x70, 0xaa, 0x16, 0x7d, 0x00, 0x37, 0xa4,
	0x59, 0xca, 0xc4, 0x94, 0x90, 0x10, 0x4d, 0x32, 0x24, 0xa0, 0x39, 0x72, 0x5c, 0x24, 0x21, 0x9a,
	0xe2, 0x4f, 0x0a, 0x5d, 0xf5, 0x10, 0xb1, 0x41, 0x29, 0xea, 0x68, 0x8b, 0x3b, 0x8a, 0x58, 0xa2,
	0x77, 0xc4, 0x9e, 0x22, 0x6f, 0xd8, 0x9d, 0x67, 0xf6, 0x95, 0x73, 0x3c, 0x1e, 0x4e, 0x46, 0x7c,
	0xd0, 0x5b, 0x33, 0x77, 0xb9, 0x49, 0xbc, 0x52, 0x7f, 0x53, 0x6c, 0x4d, 0x35, 0x83, 0x16, 0xf2,
	0xe6, 0x4f, 0x8b, 0xb7, 0x00, 0x62, 0x58, 0xf5, 0x19, 0xe2, 0x22, 0xd8, 0x3b, 0x79, 0xa7, 0xb3,
	0x3d, 0x4d, 0x0f, 0x55, 0xe0, 0xc2, 0xb6, 0xd5, 0x34, 0x19, 0xc7, 0x13, 0x14, 0xdb, 0x15, 0x9e,
	0x60, 0x33, 0x52, 0x13, 0x9d, 0xb6, 0x82, 0x61, 0x8f, 0x36, 0x63, 0xd3, 0x0e, 0x2b, 0x22, 0x1b,
	0xa4, 0xfa, 0x37, 0x1d, 0xbb, 0x77, 0xa4, 0xee, 0x83, 0xb2, 0x6a, 0x83, 0x9a, 0x53, 0xb5, 0x91,
	0xb9, 0xa8, 0x86, 0x52, 0x45, 0x65, 0xc0, 0xb1, 0x1d, 0x6f, 0x25, 0xf5, 0xf5, 0x75, 0x91, 0xe7,
	0x26, 0x74, 0x25, 0x57, 0x1b, 0x7e, 0xc8, 0xf6, 0x2a, 0x27, 0xe1, 0x12, 0xa3, 0x7a, 0x51, 0xdc,
	0x99, 0xea, 0xbb, 0x8a, 0x37, 0x3d, 0xc5, 0x27, 0x4e, 0xe7, 0x19, 0xa9, 0xba, 0x34, 0x69, 0xb7,
	0xe3, 0x83, 0xc4, 0x69, 0x54, 0xea, 0x50, 0x0f, 0x53, 0x87, 0x80, 0x60, 0x3e, 0x4d, 0x9a, 0x36,
	0xfc, 0x04, 0x99, 0x4e, 0x63, 0xb6, 0x4c, 0xde, 0x10, 0xec, 0x2c, 0xbd, 0x21, 0x48, 0x01, 0x21,
	0x95, 0xf4, 0x77, 0x45, 0xce, 0x79, 0x41, 0xb7, 0xbe, 0x0e, 0xb7, 0xdc, 0x5d, 0xda, 0x72, 0x53,
	0x51, 0xcb, 0xe6, 0xaf, 0x7c, 0x3c, 0xf9, 0xa2, 0x10, 0x95, 0x52, 0xa5, 0x51, 0x3c, 0x2b, 0xa1,
	0x9d, 0x40, 0x23, 0x28, 0x75, 0x74, 0x85, 0xae, 0x03, 0xd4, 0x45, 0x01, 0x4d, 0xf3, 0x03, 0x15,
	0x65, 0xc3, 0x67, 0xa1, 0x25, 0xb2, 0xd8, 0xee, 0xd0, 0xf6, 0x3b, 0x4f, 0xd8, 0xc2, 0x00, 0x4c,
	0x29, 0x24, 0x6e, 0x0a, 0x45, 0xdc, 0xfb, 0x37, 0x31, 0x63, 0xfa, 0x81, 0xc7, 0x89, 0xa8, 0xfd,
	0x18, 0x1f, 0xe1, 0xc8, 0x26, 0x11, 0x45, 0xb9, 0x91, 0xd7, 0x16, 0x0b, 0xb9, 0xf1, 0x46, 0x01,
	0x37, 0xde, 0x28, 0xce, 0x0d, 0xb4, 0x44, 0x6e, 0xbc, 0x51, 0x8c, 0x1b, 0x6f, 0xa4, 0xb8, 0xf1,
	0x46, 0xcb, 0xb9, 0xf1, 0x46, 0x26, 0x11, 0x15, 0x26, 0x42, 0x9c, 0xba, 0x9d, 0x67, 0xc3, 0xc9,
	0xf2, 0x23, 0x48, 0x10, 0x77, 0xaf, 0x2e, 0x88, 0xbb, 0xd7, 0x96, 0xc5, 0xdd, 0xeb, 0xd3, 0x71,
	0x77, 0xe1, 0xd7, 0x57, 0x84, 0x26, 0x6d, 0xf2, 0xff, 0xc2, 0xe8, 0xaf, 0x9e, 0xc8, 0xf9, 0xbc,
	0xd8, 0x69, 0x38, 0xce, 0x6c, 0x26, 0x7b, 0x11, 0xa7, 0x05, 0x43, 0xe4, 0x40, 0xb1, 0xbb, 0xad,
	0x8e, 0x3d, 0xea, 0x41, 0x14, 0xba, 0x6c, 0x52, 0xb0, 0xf3, 0x7c, 0x23, 0x8a, 0x1b, 0x05, 0xdb,
	0x27, 0x4b, 0x85, 0x6e, 0xbc, 0x0b, 0xb9, 0xd3, 0x9f, 0xa8, 0x0b, 0xf2, 0x5b, 0xf4, 0x65, 0xc9,
	0x87, 0x01, 0x6b, 0x74, 0xe5, 0x9a, 0x91, 0xd8, 0x39, 0x3d, 0x0f, 0x70, 0x44, 0xfe, 0xd1, 0xd8,
	0xf5, 0x9d, 0x1f, 0x81, 0xd3, 0x57, 0x19, 0xe6, 0x77, 0x12, 0x22, 0x21, 0x33, 0xd7, 0x98, 0x3f,
	0xa2, 0x8b, 0xac, 0xf0, 0x1e, 0x7d, 0x85, 0xce, 0x23, 0x9b, 0x88, 0x86, 0x17, 0xe9, 0x9f, 0x11,
	0x04, 0x58, 0xf2, 0x70, 0xe8, 0x4a, 0x15, 0x58, 0x37, 0xb3, 0x08, 0x16, 0x19, 0xc3, 0x8b, 0x39,
	0xf4, 0xf5, 0x8a, 0xdd, 0x35, 0x3e, 0x29, 0xf8, 0xe3, 0xba, 0xe4, 0xf8, 0xae, 0xac, 0x1f, 0x3d,
	0x81, 0xd0, 0x29, 0xb8, 0x36, 0x10, 0x00, 0x35, 0x24, 0x82, 0x04, 0x34, 0x0a, 0x18, 0xbe, 0x49,
	0x4f, 0x5e, 0x92, 0xc2, 0xc9, 0x08, 0xa1, 0x33, 0x42, 0x20, 0xa4, 0xca, 0x4b, 0x36, 0xe4, 0xa1,
	0x45, 0xbd, 0xe9, 0x60, 0x76, 0x39, 0x41, 0x2b, 0xaf, 0x32, 0xe4, 0xac, 0x30, 0xf0, 0x4d, 0x12,
	0x05, 0x5d, 0xcf, 0x51, 0xd8, 0x8e, 0x97, 0xb4, 0xc0, 0x86, 0x0c, 0xb4, 0xf9, 0xd0, 0x0b, 0x80,
	0x41, 0xb1, 0x36, 0xac, 0x07, 0x56, 0xc2, 0xf1, 0x46, 0x05, 0x6d, 0x32, 0x42, 0xde, 0x04, 0xb4,
	0x19, 0x80, 0x01, 0xa7, 0x43, 0x8f, 0x86, 0x10, 0x21, 0xa7, 0x75, 0x4f, 0x5d, 0x62, 0x12, 0x01,
	0x67, 0x8b, 0x32, 0x44, 0x40, 0x4c, 0x19, 0x94, 0x31, 0xfa, 0x2c, 0xaf, 0x3b, 0x66, 0x15, 0xac,
	0xe0, 0x1a, 0x94, 0x57, 0xf4, 0x4b, 0x00, 0xf2, 0x09, 0x23, 0x8b, 0xdc, 0x10, 0x11, 0xa6, 0x22,
	0x36, 0x83, 0x25, 0x43, 0x12, 0xce, 0x48, 0xca, 0x15, 0xe9, 0xcb, 0xb3, 0xf2, 0xba, 0x99, 0xa4,
	0xa5, 0xe8, 0x53, 0xaa, 0x2c, 0x54, 0x37, 0x4e, 0x70, 0x84, 0xda, 0x36, 0x9d, 0x11, 0xd4, 0x3e,
	0x3e, 0x23, 0xb8, 0x35, 0x9b, 0x11, 0xbc, 0x21, 0x13, 0x6e, 0xf4, 0xf0, 0x86, 0x03, 0xee, 0x2b,
	0xbe, 0x30, 0x86, 0x63, 0xa3, 0xe4, 0x8c, 0x52, 0x75, 0xdb, 0xe1, 0x02, 0x14, 0x29, 0x55, 0xa7,
	0x18, 0xbf, 0x74, 0x1c, 0x0a, 0xb8, 0x99, 0xf1, 0x23, 0x87, 0x92, 0xfc, 0x9d, 0xc9, 0x78, 0xec,
	0x0c, 0x3a, 0xd7, 0x72, 0x69, 0x64, 0xd4, 0x9d, 0x55, 0x20, 0x2d, 0x4d, 0xe4, 0x8e, 0x60, 0x2f,
	0x7e, 0x47, 0x10, 0x8b, 0x7d, 0xf7, 0x67, 0xf3, 0x49, 0x2a, 0x29, 0x70, 0x10, 0x4b, 0x0a, 0x84,
	0xd6, 0xe7, 0xc6, 0x72, 0xeb, 0x73, 0x2a, 0xd2, 0x52, 0x77, 0xc0, 0x2d, 0x07, 0x72, 0x30, 0x76,
	0xbc, 0x49, 0xcf, 0x67, 0xdd, 0xa1, 0x79, 0x9b, 0x84, 0xd0, 0xe1, 0x19, 0x76, 0xd0, 0x19, 0x8f,
	0xc3, 0x27, 0x3d, 0x28, 0x7e, 0x65, 0x02, 0x0a, 0xff, 0xb2, 0x26, 0xb2, 0xcd, 0xd2, 0x69, 0x55,
	0x3d, 0x30, 0x09, 0xe4, 0x02, 0x9f, 0xa2, 0x84, 0x6f, 0x50, 0x58, 0x2e, 0x80, 0x4c, 0xbe, 0x27,
	0x01, 0x3d, 0x60, 0x29, 0xb5, 0x94, 0x98, 0xae, 0x46, 0xc5, 0x54, 0x9d, 0x62, 0x99, 0xee, 0x89,
	0x3d, 0xee, 0x7e, 0x08, 0xd6, 0x19, 0xc4, 0x95, 0xb5, 0x12, 0xe9, 0x4e, 0x18, 0xad, 0x7b, 0x8a,
	0x4b, 0x3e, 0x65, 0xae, 0xc7, 0x14, 0x97, 0x6f, 0x00, 0xa0, 0x1a, 0x13, 0x89, 0xee, 0x88, 0xcf,
	0xa6, 0x58, 0xdd, 0x26, 0x80, 0x72, 0x8f, 0x72, 0x11, 0xe8, 0x31, 0x4c, 0x70, 0x27, 0xb5, 0x6e,
	0xe6, 0xe4, 0x4a, 0x20, 0x4c, 0x9b, 0x06, 0xe1, 0xa4, 0xd4, 0xcb, 0x21, 0x04, 0x2c, 0x93, 0xf1,
	0xa0, 0x83, 0xd1, 0x8e, 0xd4, 0x4f, 0xea, 0xa2, 0x15, 0xc1, 0x95, 0xb9, 0xc0, 0x97, 0x4e, 0xf6,
	0x58, 0xbd, 0xb3, 0x40, 0x46, 0x4c, 0x89, 0x60, 0xc0, 0x45, 0xbd, 0x49, 0xe7, 0x4c, 0x29, 0xcf,
	0x74, 0x38, 0x6c, 0x33, 0x40, 0x63, 0x4a, 0x22, 0xe2, 0x4a, 0xf2, 0xe3, 0xbe, 0xba, 0x7a, 0xe5,
	0x07, 0x16, 0x35, 0x91, 0x6a, 0xc1, 0x7e, 0x96, 0x30, 0xc5, 0xc5, 0x33, 0xf5, 0xe4, 0x7d, 0x80,
	0xba, 0x8d, 0xc0, 0xad, 0x94, 0x08, 0x6a, 0x22, 0x12, 0xf8, 0x20, 0x15, 0x94, 0x3f, 0xe3, 0x23,
	0x0f, 0x60, 0x2d, 0x86, 0x0a, 0x49, 0xb1, 0x51, 0xee, 0x8f, 0xfc, 0xeb, 0xc2, 0xf7, 0x57, 0xc5,
	0x8d, 0xe3, 0xc6, 0xd9, 0x7b, 0x13, 0x38, 0xc2, 0x85, 0x09, 0x35, 0x75, 0x9d, 0x89, 0xf9, 0x73,
	0x79, 0xfc, 0x0c, 0x1c, 0x4a, 0x08, 0x60, 0x5a, 0xc6, 0xa6, 0x64, 0x50, 0x78, 0x03, 0xac, 0xca,
	0x68, 0xd1, 0x2c, 0x08, 0x09, 0x46, 0x13, 0xd0, 0xd9, 0xbe, 0xaf, 0xac, 0xbb, 0x44, 0x8e, 0xfa,
	0xbe, 0x3c, 0x26, 0x43, 0xcc, 0x38, 0x08, 0xce, 0x4c, 0xc9, 0x11, 0x47, 0xe1, 0x74, 0x4c, 0x86,
	0x2a, 0xcf, 0x7d, 0x19, 0xa4, 0xbe, 0x10, 0x68, 0x42, 0x19, 0x2b, 0xf1, 0x68, 0x1d, 0x8a, 0x0d,
	0x54, 0x22, 0x40, 0x02, 0x03, 0x4e, 0xee, 0xa5, 0xf4, 0x16, 0xf2, 0x04, 0xc4, 0xa5, 0xb8, 0x6d,
	0x4b, 0x4d, 0xdb, 0x36, 0x68, 0xc5, 0xa6, 0x81, 0x13, 0xd4, 0x6c, 0x19, 0xf8, 0xce, 0x43, 0xc4,
	0xee, 0x3c, 0x70, 0x63, 0x83, 0xeb, 0x0d, 0xf8, 0x8e, 0xdc, 0xdb, 0x65, 0x63, 0xf7, 0x76, 0xb3,
	0x4f, 0x2d, 0x36, 0xe7, 0x3c, 0xb5, 0x28, 0xfc, 0xc6, 0x8a, 0xc8, 0xc1, 0xfa, 0xd3, 0xaa, 0x97,
	0x1c, 0x1f, 0x4e, 0x7c, 0x24, 0x4e, 0x78, 0xec, 0xab, 0xa8, 0x25, 0x57, 0x45, 0x12, 0x27, 0xa2,
	0xa4, 0x63, 0xcf, 0x2a, 0x6f, 0x7c, 0x80, 0xe0, 0x3c, 0x65, 0xa9, 0xe1, 0x76, 0x02, 0x87, 0xaa,
	0x00, 0x6c, 0x4d, 0xa7, 0x20, 0xc7, 0x0f, 0x0f, 0xaa, 0x11, 0x24, 0xfe, 0x74, 0x64, 0x63, 0xea,
	0xe9, 0x48, 0xe1, 0x37, 0x13, 0x62, 0x6b, 0x26, 0xe9, 0x1a, 0xcb, 0x01, 0xae, 0x4c, 0xe5, 0x00,
	0x63, 0xd9, 0xc3, 0xd5, 0xe9, 0xec, 0x21, 0xf2, 0x2a, 0x0b, 0xb5, 0x61, 0xc0, 0xab, 0x02, 0xf0,
	0x36, 0xa3, 0x8b, 0xef, 0x19, 0xdc, 0x01, 0x46, 0x15, 0xcc, 0x6c, 0x14, 0xc2, 0xf6, 0x5d, 0xf5,
	0x9e, 0x41, 0x71, 0x1b, 0x00, 0x53, 0x2b, 0x95, 0x58, 0xbe, 0x52, 0xc9, 0xe9, 0x95, 0xc2, 0x80,
	0x1e, 0x26, 0xda, 0x51, 0xd7, 0x60, 0x5c, 0xa2, 0x5e, 0xf1, 0xcc, 0x27, 0xeb, 0xd2, 0xdc, 0x6b,
	0x80, 0xc0, 0x09, 0x2a, 0xd1, 0xa5, 0x3d, 0xe4, 0x9c, 0xe7, 0xad, 0xe9, 0x94, 0x75, 0x64, 0x9b,
	0x4d, 0x26, 0x0d, 0x59, 0x45, 0xa9, 0x60, 0xd1, 0x8a, 0x20, 0xf1, 0x6d, 0xc9, 0x4e, 0xbf, 0xe8,
	0xc1, 0xda, 0x31, 0x84, 0x3b, 0x1d, 0xb4, 0x3e, 0xfc, 0x80, 0x2b, 0x00, 0x50, 0x0b, 0x31, 0x55,
	0x79, 0x31, 0xb9, 0x26, 0x45, 0x93, 0x87, 0xd8, 0x34, 0x40, 0x87, 0x93, 0x6b, 0xdc, 0x72, 0xa8,
	0xef, 0xdb, 0x2f, 0x82, 0x7a, 0x76, 0xfb, 0x00, 0x71, 0xfd, 0x8c, 0x6f, 0xd5, 0xe6, 0xf8, 0xd6,
	0xe5, 0x4f, 0x1c, 0xf0, 0x5e, 0x2a, 0x98, 0xcc, 0x43, 0x76, 0xfb, 0x51, 0x88, 0xe4, 0xe4, 0xcc,
	0x1d, 0x90, 0xaf, 0xe2, 0xf3, 0x68, 0x08, 0xc8, 0x5a, 0xfb, 0x85, 0xac, 0xdd, 0x51, 0xb5, 0x0c,
	0xe0, 0xad, 0x19, 0x92, 0x16, 0xed, 0x91, 0x7d, 0xe1, 0xf6, 0x5c, 0xff, 0x9a, 0xbd, 0xff, 0x14,
	0x2a, 0xe9, 0xec, 0x17, 0x11, 0xba, 0x3d, 0x45, 0x17, 0x45, 0xc1, 0x39, 0xe5, 0x23, 0x7b, 0x44,
	0x3b, 0x22, 0xaf, 0xe1, 0xf2, 0x57, 0x71, 0x18, 0xf9, 0x3a, 0x06, 0x49, 0x02, 0x71, 0xa9, 0x74,
	0xf9, 0x2a, 0x8e, 0x4c, 0x23, 0x01, 0x85, 0x6f, 0xad, 0x2d, 0x34, 0xab, 0x73, 0x1f, 0xf2, 0xf2,
	0x69, 0x7c, 0x35, 0x3c, 0x8d, 0xe3, 0xf5, 0xa6, 0x47, 0x0f, 0xd0, 0xd4, 0xc9, 0x88, 0x8b, 0x52,
	0x37, 0x20, 0x34, 0x77, 0xbb, 0xe0, 0x0e, 0x22, 0xba, 0x11, 0x40, 0x33, 0xd1, 0xda, 0xc6, 0x6c,
	0xb4, 0x86, 0x52, 0x07, 0xee, 0xc2, 0x19, 0xb7, 0xdc, 0x88, 0x82, 0x04, 0x08, 0x3a, 0x71, 0x7a,
	0x3e, 0xdd, 0xb1, 0x3b, 0x4f, 0x1c, 0xa5, 0x21, 0x88, 0x14, 0x11, 0x08, 0x9e, 0x66, 0xa4, 0x3e,
	0xc1, 0xd3, 0x8c, 0xc8, 0xe3, 0x9c, 0xf4, 0xc2, 0x77, 0x72, 0x22, 0xfe, 0x4e, 0x2e, 0x7c, 0x41,
	0x95, 0x89, 0xbe, 0xa0, 0x8a, 0xc4, 0x65, 0x6c, 0x75, 0x39, 0x2e, 0x8b, 0x3e, 0xe1, 0xd9, 0xe2,
	0x60, 0x3d, 0xf2, 0x84, 0x27, 0x54, 0x24, 0xfd, 0xe3, 0x9f, 0xc6, 0x6d, 0xcf, 0xb3, 0xd7, 0xbf,
	0x9c, 0x10, 0x59, 0x98, 0x20, 0xe8, 0x47, 0xc3, 0xbe, 0x96, 0x2e, 0x52, 0x5c, 0x8d, 0xfa, 0x56,
	0xec, 0xf9, 0x57, 0x0a, 0x10, 0x83, 0xd2, 0x5f, 0x31, 0x07, 0xba, 0x3a, 0xed, 0x40, 0x0f, 0x44,
	0xca, 0x82, 0x93, 0xdb, 0x55, 0x78, 0xfe, 0x49, 0x60, 0xb1, 0x32, 0xe3, 0x3e, 0xd7, 0xa7, 0xdd,
	0x67, 0xe4, 0xa6, 0x7e, 0x23, 0x7e, 0x53, 0xff, 0x23, 0x5c, 0xff, 0xc7, 0xee, 0xa7, 0x53, 0x53,
	0xf7, 0xd3, 0xca, 0xf7, 0xa5, 0xe3, 0xbe, 0x0f, 0x03, 0x20, 0xb7, 0xcb, 0xdb, 0xc6, 0xa5, 0xb8,
	0xbf, 0xcd, 0x2c, 0xf6, 0xb7, 0xd9, 0x98, 0xbf, 0xc5, 0x97, 0x49, 0xf0, 0x45, 0x8f, 0x24, 0x38,
	0x21, 0xa0, 0xca, 0xd8, 0x06, 0xac, 0xda, 0x28, 0x48, 0xf1, 0x71, 0x09, 0x71, 0x30, 0x5e, 0xa1,
	0xed, 0xe2, 0x12, 0xae, 0x0f, 0x70, 0x1e, 0x4d, 0xeb, 0x71, 0x11, 0x73, 0x14, 0x96, 0x0f, 0xe7,
	0x54, 0x16, 0x8f, 0x75, 0xfc, 0x46, 0x31, 0xb3, 0x9e, 0x7a, 0xc3, 0xc1, 0x48, 0x25, 0xe4, 0xa9,
	0xa0, 0xe7, 0xc5, 0x9a, 0xd5, 0xf1, 0x58, 0x10, 0x56, 0x3b, 0x94, 0x28, 0x86, 0x08, 0xd3, 0x0f,
	0x33, 0x7b, 0x09, 0x59, 0xa2, 0xfd, 0x18, 0x8d, 0x22, 0xc7, 0x0f, 0x55, 0x8c, 0x5c, 0x0e, 0xed,
	0xc5, 0xde, 0xb4, 0xe4, 0xc4, 0xea, 0x78, 0xc2, 0xc6, 0x05, 0xbe, 0xb0, 0x3c, 0x9a, 0xb0, 0x21,
	0x81, 0x2f, 0x2c, 0x3f, 0x99, 0xf0, 0x35, 0x3e, 0x7c, 0xc5, 0x3c, 0xed, 0xcd, 0x65, 0x9e, 0xf6,
	0xd6, 0x1c, 0x4f, 0x1b, 0xba, 0x88, 0xdb, 0xd3, 0x2e, 0x22, 0x9a, 0xaf, 0xb8, 0x13, 0xcf, 0x57,
	0xbc, 0x72, 0xd2, 0xed, 0xb7, 0xd7, 0xa2, 0x4a, 0xf1, 0x8a, 0x06, 0x2e, 0x6e, 0x81, 0xd6, 0xe6,
	0x59, 0x20, 0x1c, 0xca, 0xee, 0xd3, 0x89, 0x90, 0x35, 0x00, 0x10, 0xa3, 0xaf, 0x4e, 0x84, 0xe0,
	0x01, 0x06, 0x7e, 0x68, 0xdf, 0x92, 0x54, 0x96, 0x77, 0x1d, 0xbc, 0xe4, 0x89, 0x99, 0x67, 0x44,
	0xf6, 0xb5, 0x74, 0xde, 0xc9, 0x40, 0xbc, 0xa5, 0xeb, 0xc6, 0xa0, 0xcb, 0x1e, 0x74, 0x2f, 0x86,
	0x2f, 0x54, 0xea, 0x8b, 0x8b, 0x58, 0x33, 0xbc, 0xbc, 0x74, 0xc6, 0xc1, 0x2b, 0x27, 0x55, 0xa4,
	0x2d, 0xbb, 0x64, 0xd1, 0x87, 0x2f, 0x3c, 0x1d, 0x48, 0xdd, 0x61, 0x5b, 0x45, 0x05, 0x5c, 0x7e,
	0x30, 0x79, 0x0d, 0x38, 0x82, 0xf4, 0x3d, 0xe5, 0xbf, 0x03, 0x80, 0x04, 0xdb, 0xbe, 0x6e, 0x07,
	0xa7, 0x75, 0x2e, 0xbd, 0xf2, 0xc9, 0x80, 0x82, 0xf0, 0xbe, 0x47, 0xd7, 0x04, 0x9c, 0x07, 0x0b,
	0xca, 0x38, 0x34, 0x7c, 0x73, 0x92, 0x4c, 0x93, 0x2f, 0x9f, 0x02, 0xa0, 0xf0, 0xed, 0x15, 0xb1,
	0x85, 0xb7, 0x62, 0xe4, 0x55, 0x8a, 0x76, 0xaf, 0x77, 0x88, 0x67, 0xd4, 0x85, 0x59, 0x53, 0xb4,
	0x0e, 0xf8, 0xb3, 0x1e, 0xb2, 0xad, 0x1c, 0xee, 0x23, 0x40, 0x17, 0xe0, 0x41, 0x2a, 0x72, 0x6d,
	0x7e, 0x2a, 0x72, 0x3d, 0x66, 0x8b, 0x94, 0x2d, 0xd9, 0x98, 0x6b, 0x4b, 0x12, 0x8b, 0x6d, 0x49,
	0x72, 0xb1, 0x2d, 0x49, 0x45, 0x6d, 0x49, 0xe1, 0x2f, 0x92, 0x42, 0x70, 0x62, 0x0a, 0x8d, 0x34,
	0xba, 0x7f, 0x83, 0x56, 0x45, 0xa5, 0x3e, 0xf8, 0xb7, 0x1a, 0x71, 0x54, 0x06, 0x1b, 0x74, 0x79,
	0x54, 0x51, 0xbf, 0x86, 0x08, 0x01, 0x0c, 0x0e, 0xa6, 0xd3, 0x21, 0xfc, 0xb3, 0x8c, 0x29, 0x58,
	0x7f, 0x4b, 0x6c, 0x4f, 0x41, 0xe8, 0xfa, 0x79, 0x15, 0xe6, 0x55, 0x51, 0x98, 0x14, 0x49, 0x51,
	0xc8, 0x7c, 0x50, 0x14, 0xa2, 0x17, 0x19, 0x6d, 0x38, 0x8f, 0x24, 0xf8, 0x45, 0x06, 0xe6, 0x56,
	0x51, 0x87, 0x60, 0x06, 0x9c, 0xaf, 0x52, 0xcf, 0x61, 0x02, 0x64, 0x26, 0x2f, 0x9d, 0x9a, 0x93,
	0x97, 0x8e, 0xb8, 0x92, 0x74, 0xdc, 0x95, 0xe0, 0x9d, 0xcc, 0xc0, 0xb5, 0xf8, 0x48, 0x25, 0x58,
	0x74, 0x07, 0xee, 0x97, 0xe5, 0xa9, 0x0a, 0x3c, 0x0a, 0x56, 0x83, 0xc0, 0xca, 0xad, 0x97, 0x52,
	0x9f, 0x01, 0xac, 0xc1, 0x10, 0x5d, 0x04, 0x02, 0x89, 0xbc, 0x07, 0x04, 0xc5, 0x66, 0xf9, 0xc7,
	0x76, 0x45, 0x85, 0x45, 0xb3, 0xb0, 0x9b, 0xf1, 0x2c, 0x6c, 0x90, 0xb5, 0xcd, 0x45, 0xb3, 0xb6,
	0xf1, 0xdc, 0x6c, 0x7e, 0x59, 0x6e, 0x56, 0x8b, 0xe7, 0x66, 0x31, 0xea, 0xc7, 0x4f, 0x3a, 0x14,
	0x70, 0xa4, 0x1a, 0x00, 0xd1, 0xfc, 0xa8, 0x1e, 0xcf, 0x8f, 0x62, 0xbb, 0x26, 0x59, 0x26, 0xa8,
	0xe3, 0x08, 0x35, 0x00, 0xa8, 0x16, 0x19, 0xa6, 0x5e, 0x39, 0x42, 0x0d, 0x80, 0x05, 0x49, 0xfd,
	0xdd, 0x85, 0x49, 0x7d, 0xb4, 0xf3, 0xf8, 0x8b, 0x2f, 0xdc, 0xea, 0x3d, 0xa9, 0xcf, 0xaa, 0x4c,
	0x42, 0x82, 0x89, 0x41, 0x5e, 0xad, 0x7d, 0x8e, 0xa5, 0x43, 0x88, 0x5a, 0x63, 0x11, 0x5b, 0x1f,
	0xb0, 0x97, 0xe0, 0x72, 0x90, 0xb1, 0xbf, 0x31, 0x2f, 0x63, 0x7f, 0x73, 0x6e, 0xc6, 0xfe, 0xd6,
	0xc2, 0x8c, 0xfd, 0xed, 0x8f, 0xcb, 0xd8, 0xdf, 0x99, 0x9f, 0xb1, 0xc7, 0x38, 0xcd, 0x45, 0x87,
	0x22, 0x33, 0xf6, 0xb2, 0xb8, 0x20, 0xc7, 0x7c, 0x77, 0x7e, 0x8e, 0xb9, 0xf0, 0x8f, 0xeb, 0xa1,
	0x72, 0x83, 0xb3, 0x41, 0xc5, 0x08, 0x93, 0xbf, 0xf4, 0xad, 0xdf, 0x17, 0xda, 0x4c, 0x8e, 0x55,
	0xea, 0xf3, 0x0c, 0x4e, 0xeb, 0x82, 0x59, 0x53, 0xfe, 0xad, 0x9c, 0x27, 0x7f, 0x39, 0x16, 0x7b,
	0xac, 0xb1, 0x3e, 0xfb, 0x58, 0x63, 0x8e, 0x31, 0xd8, 0x98, 0x6f, 0x0c, 0xd4, 0xb9, 0x5b, 0xa6,
	0x43, 0x39, 0x79, 0x1b, 0x22, 0xf8, 0xa0, 0x3b, 0x9e, 0x01, 0xe5, 0xdf, 0x64, 0xc4, 0x40, 0x52,
	0xe5, 0x68, 0xd2, 0x53, 0xa9, 0x72, 0x34, 0xdd, 0x89, 0x5c, 0x47, 0x8c, 0x48, 0x9a, 0xb9, 0x8e,
	0x18, 0x11, 0x58, 0x97, 0x99, 0xd4, 0x26, 0x27, 0x68, 0xa7, 0x71, 0xe4, 0x2b, 0x9e, 0xcd, 0xcc,
	0xf0, 0x65, 0x60, 0x2c, 0x8f, 0x09, 0x12, 0x17, 0x24, 0x30, 0xb3, 0xfc, 0x8a, 0x4d, 0xa5, 0x2e,
	0xbf, 0x28, 0xf6, 0x16, 0xe4, 0x2c, 0xa5, 0xa2, 0x2f, 0xa8, 0xc5, 0x3e, 0x3b, 0x43, 0xcf, 0xa7,
	0x3b, 0x3a, 0x7e, 0x88, 0xaf, 0xca, 0xf1, 0x2c, 0x65, 0xfe, 0xbf, 0x9d, 0xa5, 0xd4, 0x3e, 0x41,
	0x96, 0xb2, 0xf0, 0xd1, 0x2a, 0x3d, 0x12, 0x46, 0x43, 0xbd, 0xfc, 0x17, 0x6d, 0x3f, 0xee, 0x24,
	0x57, 0xe4, 0xda, 0x7a, 0x23, 0x7e, 0x6d, 0x1d, 0xfd, 0xed, 0x5c, 0xe2, 0x55, 0x7e, 0x3b, 0x07,
	0xf1, 0xd2, 0x85, 0xfb, 0xd2, 0x0a, 0xee, 0x50, 0xa1, 0x2f, 0x28, 0xd3, 0x72, 0xcf, 0x37, 0x51,
	0xa9, 0x85, 0x26, 0x0a, 0x15, 0x26, 0x7c, 0x0d, 0x44, 0xdf, 0xf7, 0xff, 0x35, 0x21, 0x52, 0xc5,
	0xb3, 0x12, 0xbd, 0x22, 0x84, 0xf5, 0xd9, 0x6e, 0x9e, 0x9b, 0x56, 0xa3, 0xdd, 0x3c, 0xb1, 0xea,
	0xb5, 0x6a, 0xa5, 0x56, 0xb6, 0xce, 0x9a, 0xc7, 0xda, 0x8a, 0x9e, 0x11, 0xc9, 0xd3, 0x4a, 0xf1,
	0xb4, 0xde, 0x6e, 0x69, 0xab, 0x30, 0xb9, 0x9d, 0x46, 0xb9, 0x3c, 0x4b, 0xb6, 0xa6, 0x6f, 0x89,
	0x6c, 0xb1, 0x5a, 0x29, 0xd7, 0x5a, 0x16, 0xd9, 0x0e, 0xed, 0xef, 0x92, 0x60, 0x93, 0x34, 0x86,
	0x4e, 0xca, 0x86, 0xd9, 0x3a, 0x2c, 0x1b, 0x2d, 0xed, 0xef, 0x93, 0xb0, 0xe0, 0xf9, 0xe9, 0xe6,
	0xff, 0x90, 0x04, 0xab, 0x96, 0x63, 0x62, 0x35, 0xda, 0x77, 0x93, 0x30, 0xdc, 0x36, 0x83, 0xc7,
	0xe5, 0x96, 0x65, 0x14, 0xa1, 0xf3, 0x4a, 0xb3, 0xa5, 0xfd, 0x49, 0x1e, 0x82, 0x88, 0x2d, 0xae,
	0x31, 0x5a, 0xad, 0x72, 0xad, 0x84, 0x95, 0xda, 0x9f, 0xe6, 0xc1, 0xff, 0x1d, 0xcc, 0x69, 0x61,
	0x1d, 0x19, 0xd0, 0xec, 0x5b, 0x79, 0x90, 0xd2, 0xdd, 0x99, 0x66, 0x96, 0x51, 0xad, 0x6a, 0x7f,
	0x96, 0x47, 0x0e, 0x30, 0x4d, 0x6b, 0x1d, 0x1a, 0xad, 0xe2, 0x89, 0x65, 0x96, 0xdf, 0xd3, 0xfe,
	0x3c, 0x0f, 0x8e, 0x62, 0xdf, 0x38, 0x6b, 0x12, 0x59, 0xb1, 0x5e, 0x2b, 0x55, 0x5a, 0x95, 0x7a,
	0xcd, 0xfa, 0x52, 0xbb, 0x74, 0x5c, 0xd6, 0xbe, 0x9d, 0x87, 0x0d, 0xda, 0x81, 0x18, 0xda, 0x6a,
	0x98, 0x95, 0xb3, 0xb2, 0x75, 0x5c, 0xaf, 0x97, 0x9a, 0x92, 0xc1, 0xbf, 0xcc, 0xeb, 0x59, 0x91,
	0xa4, 0x2a, 0xe3, 0xb1, 0xf6, 0x57, 0x79, 0x5c, 0x1d, 0x2c, 0x15, 0x61, 0xa8, 0x43, 0xa3, 0x78,
	0xaa, 0xfd, 0x75, 0x1e, 0x97, 0x01, 0x7b, 0xae, 0xd6, 0x81, 0x11, 0xf3, 0xb1, 0xf5, 0xd0, 0x7a,
	0x4b, 0xfb, 0x4e, 0x1e, 0xd7, 0x0c, 0x51, 0x24, 0x6e, 0xe3, 0x50, 0x38, 0xad, 0xbf, 0xc9, 0x83,
	0x53, 0x7e, 0xad, 0x05, 0xeb, 0x5a, 0x32, 0x5a, 0x06, 0x74, 0x59, 0x3b, 0x3e, 0x6e, 0x1b, 0x35,
	0xab, 0x51, 0x35, 0x1e, 0xc3, 0x5e, 0xc8, 0xf5, 0xfe, 0xc6, 0x3e, 0x1c, 0x87, 0xef, 0x2d, 0x24,
	0x2a, 0xbf, 0xdf, 0x38, 0xaa, 0xd6, 0x1f, 0x69, 0xdf, 0xdc, 0x87, 0xc0, 0xea, 0xd3, 0x0b, 0xc9,
	0xcc, 0xf2, 0x31, 0xf0, 0x5f, 0x36, 0xb5, 0xdf, 0xdd, 0x07, 0xeb, 0x75, 0x27, 0xa0, 0x03, 0xbe,
	0x5b, 0x46, 0xed, 0x34, 0x3e, 0xe4, 0xef, 0xed, 0x83, 0xbd, 0xb9, 0xbb, 0x88, 0x46, 0x8d, 0xf8,
	0xfb, 0x71, 0xc6, 0xa6, 0xa8, 0x82, 0x01, 0xff, 0x60, 0x1f, 0x57, 0x24, 0x20, 0x2b, 0xd6, 0xcf,
	0xce, 0xea, 0x35, 0xed, 0x0f, 0xf7, 0x71, 0x45, 0x02, 0xb4, 0x54, 0x31, 0x00, 0x2d, 0x69, 0x7f,
	0xb4, 0x8f, 0x1b, 0x0d, 0x6b, 0x53, 0x39, 0xaf, 0xb4, 0x1e, 0x5b, 0x67, 0xf5, 0x52, 0xe5, 0x08,
	0x5d, 0x19, 0xfa, 0x2c, 0xf3, 0x4c, 0xfb, 0xe8, 0x2e, 0x6e, 0x66, 0xb3, 0x74, 0x4a, 0xbe, 0xcd,
	0x2c, 0x37, 0xea, 0x66, 0x4b, 0xfb, 0xc5, 0xd7, 0x51, 0x68, 0x10, 0x6c, 0xb6, 0x8c, 0x56, 0xa5,
	0xa8, 0xf0, 0x5f, 0x7a, 0x1d, 0x07, 0x7e, 0xaf, 0x8d, 0x9b, 0x50, 0x6d, 0x17, 0x4f, 0x1f, 0x43,
	0xb5, 0xa9, 0xfd, 0xd3, 0x03, 0x38, 0xfe, 0x64, 0x60, 0xf7, 0xac, 0x66, 0xbb, 0x58, 0x2c, 0x97,
	0x4b, 0xda, 0xf7, 0x1e, 0xe8, 0x77, 0xc5, 0x4d, 0x03, 0x36, 0x3a, 0x18, 0xf7, 0xbd, 0xb6, 0x51,
	0x85, 0x81, 0x8b, 0x06, 0x4a, 0x85, 0xf6, 0xcf, 0x0f, 0x40, 0xcb, 0xb2, 0x66, 0xd9, 0x00, 0x8d,
	0x2a, 0x1a, 0x8d, 0x6a, 0xbb, 0xa9, 0x7d, 0xf4, 0xb5, 0x04, 0x70, 0xb2, 0xf9, 0xc8, 0xac, 0xb4,
	0xca, 0x01, 0xf8, 0xf5, 0xaf, 0x25, 0xee, 0xff, 0x9c, 0x48, 0x1f, 0xd6, 0x4b, 0x8f, 0xa5, 0xea,
	0x69, 0x22, 0x4b, 0x05, 0x10, 0xb9, 0x76, 0x19, 0xa4, 0x67, 0x05, 0xc4, 0x65, 0x93, 0x91, 0x66,
	0xa3, 0x5e, 0x6b, 0x96, 0x41, 0xf3, 0x76, 0x84, 0x16, 0x25, 0xb2, 0x9a, 0x95, 0x33, 0xd0, 0xba,
	0x5d, 0xb1, 0x15, 0x23, 0x24, 0x78, 0xfd, 0xfe, 0xd7, 0x37, 0x44, 0xca, 0x2c, 0xa3, 0xc8, 0x96,
	0xca, 0x10, 0x03, 0xe4, 0xf0, 0x1b, 0x67, 0x0e, 0x42, 0x8f, 0xd2, 0xf7, 0x6f, 0x3f, 0xe4, 0xbf,
	0x15, 0xd8, 0xe4, 0x5d, 0x22, 0x04, 0xb6, 0x91, 0x45, 0xa3, 0x79, 0x6a, 0x95, 0x4d, 0xb3, 0x6e,
	0x6a, 0xff, 0x1e, 0xd2, 0xdc, 0x16, 0x79, 0xa4, 0x69, 0x18, 0x26, 0x0c, 0x20, 0x6b, 0xff, 0x63,
	0x5e, 0xad, 0x71, 0xc6, 0xb5, 0xff, 0x19, 0xd6, 0x7e, 0x5a, 0xec, 0x84, 0xb5, 0xb5, 0x7a, 0xcb,
	0x2a, 0xd7, 0xea, 0xed, 0xe3, 0x13, 0xed, 0xfb, 0x21, 0xc9, 0x67, 0xc4, 0x5e, 0x48, 0x82, 0xfb,
	0x67, 0xb4, 0xb8, 0x9f, 0x1f, 0x84, 0x44, 0xf7, 0xc4, 0x36, 0xf1, 0x09, 0xe6, 0x0a, 0x7b, 0x69,
	0xb6, 0x1b, 0xb4, 0x79, 0x3f, 0x0c, 0x29, 0xf2, 0x22, 0x43, 0xd3, 0xc4, 0xed, 0x6a, 0x36, 0xb5,
	0x4f, 0xe1, 0xda, 0x20, 0xc0, 0xcb, 0xce, 0x5d, 0x22, 0xbf, 0x07, 0x08, 0x9b, 0xe5, 0xb3, 0x3a,
	0xcc, 0x98, 0x8d, 0x0d, 0xd7, 0x92, 0x81, 0xc3, 0x5a, 0x18, 0xa3, 0x72, 0x04, 0x7b, 0x7f, 0x5e,
	0xe4, 0x9a, 0x75, 0x30, 0x1d, 0xc4, 0x26, 0x42, 0x60, 0x09, 0x6a, 0x72, 0x32, 0xef, 0xa3, 0xb6,
	0x6f, 0x80, 0x1d, 0xd8, 0x8d, 0xf4, 0x49, 0xd6, 0x4d, 0x36, 0x4b, 0xa8, 0x66, 0x46, 0xa3, 0x31,
	0xdd, 0x2c, 0x89, 0xdb, 0x4c, 0x5d, 0x36, 0xab, 0x4c, 0x9e, 0x8a, 0x92, 0xb7, 0x9b, 0xa0, 0x1f,
	0x21, 0x79, 0x1a, 0x36, 0x72, 0x1f, 0xeb, 0x22, 0x8f, 0xc8, 0xad, 0x76, 0xed, 0xb4, 0x56, 0x7f,
	0x54, 0xd3, 0x04, 0xb8, 0xa5, 0x9b, 0xd1, 0xca, 0xfa, 0x69, 0x39, 0x3a, 0x56, 0x46, 0x4d, 0x8c,
	0x3a, 0xad, 0x94, 0x90, 0x97, 0xa3, 0x6a, 0x05, 0x8c, 0x4b, 0x56, 0x31, 0x8f, 0x2b, 0x61, 0xd5,
	0xab, 0x25, 0x9a, 0xe1, 0x91, 0x51, 0xa9, 0x6a, 0x9b, 0x6a, 0xad, 0x2a, 0xb5, 0x73, 0x10, 0xf4,
	0x52, 0xac, 0x73, 0x2d, 0x07, 0x7b, 0x7b, 0x87, 0x78, 0xa5, 0x05, 0x0f, 0xd6, 0xb9, 0x61, 0xd6,
	0xdf, 0x7f, 0x2c, 0x3b, 0xc8, 0xab, 0xbe, 0x99, 0xc4, 0x2c, 0x97, 0x2a, 0x4d, 0x59, 0xa5, 0xdd,
	0xff, 0xca, 0xaa, 0x48, 0xa3, 0x59, 0x6d, 0xb6, 0x1e, 0x57, 0xcb, 0xa0, 0x39, 0xb9, 0x3a, 0x38,
	0x83, 0xc3, 0x76, 0xab, 0xc5, 0x56, 0x6f, 0x05, 0x45, 0xfe, 0xac, 0xdd, 0xaa, 0x56, 0xa2, 0xe8,
	0x1a, 0xe8, 0x53, 0x9e, 0x15, 0xb8, 0x79, 0x52, 0x7f, 0x44, 0xe0, 0x3a, 0x36, 0x27, 0xdd, 0x45,
	0xdd, 0x36, 0x09, 0xdb, 0xc0, 0xfd, 0xaf, 0xd4, 0xc0, 0x8e, 0x54, 0x6a, 0xc7, 0x72, 0xda, 0x08,
	0x27, 0x48, 0xb7, 0x40, 0x09, 0x42, 0x28, 0x49, 0x5d, 0x96, 0x8b, 0xb4, 0x15, 0x27, 0xf5, 0x06,
	0x81, 0x29, 0xd4, 0xca, 0xf2, 0xfb, 0xc5, 0x13, 0x30, 0x90, 0xa4, 0xf1, 0xb0, 0xfe, 0x40, 0x76,
	0x6c, 0x1a, 0xe0, 0x34, 0x5a, 0xf5, 0x96, 0x51, 0x25, 0x50, 0x60, 0x77, 0x46, 0xe9, 0xbc, 0x6c,
	0xb6, 0x2a, 0x4d, 0x49, 0x97, 0x41, 0x3a, 0x58, 0x31, 0x54, 0x79, 0xd4, 0x3f, 0x02, 0xb3, 0x08,
	0x92, 0xdd, 0x88, 0x80, 0x9b, 0xf7, 0xcf, 0x45, 0x26, 0xb2, 0x9b, 0x60, 0x9f, 0xf4, 0xa9, 0xcd,
	0xc5, 0xbd, 0xfd, 0xd4, 0x34, 0x5e, 0x69, 0x9c, 0xc0, 0x5a, 0xc1, 0x02, 0x81, 0xcf, 0x8e, 0xe2,
	0xc0, 0x9a, 0x59, 0xaf, 0x94, 0xb4, 0xd5, 0xfb, 0xbf, 0xb5, 0x2a, 0x52, 0xea, 0xf7, 0x01, 0x20,
	0x19, 0x5b, 0xf0, 0xfd, 0xa8, 0x6e, 0x9e, 0x4a, 0xb2, 0x47, 0x60, 0xb2, 0xa2, 0x8a, 0x03, 0x92,
	0x11, 0xab, 0x57, 0x32, 0x45, 0x1a, 0x14, 0xab, 0x39, 0x6e, 0x98, 0x4d, 0x18, 0x76, 0x1a, 0x2e,
	0xa3, 0x37, 0x5c, 0x9d, 0x81, 0xdb, 0x67, 0xad, 0xa6, 0x34, 0x51, 0x31, 0xb8, 0x58, 0x3a, 0x33,
	0x60, 0xc7, 0x66, 0x3a, 0x39, 0x2f, 0xd5, 0x61, 0xd3, 0x60, 0x4a, 0x33, 0xb0, 0x65, 0xc0, 0xb6,
	0xc1, 0x1a, 0xc4, 0x2a, 0xbe, 0xf0, 0xc2, 0x6c, 0xe1, 0xde, 0x4d, 0xe3, 0x27, 0xcd, 0x52, 0xc3,
	0x80, 0xed, 0x9b, 0xc5, 0xdb, 0x80, 0xa7, 0x67, 0xc6, 0x3d, 0x69, 0x02, 0x2c, 0xee, 0x7f, 0x75,
	0x45, 0x64, 0x5a, 0xc6, 0x61, 0xb5, 0x6c, 0x81, 0x23, 0xa9, 0x96, 0x90, 0x8f, 0x48, 0x51, 0xa9,
	0x8d, 0x34, 0x1f, 0xd1, 0x8a, 0xc0, 0x1c, 0x54, 0xeb, 0x45, 0x58, 0x83, 0x39, 0xb5, 0x4d, 0x0c,
	0x33, 0x64, 0x8c, 0x74, 0x4f, 0xdc, 0x5e, 0x54, 0x6b, 0xd5, 0xda, 0x60, 0xb8, 0xff, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0x1f, 0x66, 0xb5, 0x86, 0x45, 0x00, 0x00,
}
