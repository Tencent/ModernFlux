// Code generated by protoc-gen-go.
// source: open_app_desc.proto
// DO NOT EDIT!

/*
Package open_app_desc is a generated protocol buffer package.

It is generated from these files:
	open_app_desc.proto

It has these top-level messages:
	RealReport
	QReport
	ReportItem
	QuotaReq
	QuotaRsp
*/
package openappdesc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// active/ip/set report
type RealReport struct {
	Keytype          *int32 `protobuf:"varint,1,opt,name=keytype" json:"keytype,omitempty"`
	Keyname          []byte `protobuf:"bytes,2,opt,name=keyname" json:"keyname,omitempty"`
	Timekey          *int64 `protobuf:"varint,3,opt,name=timekey" json:"timekey,omitempty"`
	Setname          []byte `protobuf:"bytes,4,opt,name=setname" json:"setname,omitempty"`
	Total            *int32 `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
	Refuse           *int32 `protobuf:"varint,6,opt,name=refuse" json:"refuse,omitempty"`
	Setrefuse        *int32 `protobuf:"varint,7,opt,name=setrefuse" json:"setrefuse,omitempty"`
	Real             *int32 `protobuf:"varint,8,opt,name=real" json:"real,omitempty"`
	Quota            *int32 `protobuf:"varint,9,opt,name=quota" json:"quota,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RealReport) Reset()                    { *m = RealReport{} }
func (m *RealReport) String() string            { return proto.CompactTextString(m) }
func (*RealReport) ProtoMessage()               {}
func (*RealReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RealReport) GetKeytype() int32 {
	if m != nil && m.Keytype != nil {
		return *m.Keytype
	}
	return 0
}

func (m *RealReport) GetKeyname() []byte {
	if m != nil {
		return m.Keyname
	}
	return nil
}

func (m *RealReport) GetTimekey() int64 {
	if m != nil && m.Timekey != nil {
		return *m.Timekey
	}
	return 0
}

func (m *RealReport) GetSetname() []byte {
	if m != nil {
		return m.Setname
	}
	return nil
}

func (m *RealReport) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *RealReport) GetRefuse() int32 {
	if m != nil && m.Refuse != nil {
		return *m.Refuse
	}
	return 0
}

func (m *RealReport) GetSetrefuse() int32 {
	if m != nil && m.Setrefuse != nil {
		return *m.Setrefuse
	}
	return 0
}

func (m *RealReport) GetReal() int32 {
	if m != nil && m.Real != nil {
		return *m.Real
	}
	return 0
}

func (m *RealReport) GetQuota() int32 {
	if m != nil && m.Quota != nil {
		return *m.Quota
	}
	return 0
}

type QReport struct {
	Actid            []byte `protobuf:"bytes,1,opt,name=actid" json:"actid,omitempty"`
	Ip               []byte `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Procid           *int32 `protobuf:"varint,3,opt,name=procid" json:"procid,omitempty"`
	Timekey          *int64 `protobuf:"varint,4,opt,name=timekey" json:"timekey,omitempty"`
	Setname          []byte `protobuf:"bytes,5,opt,name=setname" json:"setname,omitempty"`
	Actquota         *int32 `protobuf:"varint,6,opt,name=actquota" json:"actquota,omitempty"`
	Setquota         *int32 `protobuf:"varint,7,opt,name=setquota" json:"setquota,omitempty"`
	Total            *int32 `protobuf:"varint,8,opt,name=total" json:"total,omitempty"`
	Refuse           *int32 `protobuf:"varint,9,opt,name=refuse" json:"refuse,omitempty"`
	Setrefuse        *int32 `protobuf:"varint,10,opt,name=setrefuse" json:"setrefuse,omitempty"`
	Real             *int32 `protobuf:"varint,11,opt,name=real" json:"real,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *QReport) Reset()                    { *m = QReport{} }
func (m *QReport) String() string            { return proto.CompactTextString(m) }
func (*QReport) ProtoMessage()               {}
func (*QReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QReport) GetActid() []byte {
	if m != nil {
		return m.Actid
	}
	return nil
}

func (m *QReport) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *QReport) GetProcid() int32 {
	if m != nil && m.Procid != nil {
		return *m.Procid
	}
	return 0
}

func (m *QReport) GetTimekey() int64 {
	if m != nil && m.Timekey != nil {
		return *m.Timekey
	}
	return 0
}

func (m *QReport) GetSetname() []byte {
	if m != nil {
		return m.Setname
	}
	return nil
}

func (m *QReport) GetActquota() int32 {
	if m != nil && m.Actquota != nil {
		return *m.Actquota
	}
	return 0
}

func (m *QReport) GetSetquota() int32 {
	if m != nil && m.Setquota != nil {
		return *m.Setquota
	}
	return 0
}

func (m *QReport) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *QReport) GetRefuse() int32 {
	if m != nil && m.Refuse != nil {
		return *m.Refuse
	}
	return 0
}

func (m *QReport) GetSetrefuse() int32 {
	if m != nil && m.Setrefuse != nil {
		return *m.Setrefuse
	}
	return 0
}

func (m *QReport) GetReal() int32 {
	if m != nil && m.Real != nil {
		return *m.Real
	}
	return 0
}

// quota
type ReportItem struct {
	Timekey          *int64 `protobuf:"varint,1,opt,name=timekey" json:"timekey,omitempty"`
	Reportnum        *int64 `protobuf:"varint,2,opt,name=reportnum" json:"reportnum,omitempty"`
	Refuse           *int64 `protobuf:"varint,3,opt,name=refuse" json:"refuse,omitempty"`
	Setrefuse        *int64 `protobuf:"varint,4,opt,name=setrefuse" json:"setrefuse,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReportItem) Reset()                    { *m = ReportItem{} }
func (m *ReportItem) String() string            { return proto.CompactTextString(m) }
func (*ReportItem) ProtoMessage()               {}
func (*ReportItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReportItem) GetTimekey() int64 {
	if m != nil && m.Timekey != nil {
		return *m.Timekey
	}
	return 0
}

func (m *ReportItem) GetReportnum() int64 {
	if m != nil && m.Reportnum != nil {
		return *m.Reportnum
	}
	return 0
}

func (m *ReportItem) GetRefuse() int64 {
	if m != nil && m.Refuse != nil {
		return *m.Refuse
	}
	return 0
}

func (m *ReportItem) GetSetrefuse() int64 {
	if m != nil && m.Setrefuse != nil {
		return *m.Setrefuse
	}
	return 0
}

type QuotaReq struct {
	Key              []byte        `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Referkey         []byte        `protobuf:"bytes,2,opt,name=referkey" json:"referkey,omitempty"`
	Reportitem       []*ReportItem `protobuf:"bytes,3,rep,name=reportitem" json:"reportitem,omitempty"`
	Localquota       *int32        `protobuf:"varint,4,opt,name=localquota" json:"localquota,omitempty"`
	Id               *int32        `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
	Serial           []byte        `protobuf:"bytes,6,opt,name=serial" json:"serial,omitempty"`
	Totalquota       *int32        `protobuf:"varint,7,opt,name=totalquota" json:"totalquota,omitempty"`
	Openid           []byte        `protobuf:"bytes,8,opt,name=openid" json:"openid,omitempty"`
	Uin              *int64        `protobuf:"varint,9,opt,name=uin" json:"uin,omitempty"`
	Nowsum           *int64        `protobuf:"varint,10,opt,name=nowsum" json:"nowsum,omitempty"`
	Workernum        *int64        `protobuf:"varint,11,opt,name=workernum" json:"workernum,omitempty"`
	Setkey           []byte        `protobuf:"bytes,12,opt,name=setkey" json:"setkey,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *QuotaReq) Reset()                    { *m = QuotaReq{} }
func (m *QuotaReq) String() string            { return proto.CompactTextString(m) }
func (*QuotaReq) ProtoMessage()               {}
func (*QuotaReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QuotaReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QuotaReq) GetReferkey() []byte {
	if m != nil {
		return m.Referkey
	}
	return nil
}

func (m *QuotaReq) GetReportitem() []*ReportItem {
	if m != nil {
		return m.Reportitem
	}
	return nil
}

func (m *QuotaReq) GetLocalquota() int32 {
	if m != nil && m.Localquota != nil {
		return *m.Localquota
	}
	return 0
}

func (m *QuotaReq) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *QuotaReq) GetSerial() []byte {
	if m != nil {
		return m.Serial
	}
	return nil
}

func (m *QuotaReq) GetTotalquota() int32 {
	if m != nil && m.Totalquota != nil {
		return *m.Totalquota
	}
	return 0
}

func (m *QuotaReq) GetOpenid() []byte {
	if m != nil {
		return m.Openid
	}
	return nil
}

func (m *QuotaReq) GetUin() int64 {
	if m != nil && m.Uin != nil {
		return *m.Uin
	}
	return 0
}

func (m *QuotaReq) GetNowsum() int64 {
	if m != nil && m.Nowsum != nil {
		return *m.Nowsum
	}
	return 0
}

func (m *QuotaReq) GetWorkernum() int64 {
	if m != nil && m.Workernum != nil {
		return *m.Workernum
	}
	return 0
}

func (m *QuotaReq) GetSetkey() []byte {
	if m != nil {
		return m.Setkey
	}
	return nil
}

type QuotaRsp struct {
	Key              []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Localq           *int64 `protobuf:"varint,2,opt,name=localq" json:"localq,omitempty"`
	Totalq           *int64 `protobuf:"varint,3,opt,name=totalq" json:"totalq,omitempty"`
	Partnernum       *int32 `protobuf:"varint,4,opt,name=partnernum" json:"partnernum,omitempty"`
	Serial           []byte `protobuf:"bytes,5,opt,name=serial" json:"serial,omitempty"`
	Ipnum            *int32 `protobuf:"varint,6,opt,name=ipnum" json:"ipnum,omitempty"`
	Alloctype        *int32 `protobuf:"varint,7,opt,name=alloctype" json:"alloctype,omitempty"`
	Allocpartnum     *int32 `protobuf:"varint,8,opt,name=allocpartnum" json:"allocpartnum,omitempty"`
	Alloctime        *int64 `protobuf:"varint,9,opt,name=alloctime" json:"alloctime,omitempty"`
	Self             *int64 `protobuf:"varint,10,opt,name=self" json:"self,omitempty"`
	Total            *int64 `protobuf:"varint,11,opt,name=total" json:"total,omitempty"`
	Nowsum           *int64 `protobuf:"varint,12,opt,name=nowsum" json:"nowsum,omitempty"`
	Totalworkernum   *int64 `protobuf:"varint,13,opt,name=totalworkernum" json:"totalworkernum,omitempty"`
	Setquota         *int32 `protobuf:"varint,14,opt,name=setquota" json:"setquota,omitempty"`
	Setsum           *int32 `protobuf:"varint,15,opt,name=setsum" json:"setsum,omitempty"`
	Procquota        *int32 `protobuf:"varint,16,opt,name=procquota" json:"procquota,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *QuotaRsp) Reset()                    { *m = QuotaRsp{} }
func (m *QuotaRsp) String() string            { return proto.CompactTextString(m) }
func (*QuotaRsp) ProtoMessage()               {}
func (*QuotaRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QuotaRsp) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QuotaRsp) GetLocalq() int64 {
	if m != nil && m.Localq != nil {
		return *m.Localq
	}
	return 0
}

func (m *QuotaRsp) GetTotalq() int64 {
	if m != nil && m.Totalq != nil {
		return *m.Totalq
	}
	return 0
}

func (m *QuotaRsp) GetPartnernum() int32 {
	if m != nil && m.Partnernum != nil {
		return *m.Partnernum
	}
	return 0
}

func (m *QuotaRsp) GetSerial() []byte {
	if m != nil {
		return m.Serial
	}
	return nil
}

func (m *QuotaRsp) GetIpnum() int32 {
	if m != nil && m.Ipnum != nil {
		return *m.Ipnum
	}
	return 0
}

func (m *QuotaRsp) GetAlloctype() int32 {
	if m != nil && m.Alloctype != nil {
		return *m.Alloctype
	}
	return 0
}

func (m *QuotaRsp) GetAllocpartnum() int32 {
	if m != nil && m.Allocpartnum != nil {
		return *m.Allocpartnum
	}
	return 0
}

func (m *QuotaRsp) GetAlloctime() int64 {
	if m != nil && m.Alloctime != nil {
		return *m.Alloctime
	}
	return 0
}

func (m *QuotaRsp) GetSelf() int64 {
	if m != nil && m.Self != nil {
		return *m.Self
	}
	return 0
}

func (m *QuotaRsp) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *QuotaRsp) GetNowsum() int64 {
	if m != nil && m.Nowsum != nil {
		return *m.Nowsum
	}
	return 0
}

func (m *QuotaRsp) GetTotalworkernum() int64 {
	if m != nil && m.Totalworkernum != nil {
		return *m.Totalworkernum
	}
	return 0
}

func (m *QuotaRsp) GetSetquota() int32 {
	if m != nil && m.Setquota != nil {
		return *m.Setquota
	}
	return 0
}

func (m *QuotaRsp) GetSetsum() int32 {
	if m != nil && m.Setsum != nil {
		return *m.Setsum
	}
	return 0
}

func (m *QuotaRsp) GetProcquota() int32 {
	if m != nil && m.Procquota != nil {
		return *m.Procquota
	}
	return 0
}

func init() {
	proto.RegisterType((*RealReport)(nil), "open_app_desc.RealReport")
	proto.RegisterType((*QReport)(nil), "open_app_desc.QReport")
	proto.RegisterType((*ReportItem)(nil), "open_app_desc.ReportItem")
	proto.RegisterType((*QuotaReq)(nil), "open_app_desc.QuotaReq")
	proto.RegisterType((*QuotaRsp)(nil), "open_app_desc.QuotaRsp")
}

var fileDescriptor0 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x54, 0x4b, 0x8e, 0xd3, 0x40,
	0x10, 0x55, 0xe2, 0x38, 0x71, 0x2a, 0x9e, 0x30, 0x6a, 0x10, 0x32, 0x08, 0x21, 0xe4, 0x05, 0x9a,
	0xd5, 0x2c, 0xd8, 0x71, 0x04, 0x96, 0xd3, 0x17, 0x18, 0x59, 0x49, 0x8f, 0x64, 0xe1, 0xd8, 0x3d,
	0x76, 0x5b, 0xa3, 0xe1, 0x1a, 0xdc, 0x85, 0x8b, 0x70, 0x0b, 0x4e, 0x41, 0x7d, 0xda, 0x6e, 0x3b,
	0x4a, 0x76, 0x7e, 0xaf, 0xba, 0xaa, 0xeb, 0xbd, 0xaa, 0x36, 0xbc, 0x6d, 0xac, 0xa9, 0x1f, 0x0b,
	0x6b, 0x1f, 0x8f, 0xa6, 0x3b, 0xdc, 0xdb, 0xb6, 0x71, 0x8d, 0xba, 0x99, 0x91, 0xf9, 0xbf, 0x05,
	0x80, 0x36, 0x45, 0xa5, 0x8d, 0x6d, 0x5a, 0xa7, 0x32, 0xd8, 0xfc, 0x34, 0xaf, 0xee, 0xd5, 0x9a,
	0x6c, 0xf1, 0x65, 0x71, 0x17, 0xeb, 0x01, 0xfa, 0x48, 0x5d, 0x9c, 0x4c, 0xb6, 0xc4, 0x48, 0xaa,
	0x07, 0x48, 0x11, 0x57, 0x9e, 0x0c, 0xc2, 0x2c, 0xc2, 0x48, 0xa4, 0x07, 0x48, 0x91, 0xce, 0x38,
	0xce, 0x59, 0x49, 0x8e, 0x87, 0xea, 0x1d, 0xc4, 0xae, 0x71, 0x45, 0x95, 0xc5, 0x7c, 0x8b, 0x00,
	0xf5, 0x1e, 0xd6, 0xad, 0x79, 0xea, 0x3b, 0x93, 0xad, 0x99, 0xf6, 0x48, 0x7d, 0x82, 0x2d, 0x26,
	0xfa, 0xd0, 0x86, 0x43, 0x81, 0x50, 0x0a, 0x56, 0x2d, 0x2a, 0xc8, 0x12, 0x0e, 0xf0, 0x37, 0xd5,
	0x7f, 0xee, 0xb1, 0x66, 0xb6, 0x95, 0xfa, 0x0c, 0xf2, 0xdf, 0x4b, 0xd8, 0x3c, 0x78, 0xa5, 0x78,
	0xa2, 0x38, 0xb8, 0xf2, 0xc8, 0x3a, 0x53, 0x2d, 0x40, 0xed, 0x61, 0x59, 0x5a, 0x2f, 0x10, 0xbf,
	0xa8, 0x23, 0xb4, 0xed, 0x80, 0xc7, 0x22, 0xe9, 0x48, 0xd0, 0x54, 0xf3, 0xea, 0xaa, 0xe6, 0x78,
	0xae, 0xf9, 0x23, 0x24, 0x78, 0x89, 0xb4, 0x25, 0xfa, 0x46, 0x4c, 0x31, 0x3c, 0x26, 0x31, 0x11,
	0x38, 0xe2, 0xe0, 0x55, 0x72, 0xd9, 0xab, 0xed, 0x75, 0xaf, 0xe0, 0x9a, 0x57, 0xbb, 0xe0, 0x55,
	0xfe, 0x8b, 0x36, 0x80, 0x3c, 0xf9, 0xe1, 0xcc, 0x69, 0xaa, 0x6c, 0x31, 0x57, 0x86, 0x95, 0x5b,
	0x3e, 0x57, 0xf7, 0x27, 0xb6, 0x28, 0xd2, 0x81, 0x98, 0xf4, 0x23, 0x4b, 0x70, 0xb1, 0x1f, 0xf1,
	0x2a, 0x10, 0xf9, 0xdf, 0x25, 0x24, 0x0f, 0xa4, 0x52, 0x9b, 0x67, 0x75, 0x0b, 0xd1, 0x70, 0x6d,
	0xaa, 0xe9, 0x93, 0x6c, 0xc1, 0x83, 0xa6, 0x25, 0x5a, 0x86, 0x32, 0x62, 0xf5, 0x1d, 0x40, 0x6e,
	0x2f, 0xb1, 0x6d, 0xbc, 0x34, 0xba, 0xdb, 0x7d, 0xfb, 0x70, 0x3f, 0x5f, 0xf9, 0xa0, 0x4b, 0x4f,
	0x0e, 0xab, 0xcf, 0x00, 0x55, 0x73, 0x28, 0x2a, 0xf1, 0x7b, 0xc5, 0x5e, 0x4c, 0x18, 0xde, 0x82,
	0xa3, 0x5f, 0x4d, 0xfc, 0x22, 0x6d, 0x9d, 0x69, 0x4b, 0xf4, 0x6d, 0xcd, 0x4d, 0x78, 0x44, 0x75,
	0x78, 0x18, 0xd3, 0xb9, 0x4d, 0x18, 0xca, 0xa3, 0x7e, 0xb0, 0x56, 0x22, 0x79, 0x82, 0x48, 0x68,
	0x5f, 0xd6, 0x3c, 0xb8, 0x48, 0xd3, 0x27, 0x9d, 0xac, 0x9b, 0x97, 0x0e, 0x8d, 0x05, 0x71, 0x4f,
	0x10, 0xb9, 0xf7, 0xd2, 0xa0, 0xdc, 0x96, 0x3c, 0xdf, 0x89, 0x7b, 0x23, 0x21, 0x7d, 0x39, 0x32,
	0x27, 0x1d, 0xfa, 0x22, 0x94, 0xff, 0x89, 0x06, 0x57, 0x3b, 0x7b, 0xc1, 0x55, 0x4c, 0x13, 0xb1,
	0x7e, 0x8a, 0x1e, 0x11, 0x2f, 0xcd, 0x0f, 0x23, 0x14, 0x44, 0x32, 0x6d, 0x81, 0x53, 0x96, 0x2e,
	0xbc, 0x5d, 0x81, 0x99, 0xd8, 0x13, 0xcf, 0xec, 0xc1, 0xc5, 0x2d, 0x2d, 0xa5, 0xc8, 0xb6, 0x0b,
	0x20, 0x49, 0x45, 0x85, 0x37, 0xf2, 0x4f, 0xc6, 0x3f, 0xe6, 0x91, 0x50, 0x39, 0xa4, 0x0c, 0xb8,
	0x3c, 0xa6, 0xca, 0xce, 0xcf, 0xb8, 0x50, 0x01, 0x17, 0xd3, 0x9b, 0x18, 0x08, 0x5a, 0xf1, 0xce,
	0x54, 0x4f, 0xde, 0x48, 0xfe, 0x0e, 0x4f, 0x48, 0x2c, 0x0c, 0x4f, 0xc8, 0x9b, 0x9e, 0xce, 0x4c,
	0xff, 0x0a, 0x7b, 0x3e, 0x10, 0x9c, 0xbf, 0xe1, 0xf8, 0x19, 0x3b, 0x7b, 0xb4, 0xfb, 0xb3, 0x47,
	0x2b, 0xa3, 0xa1, 0xda, 0x6f, 0xe4, 0x79, 0x0a, 0xa2, 0xde, 0xe9, 0x17, 0x22, 0x49, 0xb7, 0xa2,
	0x7e, 0x24, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xd3, 0x29, 0x84, 0xb2, 0x05, 0x00, 0x00,
}
